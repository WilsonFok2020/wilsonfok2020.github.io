<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-01-05T19:23:43+08:00</updated><id>/feed.xml</id><title type="html">Wilson Fok</title><subtitle>Hello, My name is Wilson Fok. I love to extract useful insights and knowledge from big data. I also like to make new friends and connections. Let&apos;s connect! </subtitle><author><name>Wilson Fok</name></author><entry><title type="html">ODOO and me</title><link href="/others/2025/01/04/ODOO/" rel="alternate" type="text/html" title="ODOO and me" /><published>2025-01-04T00:00:00+08:00</published><updated>2025-01-04T00:00:00+08:00</updated><id>/others/2025/01/04/ODOO</id><content type="html" xml:base="/others/2025/01/04/ODOO/">&lt;h1 id=&quot;what-is-odoo&quot;&gt;What is ODOO?&lt;/h1&gt;
&lt;p&gt;ODOO is a versatile open-source Enterprise Resource Planning (ERP) and Customer Relationship Management (CRM) software that provides a comprehensive, integrated platform for managing a wide range of business functions.
Its modules cover purchasing, inventory management, manufacturing, sales, logistics, products and services, quality control, e-commerce websites, accounting, human resources, project management, marketing, CRM, internal chat room, and much more. By offering these diverse capabilities, ODOO enables businesses to consolidate their operations into a single platform, providing a holistic view of their activities.
If ODOO operates as advertised, it can provide valuable insights into the health of a business. For example, it can generate instantaneous accounting statements, track sales performance, evaluate warehouse efficiency, and deliver other timely, actionable information.
The paid Enterprise version offers additional support, advanced features, and access to more business modules with excellent tutorials, making it an attractive option for companies looking for a robust ERP solution. However, the Community Edition (OCA) is also highly effective for many organizations, especially small and medium-sized enterprises, even though some advanced modules may be less readily available.
ODOO’s broad scope, flexibility, and free customization options make it particularly appealing to small and medium-sized businesses (SMBs) for managing their operations efficiently without significant upfront investment.&lt;/p&gt;

&lt;p&gt;A quick summary of ODOO’s capabilities and features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Community and Marketplace&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Active Community: ODOO has a vibrant community of developers and users that contribute to the software’s development, share best practices, and create various modules to expand its functionality.&lt;/p&gt;

&lt;p&gt;ODOO Apps Store: The official marketplace provides a variety of third-party applications that can be integrated into ODOO, allowing businesses to customize their experience further and add specific functionalities.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User Experience and Interface&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Intuitive Design: ODOO’s user interface is designed to be user-friendly and intuitive, which can facilitate easier onboarding for new users. This aspect is critical for adoption within organizations.&lt;/p&gt;

&lt;p&gt;Mobile Accessibility: ODOO offers mobile applications, enabling users to manage operations on-the-go, which enhances flexibility and responsiveness in business operations.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Automation Capabilities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Workflows and Automation: ODOO allows businesses to automate repetitive tasks and workflows, which can significantly enhance efficiency and reduce manual errors.&lt;/p&gt;

&lt;p&gt;Email Marketing and CRM Automation: ODOO includes features for automating marketing campaigns and client interactions, helping businesses maintain effective customer relations without constant manual intervention.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reporting and Analytics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Advanced Reporting Tools: ODOO provides robust reporting and analytics features that allow organizations to generate detailed insights into various aspects of their business, supporting better decision-making.&lt;/p&gt;

&lt;p&gt;Customizable Dashboards: Users can create customized dashboards to track key business indicators and relevant metrics at a glance.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Integration Capabilities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API Availability: ODOO offers RESTful APIs that empower organizations to integrate it with other software systems, facilitating seamless data exchange and improving operational coherence.&lt;/p&gt;

&lt;p&gt;Third-Party Integrations: Many businesses leverage ODOO’s ability to connect with existing software tools (like e-commerce platforms, payment gateways, etc.) to enhance their operational ecosystem.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Localization and Scalability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Multi-Language and Currency Support: ODOO supports multiple languages and currencies, making it suitable for international operations and businesses targeting diverse markets.&lt;/p&gt;

&lt;p&gt;Scalability: ODOO can scale with the business as it grows, adding more modules or functionalities as needed. This scalability makes it ideal for startups that anticipate growth.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Training and Resources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Documentation and Tutorials: ODOO offers comprehensive documentation and tutorials, which are helpful for users navigating the system for the first time and seeking to deepen their understanding.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Regular Updates and Support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Frequent Updates: ODOO is continually updated to incorporate new features, enhancements, and security updates, ensuring that users have access to the latest technology.&lt;/p&gt;

&lt;p&gt;Enterprise Support Options: The enterprise version provides access to dedicated support channels, which can be crucial for businesses that require quick assistance.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Industry-Specific Solutions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Industry-Specific Modules: ODOO offers industry-specific modules that can address the unique challenges and requirements of various sectors, such as manufacturing, retail, health care, and more.&lt;/p&gt;

&lt;h1 id=&quot;the-real-challenge-how-easy-is-it-to-realize-odoos-potential&quot;&gt;The Real Challenge: How Easy is it to Realize ODOO’s Potential?&lt;/h1&gt;
&lt;p&gt;ODOO serves as a centralized platform where all business activities and information are collected, analyzed, and reported. More importantly, its advanced analytical capabilities allow businesses to forecast trends and implement strategies such as Just-In-Time (JIT) supply chain management.
However, while ODOO’s potential is impressive, implementing and optimizing it for business-specific needs can be a challenging task. Success often depends on understanding the intricate details of business workflows and aligning them with ODOO’s capabilities.&lt;/p&gt;

&lt;h1 id=&quot;what-i-have-learned-from-using-odoo&quot;&gt;What I Have Learned from Using ODOO&lt;/h1&gt;
&lt;p&gt;Before exploring ODOO, my understanding of financial and goods/services flows was primarily based on theoretical economic principles. However, diving into ODOO’s modules has given me a much deeper, hands-on understanding of these concepts.
I followed the tutorials for all the major modules, including purchasing, inventory management, manufacturing, sales, logistics, e-commerce, accounting, HR, project management, and CRM. By cross-referencing the entries I created in these modules, I gained insights into the natural connections and the cascading flow of information across functional departments. This exercise was enlightening and gave me a practical perspective on how businesses operate holistically.
To experiment, I created dummy data for a hypothetical manufacturing process. I defined some items as purchasable while others were assembled in-house. Through this process, I learned how production records are created and how principles of manufacturing are reflected in ODOO. This exercise demonstrated the goods and services flow, while the accompanying accounting entries—such as purchase orders, sales invoices, bills, and receipts—illustrated the money flow.
Although I am not an expert in accounting, ODOO helped me understand basic concepts such as current assets, revenues, expenses, accounts receivable, and accounts payable. By experimenting with fake sales orders, receipts, and refunds, I learned how physical activities and financial records interconnect. For example:
•	When refunds are issued, revenue and expenses must be adjusted accordingly, while the returned goods are recorded back into inventory or are sent to scrap at the warehouse.
•	Reconciliation plays a crucial role in ensuring that all numbers align accurately.
ODOO’s ability to simulate processes with dummy data makes it an excellent tool for learning and experimentation.&lt;/p&gt;

&lt;h1 id=&quot;who-would-benefit-from-odoo&quot;&gt;Who Would Benefit from ODOO?&lt;/h1&gt;
&lt;p&gt;I recommend ODOO to:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Small and Medium-Sized Businesses (SMBs): ODOO is cost-effective, and even its Enterprise version is reasonably priced. Its flexibility and comprehensive feature set can help SMBs streamline their operations without investing in expensive proprietary solutions.&lt;/li&gt;
  &lt;li&gt;Beginners in Business Operations: For those unfamiliar with accounting, logistics, manufacturing, or record-keeping, ODOO provides an excellent platform for learning. Its modular structure and tutorials make it easy to understand real-life business activities in a hands-on manner.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;why-am-i-using-odoo&quot;&gt;Why Am I Using ODOO?&lt;/h1&gt;
&lt;p&gt;Our company recently completed the research and development (R&amp;amp;D) phase for a minimally viable product. We are now transitioning from R&amp;amp;D to full-scale manufacturing—a phase that demands meticulous design transfer and process management.
This transition requires managing every step, including:
•	Developing work instructions, design drawings, guidelines, and checkpoints for handling components and suppliers.
•	Overseeing quality control, production, assembly, and quality assurance.
•	Testing integrated products, packaging, and shipping.
Throughout this process, every step must be traceable, reliable, and monitored to identify and resolve issues as they arise. ODOO offers the tools and flexibility to manage these complexities effectively, ensuring that our workflows are efficient and transparent.&lt;/p&gt;

&lt;h1 id=&quot;final-remarks-lessons-learned-and-challenges-ahead&quot;&gt;Final Remarks: Lessons Learned and Challenges Ahead&lt;/h1&gt;
&lt;p&gt;ODOO’s flexibility is one of its strongest assets. Over the years, the OCA community has developed and shared a wealth of modules that can be customized to meet specific needs. For example:
•	Input constraints can ensure data integrity, such as limiting certain fields to integers or validating entries using SQL or Python constraints.
•	Automated calculations reduce human error and streamline workflows.
However, the most valuable lesson I’ve learned is that the success of any ERP system, including ODOO, depends on the quality of the data and the commitment of the people involved. The saying “garbage in, garbage out” perfectly encapsulates this challenge. Even the most advanced software cannot deliver meaningful insights if the input data is inaccurate or incomplete.&lt;/p&gt;
&lt;h3 id=&quot;key-considerations-include&quot;&gt;Key considerations include:&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Data Entry Discipline: Staff must understand the value of accurate data entry and remain committed to maintaining high standards.&lt;/li&gt;
  &lt;li&gt;Deciding What Matters: Not everything needs to be recorded. Businesses must carefully decide what data is essential and ensure it is recorded reliably.&lt;/li&gt;
  &lt;li&gt;Staff Buy-In: Continuous engagement and feedback from staff are critical to the platform’s success. Their insights and commitment make the system meaningful and powerful.
As Albert Einstein famously said:
    &lt;blockquote&gt;
      &lt;p&gt;“Not everything that can be counted counts, and not everything that counts can be counted.”&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The true power of ODOO lies in its ability to foster collaboration and insight across an organization. Its success ultimately hinges on the people who use it, their understanding of its value, and their willingness to adapt and grow with it.&lt;/p&gt;</content><author><name>Wilson Fok</name></author><category term="Others" /><summary type="html">What is ODOO? ODOO is a versatile open-source Enterprise Resource Planning (ERP) and Customer Relationship Management (CRM) software that provides a comprehensive, integrated platform for managing a wide range of business functions. Its modules cover purchasing, inventory management, manufacturing, sales, logistics, products and services, quality control, e-commerce websites, accounting, human resources, project management, marketing, CRM, internal chat room, and much more. By offering these diverse capabilities, ODOO enables businesses to consolidate their operations into a single platform, providing a holistic view of their activities. If ODOO operates as advertised, it can provide valuable insights into the health of a business. For example, it can generate instantaneous accounting statements, track sales performance, evaluate warehouse efficiency, and deliver other timely, actionable information. The paid Enterprise version offers additional support, advanced features, and access to more business modules with excellent tutorials, making it an attractive option for companies looking for a robust ERP solution. However, the Community Edition (OCA) is also highly effective for many organizations, especially small and medium-sized enterprises, even though some advanced modules may be less readily available. ODOO’s broad scope, flexibility, and free customization options make it particularly appealing to small and medium-sized businesses (SMBs) for managing their operations efficiently without significant upfront investment. A quick summary of ODOO’s capabilities and features: Community and Marketplace Active Community: ODOO has a vibrant community of developers and users that contribute to the software’s development, share best practices, and create various modules to expand its functionality. ODOO Apps Store: The official marketplace provides a variety of third-party applications that can be integrated into ODOO, allowing businesses to customize their experience further and add specific functionalities. User Experience and Interface Intuitive Design: ODOO’s user interface is designed to be user-friendly and intuitive, which can facilitate easier onboarding for new users. This aspect is critical for adoption within organizations. Mobile Accessibility: ODOO offers mobile applications, enabling users to manage operations on-the-go, which enhances flexibility and responsiveness in business operations. Automation Capabilities Workflows and Automation: ODOO allows businesses to automate repetitive tasks and workflows, which can significantly enhance efficiency and reduce manual errors. Email Marketing and CRM Automation: ODOO includes features for automating marketing campaigns and client interactions, helping businesses maintain effective customer relations without constant manual intervention. Reporting and Analytics Advanced Reporting Tools: ODOO provides robust reporting and analytics features that allow organizations to generate detailed insights into various aspects of their business, supporting better decision-making. Customizable Dashboards: Users can create customized dashboards to track key business indicators and relevant metrics at a glance. Integration Capabilities API Availability: ODOO offers RESTful APIs that empower organizations to integrate it with other software systems, facilitating seamless data exchange and improving operational coherence. Third-Party Integrations: Many businesses leverage ODOO’s ability to connect with existing software tools (like e-commerce platforms, payment gateways, etc.) to enhance their operational ecosystem. Localization and Scalability Multi-Language and Currency Support: ODOO supports multiple languages and currencies, making it suitable for international operations and businesses targeting diverse markets. Scalability: ODOO can scale with the business as it grows, adding more modules or functionalities as needed. This scalability makes it ideal for startups that anticipate growth. Training and Resources Documentation and Tutorials: ODOO offers comprehensive documentation and tutorials, which are helpful for users navigating the system for the first time and seeking to deepen their understanding. Regular Updates and Support Frequent Updates: ODOO is continually updated to incorporate new features, enhancements, and security updates, ensuring that users have access to the latest technology. Enterprise Support Options: The enterprise version provides access to dedicated support channels, which can be crucial for businesses that require quick assistance. Industry-Specific Solutions Industry-Specific Modules: ODOO offers industry-specific modules that can address the unique challenges and requirements of various sectors, such as manufacturing, retail, health care, and more. The Real Challenge: How Easy is it to Realize ODOO’s Potential? ODOO serves as a centralized platform where all business activities and information are collected, analyzed, and reported. More importantly, its advanced analytical capabilities allow businesses to forecast trends and implement strategies such as Just-In-Time (JIT) supply chain management. However, while ODOO’s potential is impressive, implementing and optimizing it for business-specific needs can be a challenging task. Success often depends on understanding the intricate details of business workflows and aligning them with ODOO’s capabilities. What I Have Learned from Using ODOO Before exploring ODOO, my understanding of financial and goods/services flows was primarily based on theoretical economic principles. However, diving into ODOO’s modules has given me a much deeper, hands-on understanding of these concepts. I followed the tutorials for all the major modules, including purchasing, inventory management, manufacturing, sales, logistics, e-commerce, accounting, HR, project management, and CRM. By cross-referencing the entries I created in these modules, I gained insights into the natural connections and the cascading flow of information across functional departments. This exercise was enlightening and gave me a practical perspective on how businesses operate holistically. To experiment, I created dummy data for a hypothetical manufacturing process. I defined some items as purchasable while others were assembled in-house. Through this process, I learned how production records are created and how principles of manufacturing are reflected in ODOO. This exercise demonstrated the goods and services flow, while the accompanying accounting entries—such as purchase orders, sales invoices, bills, and receipts—illustrated the money flow. Although I am not an expert in accounting, ODOO helped me understand basic concepts such as current assets, revenues, expenses, accounts receivable, and accounts payable. By experimenting with fake sales orders, receipts, and refunds, I learned how physical activities and financial records interconnect. For example: • When refunds are issued, revenue and expenses must be adjusted accordingly, while the returned goods are recorded back into inventory or are sent to scrap at the warehouse. • Reconciliation plays a crucial role in ensuring that all numbers align accurately. ODOO’s ability to simulate processes with dummy data makes it an excellent tool for learning and experimentation. Who Would Benefit from ODOO? I recommend ODOO to: Small and Medium-Sized Businesses (SMBs): ODOO is cost-effective, and even its Enterprise version is reasonably priced. Its flexibility and comprehensive feature set can help SMBs streamline their operations without investing in expensive proprietary solutions. Beginners in Business Operations: For those unfamiliar with accounting, logistics, manufacturing, or record-keeping, ODOO provides an excellent platform for learning. Its modular structure and tutorials make it easy to understand real-life business activities in a hands-on manner. Why Am I Using ODOO? Our company recently completed the research and development (R&amp;amp;D) phase for a minimally viable product. We are now transitioning from R&amp;amp;D to full-scale manufacturing—a phase that demands meticulous design transfer and process management. This transition requires managing every step, including: • Developing work instructions, design drawings, guidelines, and checkpoints for handling components and suppliers. • Overseeing quality control, production, assembly, and quality assurance. • Testing integrated products, packaging, and shipping. Throughout this process, every step must be traceable, reliable, and monitored to identify and resolve issues as they arise. ODOO offers the tools and flexibility to manage these complexities effectively, ensuring that our workflows are efficient and transparent. Final Remarks: Lessons Learned and Challenges Ahead ODOO’s flexibility is one of its strongest assets. Over the years, the OCA community has developed and shared a wealth of modules that can be customized to meet specific needs. For example: • Input constraints can ensure data integrity, such as limiting certain fields to integers or validating entries using SQL or Python constraints. • Automated calculations reduce human error and streamline workflows. However, the most valuable lesson I’ve learned is that the success of any ERP system, including ODOO, depends on the quality of the data and the commitment of the people involved. The saying “garbage in, garbage out” perfectly encapsulates this challenge. Even the most advanced software cannot deliver meaningful insights if the input data is inaccurate or incomplete. Key considerations include: Data Entry Discipline: Staff must understand the value of accurate data entry and remain committed to maintaining high standards. Deciding What Matters: Not everything needs to be recorded. Businesses must carefully decide what data is essential and ensure it is recorded reliably. Staff Buy-In: Continuous engagement and feedback from staff are critical to the platform’s success. Their insights and commitment make the system meaningful and powerful. As Albert Einstein famously said: “Not everything that can be counted counts, and not everything that counts can be counted.” The true power of ODOO lies in its ability to foster collaboration and insight across an organization. Its success ultimately hinges on the people who use it, their understanding of its value, and their willingness to adapt and grow with it.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/ODOO/odoo.png" /><media:content medium="image" url="/assets/images/ODOO/odoo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">都是选择</title><link href="/toastmasters/2024/12/03/humorous_contest/" rel="alternate" type="text/html" title="都是选择" /><published>2024-12-03T00:00:00+08:00</published><updated>2024-12-03T00:00:00+08:00</updated><id>/toastmasters/2024/12/03/humorous_contest</id><content type="html" xml:base="/toastmasters/2024/12/03/humorous_contest/">&lt;h1 id=&quot;title-都是选择&quot;&gt;Title: 都是选择&lt;/h1&gt;

&lt;p&gt;各位来宾，参赛者，评委，大家好，&lt;/p&gt;

&lt;p&gt;请大家举手，我接下来我会描述我身边的朋友，如果你也有这样的朋友，请继续举手，否则把手放下。&lt;/p&gt;

&lt;p&gt;我身边的朋友都热爱工作， 在岗位上，全心投入，充满热情。回家后，和深爱着他们的灵魂伴侣，爱她就像爱自己一样, 看不一样的夜空。&lt;/p&gt;

&lt;p&gt;我当然没有，我在说笑话。。。
现实是，他们越装着卖力地工作， 老板们越装着大方地给工资，摸鱼只骗到一点点钱。回家后，和一个不爱的人，守着一段不完整的婚姻。他们的态度是。。。。消极地为别人而活。我发现——奴才。&lt;/p&gt;

&lt;p&gt;在校招时，同学们大排长龙，争相恐后，卖身给大私企，大国企，大央企。他们的态度是。。。积极向上。大城市里工作不单提供温饱，还可以满足同学们对户口，对象， 孩子教育， 买房，买车等高层次的理想。为了理想， 可以不恋爱，不结婚， 或者是不恋爱，只结婚。在这些全国顶尖的高校里，我发现——人才。&lt;/p&gt;

&lt;p&gt;为了避免和人才们卷，我发誓，我逃离他们喜欢的城市，避开他们喜欢的企业，只追他们不喜欢的女人。&lt;/p&gt;

&lt;p&gt;话说回来，任何一家公司想成功，只有奴才，没人才，註定要失敗。
我的组长，北大博士，在六十秒， 不是六十天内把握合作方的痛点和新功能的要点
并他指导我们他现有的成果。他用高效的管理，就是没有管我们怎样解决问题。
当问题解决后，他把自己的成果忘了，只记得别人的成果。有些人拿了别人的成果，来成就自己， 有些人忘了自己的成果，来成就别人。他们的态度是。。。。寻找共赢。我发现——奇才。奇才们容易被人嫉妒，不被喜欢。如果你们身边有女奇才，欢迎介绍给我。&lt;/p&gt;

&lt;p&gt;讲过同学们，同事们，同龄人，现在轮到自己。&lt;/p&gt;

&lt;p&gt;大家对没工作，就没钱，而焦虑，
我是对没工作，没机会被剥削，而不甘心。
找不找到工作固然跟个人有关，但是跟经济周期，大环境，宏观经济关系更密切。宏观经济听起来很虚，就像男朋友说我爱你。宏观经济容易被误解，就像那一刻心动，只是情绪的波动。但是宏观经济是真实的，就像分手后只能把心痛当拥有。&lt;/p&gt;

&lt;p&gt;将宏观经济比如为风的雷军说：在风口上，猪也能飞起来。有些人是先知先觉， 差一点的是后知后觉，我呢？ 。。。是不知不觉。虽为庸才，我是屡败屡试。 因此，找工作，不困惑，懂上落，有着落。&lt;/p&gt;

&lt;p&gt;总的来说, 一个人做人做事的态度，决定他一生的高度。人才，奇才，庸才，奴才都是选择。&lt;/p&gt;

&lt;h1 id=&quot;previous-drafts&quot;&gt;Previous Drafts&lt;/h1&gt;

&lt;p&gt;《三才》&lt;/p&gt;

&lt;p&gt;各位来宾，参赛者，评委，大家好，&lt;/p&gt;

&lt;p&gt;我喜欢看书，我今天带好多书来，但是我一本都没有看过。 因为读万卷书，不如行，万里路，今天我和大家分享我在我的人生路上见过的三种人。&lt;/p&gt;

&lt;p&gt;我在一家北京初创公司里当一名程序员。因为它刚刚融资不久，所以拼命地扩张。 那是18年，我经历我人生的第一次， 不是你们想象的那种。第一次体验北飘，第一次走进故宫，第一次爬长城，第一次见到满条大街的国企和央企。&lt;/p&gt;

&lt;p&gt;公司需要招聘应届毕业生，所以我被安排去学校帮忙面试他们。学校里人山人海，大家都忙着找工作和出路，但是我们的摊位门可罗雀， 没有学生来投简历。我很困惑。所以我出去看了一下。原来大家大排张龙去在忙着投大私企，大国企，大央企。 工作不仅是为了温饱，温是维持供暖，饱是要吃花卷。 除了温饱以外，北京的工作还可以满足同学们户口，对象， 孩子教育， 买房等高层次的理想。在这些全国顶尖的高校里，我发现——人才。只有人才能卷起来。&lt;/p&gt;

&lt;p&gt;如果一家初创公司要成功的话，只有人力，没人才是不行的。我的组长是很有能力。比如说，当时我们组要帮合作方添加一个新的软件功能，因为软件做不到他们需要的结果， 他能在短时间内把握合作方的痛点和新功能的要点，并把他现有的成果指导我们，同时他明白这些对解决问题没有直接帮助，他用高效的管理，就是没有管我们怎样解决问题。当我解决问题后找他时，他说你写的这个新功能挺好，我回答说这是在你原有的成果上添加， 他说我都忘了， 他很会表扬人。尽管他读了很多书，又是北大博士，书没有让他成为书呆子，失去处理问题的能力。我发现——奇才，只有奇才能避免读死书。&lt;/p&gt;

&lt;p&gt;讲过同学们，讲过我的同事，是时候轮到自己。&lt;/p&gt;

&lt;p&gt;我一直以来有一种找不到工作的焦虑， 一种没有机会被剥削的不甘心。那时候我在国外念书，我在学校的兼职，暑期工都是打杂，没有一份正式的工作。每当公司招聘应届毕业生和实习生时，我都写求职信，投简历， 甚至连一些我觉得可能性不大的公司我也尝试。同时，我也参加跟我专业相关的社交活动。结果都是渺无音讯。。。。 一直等到我正式成为全职打工人之后，站在求职者的对面，我才明白个中的道理。找不找到工作固然跟个人有关，但是跟经济周期，地区和行业关系更密切。有些人是先知先觉， 比如雷军说的在风口上，猪也能飞起来，差一点的是后知后觉，我呢？ 。。。是不知不觉。过来大半生，等到猪飞起来时我拉一把后，我现在才明白这个道理——找工作，不困惑，看上落，有着落。我发现——庸才， 只有庸才会缘木求鱼&lt;/p&gt;

&lt;p&gt;三种人，三种才，三种迥然不同的人生。愿大家笑口常开，笑世间可笑之人。
谢谢&lt;/p&gt;

&lt;h1 id=&quot;2nd-draft-based-on-friends-feedback&quot;&gt;2nd draft based on friend’s feedback&lt;/h1&gt;

&lt;p&gt;《三才》&lt;/p&gt;

&lt;p&gt;各位来宾，参赛者，评委，大家好，&lt;/p&gt;

&lt;p&gt;古语说读万卷书，不如行万里路。今天我和大家分享我在我的人生路上见过的三种人。&lt;/p&gt;

&lt;p&gt;我在一家北京初创公司里当一名程序员。因为它刚刚融资不久，所以拼命地扩张。 那是18年，我经历我人生的第一次， 不是你们想象的那种。第一次体验北飘，第一次走进故宫，第一次爬长城&lt;/p&gt;

&lt;p&gt;公司需要招聘应届毕业生，所以我被安排去学校帮忙面试他们。学校里人山人海，大家都忙着找工作和出路，但是我们的摊位门可罗雀， 没有学生来投简历。我很困惑。原来同学们大排长龙在忙着投大私企，大国企，大央企。 工作不仅是为了温饱。除了温饱以外，北京的工作还可以满足同学们户口，对象， 孩子教育， 买房等高层次的理想。说到理想，我们介绍自己时从来不说，只说工作，单位。因为工作就是理想。在这些全国顶尖的高校里，我发现——人才。为了避免和人才们卷，我发誓，我离开他们喜欢的城市，避开他们喜欢的企业，只追他们不喜欢的女人。&lt;/p&gt;

&lt;p&gt;如果一家初创公司要成功，只有人力，没人才是不行的。比如说，当时我们组的合作方一个新的软件功能，我们的组长，北大博士，能在短时间内把握合作方的痛点和新功能的要点，这是六十秒和六十天的差别啊，并他指导我们他现有的成果。他用高效的管理，就是没有管我们怎样解决问题。当我解决问题后找他时，他说你写的这个新功能挺好，我回答说这是在你原有的成果上添加， 他说我都忘记了。忘记了。有些人拿了别人的成果，成就自己， 有些人忘了自己的成果，来成就别人。我发现——奇才。奇才们容易被人嫉妒，不被喜欢。如果你们身边有女奇才，欢迎介绍给我。&lt;/p&gt;

&lt;p&gt;讲过同学们，讲过同事们，是时候轮到自己。&lt;/p&gt;

&lt;p&gt;我一直以来有一种找不到工作的焦虑， 一种没有机会被剥削的不甘心。那时候我在国外念书，我在学校的兼职，暑期工都是打杂，没有一份正式的工作。每当公司招聘应届毕业生和实习生时，我都写求职信，投简历，参加跟我专业相关的社交活动。结果都是渺无音讯。。。。 一直等到我正式成为全职打工人之后，站在求职者的对面，我明白了。找不找到工作固然跟个人有关，但是跟经济周期，地区和行业关系更密切。有些人是先知先觉， 比如雷军说的在风口上，猪也能飞起来，差一点的是后知后觉，我呢？ 。。。是不知不觉。等到猪飞起来时我拉一把后，我现在才明白这个道理——找工作，不困惑，看上落，有着落。我发现——庸才。庸才爱缘木求鱼&lt;/p&gt;

&lt;p&gt;见三才，逛北京，寻自己，我做了，你呢？&lt;/p&gt;

&lt;p&gt;谢谢&lt;/p&gt;

&lt;h1 id=&quot;3rd-draft&quot;&gt;3rd draft&lt;/h1&gt;

&lt;p&gt;《我身边的人》&lt;/p&gt;

&lt;p&gt;各位来宾，参赛者，评委，大家好，&lt;/p&gt;

&lt;p&gt;古语说读万卷书，不如行万里路。今天我和大家分享我身边的三种人。&lt;/p&gt;

&lt;p&gt;公司需要招聘应届毕业生，所以我被安排去学校帮忙面试他们。学校里人山人海，大家都忙着找工作和出路，但是我们的摊位门可罗雀， 没有学生来投简历。我很困惑。原来同学们大排长龙在卖身给大私企，大国企，大央企。 工作不仅是为了温饱。除了温饱以外，北京的工作还可以满足同学们户口，对象， 孩子教育， 买房等高层次的理想。说到理想，我们介绍自己时从来不说，只说工作，单位。因为工作就是理想。在这些全国顶尖的高校里，我发现——人才。为了避免和人才们卷，我发誓，我离开他们喜欢的城市，避开他们喜欢的企业，只追他们不喜欢的女人。&lt;/p&gt;

&lt;p&gt;如果一家初创公司要成功，只有人力，没人才是不行的。比如说，当时我们组的合作方想要一个新的软件功能，我们的组长，北大博士，能在短时间内把握合作方的痛点和新功能的要点，这是六十秒和六十天的差别啊，并他指导我们他现有的成果。他用高效的管理，就是没有管我们怎样解决问题。当我解决问题后找他时，他说你写的这个新功能挺好，我回答说这是在你原有的成果上添加， 他说我都忘记了。忘记了。有些人拿了别人的成果，成就自己， 有些人忘了自己的成果，来成就别人。我发现——奇才。奇才们容易被人嫉妒，不被喜欢。如果你们身边有女奇才，欢迎介绍给我。&lt;/p&gt;

&lt;p&gt;我一直以来有一种找不到工作的焦虑， 一种没有机会被剥削的不甘心。一直都是兼职和打杂，没有一份正式的工作。每当公司招聘应届毕业生和实习生时，我都写求职信，投简历，参加跟我专业相关的社交活动。结果都是渺无音讯。。。。 一直等到我正式成为全职打工人之后，站在求职者的对面，我明白了。找不找到工作固然跟个人有关，但是跟经济周期，地区和行业关系更密切。有些人是先知先觉， 比如雷军说的在风口上，猪也能飞起来，差一点的是后知后觉，我呢？ 。。。是不知不觉。等到猪飞起来时我拉一把后，我现在才明白这个道理——找工作，不困惑，看上落，有着落。
庸才。庸才爱缘木求鱼&lt;/p&gt;

&lt;p&gt;讲过同学们，同事们，自己，最后讲同龄人。&lt;/p&gt;

&lt;p&gt;我身边的朋友都热爱工作，对生活充满热情，把生命浪费？在梦想上。？ 这是笑话&lt;/p&gt;

&lt;p&gt;他们装着用心地卖力地工作， 他们的老板装着大方给工资，摸鱼骗都一点点的工资
王小波？？？？？ 爱你就想爱生命。。。。。这是笑话&lt;/p&gt;

&lt;p&gt;我身边的朋友都。。。。。。和一个不爱的人，守着一段不完整的婚姻，
伟大的朋友们为别人而活。我发现——奴才。 。&lt;/p&gt;

&lt;p&gt;无论你是人才，奇才，庸才，还是奴才，希望大家活得精彩，缤纷多彩。谢谢&lt;/p&gt;

&lt;p&gt;《你，我，他》&lt;/p&gt;

&lt;p&gt;各位来宾，参赛者，评委，大家好，&lt;/p&gt;

&lt;p&gt;古语说读万卷书，不如行万里路。今天我和大家分享我身边4 种人： 人才，奇才，庸才，奴才&lt;/p&gt;

&lt;p&gt;公司需要招聘应届毕业生，所以我被安排去学校帮忙面试他们。学校里人山人海，大家都忙着找工作和出路，但是我们的摊位门可罗雀， 没有学生来投简历。我很困惑。原来同学们大排长龙在忙着投大私企，大国企，大央企。 工作不仅是为了温饱。除了温饱以外，北京的工作还可以满足同学们户口，对象， 孩子教育， 买房等高层次的理想。说到理想，我们介绍自己时从来不说，只说工作，单位。因为工作就是理想， 为了理想， 不恋爱，不结婚， 或者是不恋爱，只结婚。在这些全国顶尖的高校里，我发现——人才。为了避免和人才们卷，我发誓，我离开他们喜欢的城市，避开他们喜欢的企业，只追他们不喜欢的女人。&lt;/p&gt;

&lt;p&gt;如果一家初创公司要成功，只有人力，没人才是不行的。比如说，当时我们组的合作方想要一个新的软件功能，我们的组长，北大博士，能在短时间内把握合作方的痛点和新功能的要点，这是六十秒和六十天的差别啊，并他指导我们他现有的成果。他用高效的管理，就是没有管我们怎样解决问题。当我解决问题后找他时，他说你写的这个新功能挺好，我回答说这是在你原有的成果上添加， 他说我都忘记了。忘记了。有些人拿了别人的成果，成就自己， 有些人忘了自己的成果，来成就别人。我发现——奇才。奇才们容易被人嫉妒，不被喜欢。如果你们身边有女奇才，欢迎介绍给我。&lt;/p&gt;

&lt;p&gt;我一直以来有一种找不到工作的焦虑， 一种没有机会被剥削的不甘心。一直都是兼职和打杂，没有一份正式的工作。每当公司招聘应届毕业生和实习生时，我都写求职信，投简历，参加跟我专业相关的社交活动。结果都是渺无音讯。。。。 一直等到我正式成为全职打工人之后，站在求职者的对面，我明白了。找不找到工作固然跟个人有关，但是跟经济周期，地区和行业关系更密切。有些人是先知先觉， 比如雷军说的在风口上，猪也能飞起来，差一点的是后知后觉，我呢？ 。。。是不知不觉。等到猪飞起来时我拉一把后，我现在才明白这个道理——找工作，不困惑，看上落，有着落。&lt;/p&gt;

&lt;p&gt;讲过同学们，同事们，自己，最后讲同龄人。他们装着用心地卖力， 他们的老板装着大方给工资，摸鱼骗都一点点的工资，重复地做无聊的事情，可以和一个不爱的人，守着一段不完整的婚姻，逃避深度思考，喜欢故步自封，听自己想听的话。 我发现——奴才。 伟大的奴才为别人而活。&lt;/p&gt;

&lt;p&gt;无论你是人才，奇才，还是奴才，希望大家活得精彩。谢谢
《都是选择》&lt;/p&gt;

&lt;p&gt;各位来宾，参赛者，评委，大家好，&lt;/p&gt;

&lt;p&gt;古语说读万卷书，不如行万里路。今天我和大家分享我身边4 种人： 人才，奇才，庸才，奴才&lt;/p&gt;

&lt;p&gt;公司需要招聘应届毕业生，所以我被安排去学校帮忙面试他们。学校里人山人海，大家都忙着找工作和出路，但是我们的摊位门可罗雀， 没有学生来投简历。我很困惑。原来同学们大排长龙在忙着投大私企，大国企，大央企。 工作不仅是为了温饱。除了温饱以外，北京的工作还可以满足同学们户口，对象， 孩子教育， 买房等高层次的理想。说到理想，我们介绍自己时从来不说，只说工作，单位。因为工作就是理想， 为了理想， 不恋爱，不结婚， 或者是不恋爱，只结婚。在这些全国顶尖的高校里，我发现——人才。为了避免和人才们卷，我发誓，我离开他们喜欢的城市，避开他们喜欢的企业，只追他们不喜欢的女人。&lt;/p&gt;

&lt;p&gt;如果一家初创公司要成功，只有人力，没人才是不行的。比如说，当时我们组的合作方想要一个新的软件功能，我们的组长，北大博士，能在短时间内把握合作方的痛点和新功能的要点，这是六十秒和六十天的差别啊，并他指导我们他现有的成果。他用高效的管理，就是没有管我们怎样解决问题。当我解决问题后找他时，他说你写的这个新功能挺好，我回答说这是在你原有的成果上添加， 他说我都忘记了。忘记了。有些人拿了别人的成果，成就自己， 有些人忘了自己的成果，来成就别人。我发现——奇才。奇才们容易被人嫉妒，不被喜欢。如果你们身边有女奇才，欢迎介绍给我。&lt;/p&gt;

&lt;p&gt;我一直以来有一种找不到工作的焦虑， 一种没有机会被剥削的不甘心。一直都是兼职和打杂，没有一份正式的工作。每当公司招聘应届毕业生和实习生时，我都写求职信，投简历，参加跟我专业相关的社交活动。结果都是渺无音讯。。。。 一直等到我正式成为全职打工人之后，站在求职者的对面，我明白了。找不找到工作固然跟个人有关，但是跟经济周期，地区和行业关系更密切。有些人是先知先觉， 比如雷军说的在风口上，猪也能飞起来，差一点的是后知后觉，我呢？ 。。。是不知不觉。等到猪飞起来时我拉一把后，我现在才明白这个道理——找工作，不困惑，看上落，有着落。&lt;/p&gt;

&lt;p&gt;讲过同学们，同事们，自己，最后讲同龄人。他们装着用心地卖力， 他们的老板装着大方给工资，摸鱼骗都一点点的工资，重复地做无聊的事情，可以和一个不爱的人，守着一段不完整的婚姻，逃避深度思考，喜欢故步自封，听自己想听的话。 我发现——奴才。 伟大的奴才为别人而活。&lt;/p&gt;

&lt;p&gt;无论你是人才，奇才，还是奴才，希望大家活得精彩。谢谢&lt;/p&gt;</content><author><name>Wilson Fok</name></author><category term="Toastmasters" /><summary type="html">Title: 都是选择 各位来宾，参赛者，评委，大家好， 请大家举手，我接下来我会描述我身边的朋友，如果你也有这样的朋友，请继续举手，否则把手放下。 我身边的朋友都热爱工作， 在岗位上，全心投入，充满热情。回家后，和深爱着他们的灵魂伴侣，爱她就像爱自己一样, 看不一样的夜空。 我当然没有，我在说笑话。。。 现实是，他们越装着卖力地工作， 老板们越装着大方地给工资，摸鱼只骗到一点点钱。回家后，和一个不爱的人，守着一段不完整的婚姻。他们的态度是。。。。消极地为别人而活。我发现——奴才。 在校招时，同学们大排长龙，争相恐后，卖身给大私企，大国企，大央企。他们的态度是。。。积极向上。大城市里工作不单提供温饱，还可以满足同学们对户口，对象， 孩子教育， 买房，买车等高层次的理想。为了理想， 可以不恋爱，不结婚， 或者是不恋爱，只结婚。在这些全国顶尖的高校里，我发现——人才。 为了避免和人才们卷，我发誓，我逃离他们喜欢的城市，避开他们喜欢的企业，只追他们不喜欢的女人。 话说回来，任何一家公司想成功，只有奴才，没人才，註定要失敗。 我的组长，北大博士，在六十秒， 不是六十天内把握合作方的痛点和新功能的要点 并他指导我们他现有的成果。他用高效的管理，就是没有管我们怎样解决问题。 当问题解决后，他把自己的成果忘了，只记得别人的成果。有些人拿了别人的成果，来成就自己， 有些人忘了自己的成果，来成就别人。他们的态度是。。。。寻找共赢。我发现——奇才。奇才们容易被人嫉妒，不被喜欢。如果你们身边有女奇才，欢迎介绍给我。 讲过同学们，同事们，同龄人，现在轮到自己。 大家对没工作，就没钱，而焦虑， 我是对没工作，没机会被剥削，而不甘心。 找不找到工作固然跟个人有关，但是跟经济周期，大环境，宏观经济关系更密切。宏观经济听起来很虚，就像男朋友说我爱你。宏观经济容易被误解，就像那一刻心动，只是情绪的波动。但是宏观经济是真实的，就像分手后只能把心痛当拥有。 将宏观经济比如为风的雷军说：在风口上，猪也能飞起来。有些人是先知先觉， 差一点的是后知后觉，我呢？ 。。。是不知不觉。虽为庸才，我是屡败屡试。 因此，找工作，不困惑，懂上落，有着落。 总的来说, 一个人做人做事的态度，决定他一生的高度。人才，奇才，庸才，奴才都是选择。 Previous Drafts 《三才》 各位来宾，参赛者，评委，大家好， 我喜欢看书，我今天带好多书来，但是我一本都没有看过。 因为读万卷书，不如行，万里路，今天我和大家分享我在我的人生路上见过的三种人。 我在一家北京初创公司里当一名程序员。因为它刚刚融资不久，所以拼命地扩张。 那是18年，我经历我人生的第一次， 不是你们想象的那种。第一次体验北飘，第一次走进故宫，第一次爬长城，第一次见到满条大街的国企和央企。 公司需要招聘应届毕业生，所以我被安排去学校帮忙面试他们。学校里人山人海，大家都忙着找工作和出路，但是我们的摊位门可罗雀， 没有学生来投简历。我很困惑。所以我出去看了一下。原来大家大排张龙去在忙着投大私企，大国企，大央企。 工作不仅是为了温饱，温是维持供暖，饱是要吃花卷。 除了温饱以外，北京的工作还可以满足同学们户口，对象， 孩子教育， 买房等高层次的理想。在这些全国顶尖的高校里，我发现——人才。只有人才能卷起来。 如果一家初创公司要成功的话，只有人力，没人才是不行的。我的组长是很有能力。比如说，当时我们组要帮合作方添加一个新的软件功能，因为软件做不到他们需要的结果， 他能在短时间内把握合作方的痛点和新功能的要点，并把他现有的成果指导我们，同时他明白这些对解决问题没有直接帮助，他用高效的管理，就是没有管我们怎样解决问题。当我解决问题后找他时，他说你写的这个新功能挺好，我回答说这是在你原有的成果上添加， 他说我都忘了， 他很会表扬人。尽管他读了很多书，又是北大博士，书没有让他成为书呆子，失去处理问题的能力。我发现——奇才，只有奇才能避免读死书。 讲过同学们，讲过我的同事，是时候轮到自己。 我一直以来有一种找不到工作的焦虑， 一种没有机会被剥削的不甘心。那时候我在国外念书，我在学校的兼职，暑期工都是打杂，没有一份正式的工作。每当公司招聘应届毕业生和实习生时，我都写求职信，投简历， 甚至连一些我觉得可能性不大的公司我也尝试。同时，我也参加跟我专业相关的社交活动。结果都是渺无音讯。。。。 一直等到我正式成为全职打工人之后，站在求职者的对面，我才明白个中的道理。找不找到工作固然跟个人有关，但是跟经济周期，地区和行业关系更密切。有些人是先知先觉， 比如雷军说的在风口上，猪也能飞起来，差一点的是后知后觉，我呢？ 。。。是不知不觉。过来大半生，等到猪飞起来时我拉一把后，我现在才明白这个道理——找工作，不困惑，看上落，有着落。我发现——庸才， 只有庸才会缘木求鱼 三种人，三种才，三种迥然不同的人生。愿大家笑口常开，笑世间可笑之人。 谢谢 2nd draft based on friend’s feedback 《三才》 各位来宾，参赛者，评委，大家好， 古语说读万卷书，不如行万里路。今天我和大家分享我在我的人生路上见过的三种人。 我在一家北京初创公司里当一名程序员。因为它刚刚融资不久，所以拼命地扩张。 那是18年，我经历我人生的第一次， 不是你们想象的那种。第一次体验北飘，第一次走进故宫，第一次爬长城 公司需要招聘应届毕业生，所以我被安排去学校帮忙面试他们。学校里人山人海，大家都忙着找工作和出路，但是我们的摊位门可罗雀， 没有学生来投简历。我很困惑。原来同学们大排长龙在忙着投大私企，大国企，大央企。 工作不仅是为了温饱。除了温饱以外，北京的工作还可以满足同学们户口，对象， 孩子教育， 买房等高层次的理想。说到理想，我们介绍自己时从来不说，只说工作，单位。因为工作就是理想。在这些全国顶尖的高校里，我发现——人才。为了避免和人才们卷，我发誓，我离开他们喜欢的城市，避开他们喜欢的企业，只追他们不喜欢的女人。 如果一家初创公司要成功，只有人力，没人才是不行的。比如说，当时我们组的合作方一个新的软件功能，我们的组长，北大博士，能在短时间内把握合作方的痛点和新功能的要点，这是六十秒和六十天的差别啊，并他指导我们他现有的成果。他用高效的管理，就是没有管我们怎样解决问题。当我解决问题后找他时，他说你写的这个新功能挺好，我回答说这是在你原有的成果上添加， 他说我都忘记了。忘记了。有些人拿了别人的成果，成就自己， 有些人忘了自己的成果，来成就别人。我发现——奇才。奇才们容易被人嫉妒，不被喜欢。如果你们身边有女奇才，欢迎介绍给我。 讲过同学们，讲过同事们，是时候轮到自己。 我一直以来有一种找不到工作的焦虑， 一种没有机会被剥削的不甘心。那时候我在国外念书，我在学校的兼职，暑期工都是打杂，没有一份正式的工作。每当公司招聘应届毕业生和实习生时，我都写求职信，投简历，参加跟我专业相关的社交活动。结果都是渺无音讯。。。。 一直等到我正式成为全职打工人之后，站在求职者的对面，我明白了。找不找到工作固然跟个人有关，但是跟经济周期，地区和行业关系更密切。有些人是先知先觉， 比如雷军说的在风口上，猪也能飞起来，差一点的是后知后觉，我呢？ 。。。是不知不觉。等到猪飞起来时我拉一把后，我现在才明白这个道理——找工作，不困惑，看上落，有着落。我发现——庸才。庸才爱缘木求鱼 见三才，逛北京，寻自己，我做了，你呢？ 谢谢 3rd draft 《我身边的人》 各位来宾，参赛者，评委，大家好， 古语说读万卷书，不如行万里路。今天我和大家分享我身边的三种人。 公司需要招聘应届毕业生，所以我被安排去学校帮忙面试他们。学校里人山人海，大家都忙着找工作和出路，但是我们的摊位门可罗雀， 没有学生来投简历。我很困惑。原来同学们大排长龙在卖身给大私企，大国企，大央企。 工作不仅是为了温饱。除了温饱以外，北京的工作还可以满足同学们户口，对象， 孩子教育， 买房等高层次的理想。说到理想，我们介绍自己时从来不说，只说工作，单位。因为工作就是理想。在这些全国顶尖的高校里，我发现——人才。为了避免和人才们卷，我发誓，我离开他们喜欢的城市，避开他们喜欢的企业，只追他们不喜欢的女人。 如果一家初创公司要成功，只有人力，没人才是不行的。比如说，当时我们组的合作方想要一个新的软件功能，我们的组长，北大博士，能在短时间内把握合作方的痛点和新功能的要点，这是六十秒和六十天的差别啊，并他指导我们他现有的成果。他用高效的管理，就是没有管我们怎样解决问题。当我解决问题后找他时，他说你写的这个新功能挺好，我回答说这是在你原有的成果上添加， 他说我都忘记了。忘记了。有些人拿了别人的成果，成就自己， 有些人忘了自己的成果，来成就别人。我发现——奇才。奇才们容易被人嫉妒，不被喜欢。如果你们身边有女奇才，欢迎介绍给我。 我一直以来有一种找不到工作的焦虑， 一种没有机会被剥削的不甘心。一直都是兼职和打杂，没有一份正式的工作。每当公司招聘应届毕业生和实习生时，我都写求职信，投简历，参加跟我专业相关的社交活动。结果都是渺无音讯。。。。 一直等到我正式成为全职打工人之后，站在求职者的对面，我明白了。找不找到工作固然跟个人有关，但是跟经济周期，地区和行业关系更密切。有些人是先知先觉， 比如雷军说的在风口上，猪也能飞起来，差一点的是后知后觉，我呢？ 。。。是不知不觉。等到猪飞起来时我拉一把后，我现在才明白这个道理——找工作，不困惑，看上落，有着落。 庸才。庸才爱缘木求鱼 讲过同学们，同事们，自己，最后讲同龄人。 我身边的朋友都热爱工作，对生活充满热情，把生命浪费？在梦想上。？ 这是笑话 他们装着用心地卖力地工作， 他们的老板装着大方给工资，摸鱼骗都一点点的工资 王小波？？？？？ 爱你就想爱生命。。。。。这是笑话 我身边的朋友都。。。。。。和一个不爱的人，守着一段不完整的婚姻， 伟大的朋友们为别人而活。我发现——奴才。 。 无论你是人才，奇才，庸才，还是奴才，希望大家活得精彩，缤纷多彩。谢谢 《你，我，他》 各位来宾，参赛者，评委，大家好， 古语说读万卷书，不如行万里路。今天我和大家分享我身边4 种人： 人才，奇才，庸才，奴才 公司需要招聘应届毕业生，所以我被安排去学校帮忙面试他们。学校里人山人海，大家都忙着找工作和出路，但是我们的摊位门可罗雀， 没有学生来投简历。我很困惑。原来同学们大排长龙在忙着投大私企，大国企，大央企。 工作不仅是为了温饱。除了温饱以外，北京的工作还可以满足同学们户口，对象， 孩子教育， 买房等高层次的理想。说到理想，我们介绍自己时从来不说，只说工作，单位。因为工作就是理想， 为了理想， 不恋爱，不结婚， 或者是不恋爱，只结婚。在这些全国顶尖的高校里，我发现——人才。为了避免和人才们卷，我发誓，我离开他们喜欢的城市，避开他们喜欢的企业，只追他们不喜欢的女人。 如果一家初创公司要成功，只有人力，没人才是不行的。比如说，当时我们组的合作方想要一个新的软件功能，我们的组长，北大博士，能在短时间内把握合作方的痛点和新功能的要点，这是六十秒和六十天的差别啊，并他指导我们他现有的成果。他用高效的管理，就是没有管我们怎样解决问题。当我解决问题后找他时，他说你写的这个新功能挺好，我回答说这是在你原有的成果上添加， 他说我都忘记了。忘记了。有些人拿了别人的成果，成就自己， 有些人忘了自己的成果，来成就别人。我发现——奇才。奇才们容易被人嫉妒，不被喜欢。如果你们身边有女奇才，欢迎介绍给我。 我一直以来有一种找不到工作的焦虑， 一种没有机会被剥削的不甘心。一直都是兼职和打杂，没有一份正式的工作。每当公司招聘应届毕业生和实习生时，我都写求职信，投简历，参加跟我专业相关的社交活动。结果都是渺无音讯。。。。 一直等到我正式成为全职打工人之后，站在求职者的对面，我明白了。找不找到工作固然跟个人有关，但是跟经济周期，地区和行业关系更密切。有些人是先知先觉， 比如雷军说的在风口上，猪也能飞起来，差一点的是后知后觉，我呢？ 。。。是不知不觉。等到猪飞起来时我拉一把后，我现在才明白这个道理——找工作，不困惑，看上落，有着落。 讲过同学们，同事们，自己，最后讲同龄人。他们装着用心地卖力， 他们的老板装着大方给工资，摸鱼骗都一点点的工资，重复地做无聊的事情，可以和一个不爱的人，守着一段不完整的婚姻，逃避深度思考，喜欢故步自封，听自己想听的话。 我发现——奴才。 伟大的奴才为别人而活。 无论你是人才，奇才，还是奴才，希望大家活得精彩。谢谢 《都是选择》 各位来宾，参赛者，评委，大家好， 古语说读万卷书，不如行万里路。今天我和大家分享我身边4 种人： 人才，奇才，庸才，奴才 公司需要招聘应届毕业生，所以我被安排去学校帮忙面试他们。学校里人山人海，大家都忙着找工作和出路，但是我们的摊位门可罗雀， 没有学生来投简历。我很困惑。原来同学们大排长龙在忙着投大私企，大国企，大央企。 工作不仅是为了温饱。除了温饱以外，北京的工作还可以满足同学们户口，对象， 孩子教育， 买房等高层次的理想。说到理想，我们介绍自己时从来不说，只说工作，单位。因为工作就是理想， 为了理想， 不恋爱，不结婚， 或者是不恋爱，只结婚。在这些全国顶尖的高校里，我发现——人才。为了避免和人才们卷，我发誓，我离开他们喜欢的城市，避开他们喜欢的企业，只追他们不喜欢的女人。 如果一家初创公司要成功，只有人力，没人才是不行的。比如说，当时我们组的合作方想要一个新的软件功能，我们的组长，北大博士，能在短时间内把握合作方的痛点和新功能的要点，这是六十秒和六十天的差别啊，并他指导我们他现有的成果。他用高效的管理，就是没有管我们怎样解决问题。当我解决问题后找他时，他说你写的这个新功能挺好，我回答说这是在你原有的成果上添加， 他说我都忘记了。忘记了。有些人拿了别人的成果，成就自己， 有些人忘了自己的成果，来成就别人。我发现——奇才。奇才们容易被人嫉妒，不被喜欢。如果你们身边有女奇才，欢迎介绍给我。 我一直以来有一种找不到工作的焦虑， 一种没有机会被剥削的不甘心。一直都是兼职和打杂，没有一份正式的工作。每当公司招聘应届毕业生和实习生时，我都写求职信，投简历，参加跟我专业相关的社交活动。结果都是渺无音讯。。。。 一直等到我正式成为全职打工人之后，站在求职者的对面，我明白了。找不找到工作固然跟个人有关，但是跟经济周期，地区和行业关系更密切。有些人是先知先觉， 比如雷军说的在风口上，猪也能飞起来，差一点的是后知后觉，我呢？ 。。。是不知不觉。等到猪飞起来时我拉一把后，我现在才明白这个道理——找工作，不困惑，看上落，有着落。 讲过同学们，同事们，自己，最后讲同龄人。他们装着用心地卖力， 他们的老板装着大方给工资，摸鱼骗都一点点的工资，重复地做无聊的事情，可以和一个不爱的人，守着一段不完整的婚姻，逃避深度思考，喜欢故步自封，听自己想听的话。 我发现——奴才。 伟大的奴才为别人而活。 无论你是人才，奇才，还是奴才，希望大家活得精彩。谢谢</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/toastmasters/cover.jpg" /><media:content medium="image" url="/assets/images/toastmasters/cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Level One Completion</title><link href="/toastmasters/2024/11/26/levelone/" rel="alternate" type="text/html" title="Level One Completion" /><published>2024-11-26T00:00:00+08:00</published><updated>2024-11-26T00:00:00+08:00</updated><id>/toastmasters/2024/11/26/levelone</id><content type="html" xml:base="/toastmasters/2024/11/26/levelone/">&lt;h1 id=&quot;level-one-completion&quot;&gt;Level One Completion&lt;/h1&gt;
&lt;p&gt;I must congratulate myself for completing Level 1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/toastmasters/certificateL1.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;</content><author><name>Wilson Fok</name></author><category term="Toastmasters" /><summary type="html">Level One Completion I must congratulate myself for completing Level 1.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/toastmasters/cover.jpg" /><media:content medium="image" url="/assets/images/toastmasters/cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Pace of Life</title><link href="/toastmasters/2024/11/25/feedback_NZ/" rel="alternate" type="text/html" title="The Pace of Life" /><published>2024-11-25T00:00:00+08:00</published><updated>2024-11-25T00:00:00+08:00</updated><id>/toastmasters/2024/11/25/feedback_NZ</id><content type="html" xml:base="/toastmasters/2024/11/25/feedback_NZ/">&lt;h1 id=&quot;1st-speech&quot;&gt;1st Speech&lt;/h1&gt;
&lt;h1 id=&quot;title-the-pace-of-life&quot;&gt;Title: The Pace of Life&lt;/h1&gt;

&lt;p&gt;Hello Toastmasters and guests,&lt;/p&gt;

&lt;p&gt;It is my great honor to deliver a speech during the national holidays, especially with the weather being such a boon for outdoor leisure activities.&lt;/p&gt;

&lt;p&gt;Has anyone here traveled to New Zealand for work, study, or vacation?
Have you watched The Lord of the Rings trilogy?
The movies were filmed in New Zealand by Peter Jackson, a renowned director from there.&lt;/p&gt;

&lt;p&gt;For those of you who have watched the films may have notice that New Zealand offers spectacular scenery. To know why, let me explain the geologic history of New Zealand.&lt;/p&gt;

&lt;p&gt;Location&lt;/p&gt;

&lt;p&gt;New Zealand is an island country situated in the southwestern Pacific Ocean and consists of two main islands: the North Island and the South Island. Located at the fringes of the Pacific and Indian-Australian tectonic plates, New Zealand has undergone a painful birth,&lt;/p&gt;

&lt;p&gt;In the North, the Pacific Plate is forced beneath the Indian-Australian Plate, while in the South, the Pacific Plate rubs against the Indian-Australian Plate and forces it downward. As part of the Ring of Fire that runs through Indonesia, the Philippines, and Japan in Asia, New Zealand experiences frequent geological activities, such as volcanic eruptions and earthquakes.&lt;/p&gt;

&lt;p&gt;Over time, the land has been pushed upward to form mountain ranges, and water has been trapped as snow on its summits. Today, we see the Southern Alps, which stretch over 500 kilometers with 18 peaks like a backbone across the South Island. The highest, Mount Cook, stands at 3,724 meters with snow on its summit. Lake Taupo, the largest freshwater lake in New Zealand, is about the same size as Singapore and was formed after a massive volcanic eruption.  Gradually, it has collected water to fill itself to the fullest. Nature crafts the spectacular landscapes at its own pace.&lt;/p&gt;

&lt;p&gt;My Travel Experience&lt;/p&gt;

&lt;p&gt;New Zealand is a paradise for those who love nature and the outdoors. I’d like to share some of my travel experiences there, which were incredibly relaxing and slow-paced.&lt;/p&gt;

&lt;p&gt;My first stop was at a national park. The park offers many trails, each showcasing different landscapes and plant life. Completing just one trail took me 8 hours. Despite the large number of tourists, the park was so vast that it never felt crowded. Some visitors moved quickly, seeking off-track adventures, while others took their time, savoring the scenery, especially the colorful lakes. Everyone moved at their own pace, according to their abilities and goals. Just being there in that moment was enough to qualify me as a tourist and check it off my to-do list.&lt;/p&gt;

&lt;p&gt;Next, I visited the coastline. New Zealand has more than 700 small islands, and this particular one is home to a variety of wildlife and beautiful beaches. I strolled from one beach to the next, enjoying the ocean views and sea breezes. Some beaches in New Zealand are great for surfing while others are covered with black sand formed by volcanic rocks. Along the shore, I spotted wild elephant seals basking in the sun, lying flat, and hanging out together.&lt;/p&gt;

&lt;p&gt;The Pace of Life&lt;/p&gt;

&lt;p&gt;New Zealand offers us a chance to enjoy the natural beauty of the earth. Life in New Zealand is relaxed and unhurried. My travels have taught me that it’s okay to slow down. As spiritual beings having a human experience, we need to remember that the pace of life is far slower than the fast, stressful, and artificial life many of us lead in post-industrial urban environments. Life is like a marathon. Sometimes, we need to speed up, but other times, we need to slow down. Ultimately, we must find our own pace, because we can’t hope to finish the race happily if we’re always trying to keep up with someone else.&lt;/p&gt;

&lt;p&gt;Instead of rushing by, try slowing down&lt;/p&gt;

&lt;p&gt;Instead of hurrying up, try standing still and enjoying the moment…&lt;/p&gt;

&lt;p&gt;Instead of feeling squeezed, try stepping back and finding more breathing space.&lt;/p&gt;

&lt;p&gt;Thank you for listening.&lt;/p&gt;

&lt;h1 id=&quot;2nd-speech&quot;&gt;2nd Speech&lt;/h1&gt;

&lt;h1 id=&quot;title-the-pace-of-life-1&quot;&gt;Title: The Pace of Life&lt;/h1&gt;

&lt;p&gt;Hello Toastmasters and guests,&lt;/p&gt;

&lt;p&gt;Have you traveled to New Zealand for work, study or vacation?
Raise your hand if you have.&lt;/p&gt;

&lt;p&gt;Have you watched The Lord of the Rings trilogy?
The movies were filmed in New Zealand by Peter Jackson, a renowned director from there.&lt;/p&gt;

&lt;p&gt;My Travel Experience&lt;/p&gt;

&lt;p&gt;I’d like to share some of my travel experiences there, which were incredibly relaxing and slow-paced.
New Zealand is a paradise for those who love nature and the outdoors.&lt;/p&gt;

&lt;p&gt;My first stop was at a national park. The park offers many trails, each showcasing different landscapes and plant life/ plants. Completing just one trail took me 8 hours. Although the park attracted many tourists, the park was so vast that it never felt crowded. 
My friend moved quickly, seeking off-track adventures, while I took my time, savoring the beautiful scenery, the mighty mountain and the colorful lakes. We followed our own pace, just right for our fitness and ambition.&lt;/p&gt;

&lt;p&gt;In addition to the parks, I visited the beaches. New Zealand is an island country, with more than 700 small islands. 
This particular ISLAND ! you are looking at is home to endangered birds and wildlife / plants.&lt;/p&gt;

&lt;p&gt;I strolled from one beach to the next, enjoying the ocean breezes and the simple vastness.
Some of them are good for surfing while others are covered with black sand formed by volcanic rocks.
Along the shore, I spotted some wild elephant seals !!!!! basking in the sun, lying flat, and hanging out together.&lt;/p&gt;

&lt;p&gt;Where does the beautiful scenery come from?
The scenery comes from the craft of nature.&lt;/p&gt;

&lt;p&gt;New Zealand is situated at the fringes of the Pacific and Indian Australian TECTONIC plates, so she experiences frequent and violent geological activities, such as volcanic eruptions and earthquakes. Over a long long period of time, the land has been pushed upward, forming what we now see today, the Southern Alps, which stretch over 500 kilometers with 18 peaks like a backbone across the South Island. The highest, Mount Cook, stands at 3,724 meters with snow on its summit. Formed after a massive volcanic eruption, Lake Taupo, the largest freshwater lake in New Zealand, is about the same size as Singapore.&lt;/p&gt;

&lt;p&gt;Nature takes its time to craft such magnificent landscape. Such magnificent landscape exists before I arrived in New Zealand, and it continues to exists after I left. 
But the moment I was there as a traveler, I was relaxed, happy and content, for I had enjoyed the beauty of nature at my own pace.&lt;/p&gt;

&lt;p&gt;LIFE is like that too. Economies, companies, regulations, societies, and all troubles of the world exist before we are born, and they shall continue to exist after we are long dead. But the moment we are here as a traveler, we,  must live our life to the fullest, the truest, for there is nothing more enjoyable than to express the true nature of ourselves. 
We cannot ever hope to achieve that, if we constantly struggle to catch up with someone’s pace. IT is never fair to compete against someone at their pace, right? So, why do we do it then?
We must eat, sleep, play, work and even do toastmasters in ways that fit our true nature. 
This is my advice for you.&lt;/p&gt;

&lt;p&gt;Instead of rushing by, try standing still&lt;/p&gt;

&lt;p&gt;Instead of hurrying up, try slowing down&lt;/p&gt;

&lt;p&gt;Instead of squeezing hard, try letting go&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

&lt;h1 id=&quot;beautiful-scenery&quot;&gt;Beautiful Scenery&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/toastmasters/NZ/img0.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt; 
&lt;img src=&quot;/assets/images/toastmasters/NZ/img1.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt; 
&lt;img src=&quot;/assets/images/toastmasters/NZ/img2.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt; 
&lt;img src=&quot;/assets/images/toastmasters/NZ/img3.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt; 
&lt;img src=&quot;/assets/images/toastmasters/NZ/img4.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt; 
&lt;img src=&quot;/assets/images/toastmasters/NZ/img5.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt; 
&lt;img src=&quot;/assets/images/toastmasters/NZ/img6.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt; 
&lt;img src=&quot;/assets/images/toastmasters/NZ/img7.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt; 
&lt;img src=&quot;/assets/images/toastmasters/NZ/img8.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;</content><author><name>Wilson Fok</name></author><category term="Toastmasters" /><summary type="html">1st Speech Title: The Pace of Life Hello Toastmasters and guests, It is my great honor to deliver a speech during the national holidays, especially with the weather being such a boon for outdoor leisure activities. Has anyone here traveled to New Zealand for work, study, or vacation? Have you watched The Lord of the Rings trilogy? The movies were filmed in New Zealand by Peter Jackson, a renowned director from there. For those of you who have watched the films may have notice that New Zealand offers spectacular scenery. To know why, let me explain the geologic history of New Zealand. Location New Zealand is an island country situated in the southwestern Pacific Ocean and consists of two main islands: the North Island and the South Island. Located at the fringes of the Pacific and Indian-Australian tectonic plates, New Zealand has undergone a painful birth, In the North, the Pacific Plate is forced beneath the Indian-Australian Plate, while in the South, the Pacific Plate rubs against the Indian-Australian Plate and forces it downward. As part of the Ring of Fire that runs through Indonesia, the Philippines, and Japan in Asia, New Zealand experiences frequent geological activities, such as volcanic eruptions and earthquakes. Over time, the land has been pushed upward to form mountain ranges, and water has been trapped as snow on its summits. Today, we see the Southern Alps, which stretch over 500 kilometers with 18 peaks like a backbone across the South Island. The highest, Mount Cook, stands at 3,724 meters with snow on its summit. Lake Taupo, the largest freshwater lake in New Zealand, is about the same size as Singapore and was formed after a massive volcanic eruption. Gradually, it has collected water to fill itself to the fullest. Nature crafts the spectacular landscapes at its own pace. My Travel Experience New Zealand is a paradise for those who love nature and the outdoors. I’d like to share some of my travel experiences there, which were incredibly relaxing and slow-paced. My first stop was at a national park. The park offers many trails, each showcasing different landscapes and plant life. Completing just one trail took me 8 hours. Despite the large number of tourists, the park was so vast that it never felt crowded. Some visitors moved quickly, seeking off-track adventures, while others took their time, savoring the scenery, especially the colorful lakes. Everyone moved at their own pace, according to their abilities and goals. Just being there in that moment was enough to qualify me as a tourist and check it off my to-do list. Next, I visited the coastline. New Zealand has more than 700 small islands, and this particular one is home to a variety of wildlife and beautiful beaches. I strolled from one beach to the next, enjoying the ocean views and sea breezes. Some beaches in New Zealand are great for surfing while others are covered with black sand formed by volcanic rocks. Along the shore, I spotted wild elephant seals basking in the sun, lying flat, and hanging out together. The Pace of Life New Zealand offers us a chance to enjoy the natural beauty of the earth. Life in New Zealand is relaxed and unhurried. My travels have taught me that it’s okay to slow down. As spiritual beings having a human experience, we need to remember that the pace of life is far slower than the fast, stressful, and artificial life many of us lead in post-industrial urban environments. Life is like a marathon. Sometimes, we need to speed up, but other times, we need to slow down. Ultimately, we must find our own pace, because we can’t hope to finish the race happily if we’re always trying to keep up with someone else. Instead of rushing by, try slowing down Instead of hurrying up, try standing still and enjoying the moment… Instead of feeling squeezed, try stepping back and finding more breathing space. Thank you for listening. 2nd Speech Title: The Pace of Life Hello Toastmasters and guests, Have you traveled to New Zealand for work, study or vacation? Raise your hand if you have. Have you watched The Lord of the Rings trilogy? The movies were filmed in New Zealand by Peter Jackson, a renowned director from there. My Travel Experience I’d like to share some of my travel experiences there, which were incredibly relaxing and slow-paced. New Zealand is a paradise for those who love nature and the outdoors. My first stop was at a national park. The park offers many trails, each showcasing different landscapes and plant life/ plants. Completing just one trail took me 8 hours. Although the park attracted many tourists, the park was so vast that it never felt crowded. My friend moved quickly, seeking off-track adventures, while I took my time, savoring the beautiful scenery, the mighty mountain and the colorful lakes. We followed our own pace, just right for our fitness and ambition. In addition to the parks, I visited the beaches. New Zealand is an island country, with more than 700 small islands. This particular ISLAND ! you are looking at is home to endangered birds and wildlife / plants. I strolled from one beach to the next, enjoying the ocean breezes and the simple vastness. Some of them are good for surfing while others are covered with black sand formed by volcanic rocks. Along the shore, I spotted some wild elephant seals !!!!! basking in the sun, lying flat, and hanging out together. Where does the beautiful scenery come from? The scenery comes from the craft of nature. New Zealand is situated at the fringes of the Pacific and Indian Australian TECTONIC plates, so she experiences frequent and violent geological activities, such as volcanic eruptions and earthquakes. Over a long long period of time, the land has been pushed upward, forming what we now see today, the Southern Alps, which stretch over 500 kilometers with 18 peaks like a backbone across the South Island. The highest, Mount Cook, stands at 3,724 meters with snow on its summit. Formed after a massive volcanic eruption, Lake Taupo, the largest freshwater lake in New Zealand, is about the same size as Singapore. Nature takes its time to craft such magnificent landscape. Such magnificent landscape exists before I arrived in New Zealand, and it continues to exists after I left. But the moment I was there as a traveler, I was relaxed, happy and content, for I had enjoyed the beauty of nature at my own pace. LIFE is like that too. Economies, companies, regulations, societies, and all troubles of the world exist before we are born, and they shall continue to exist after we are long dead. But the moment we are here as a traveler, we, must live our life to the fullest, the truest, for there is nothing more enjoyable than to express the true nature of ourselves. We cannot ever hope to achieve that, if we constantly struggle to catch up with someone’s pace. IT is never fair to compete against someone at their pace, right? So, why do we do it then? We must eat, sleep, play, work and even do toastmasters in ways that fit our true nature. This is my advice for you. Instead of rushing by, try standing still Instead of hurrying up, try slowing down Instead of squeezing hard, try letting go Thanks Beautiful Scenery</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/toastmasters/cover.jpg" /><media:content medium="image" url="/assets/images/toastmasters/cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Workplace panacea (magic pill) for the heart</title><link href="/toastmasters/2024/10/25/leadership_styles/" rel="alternate" type="text/html" title="Workplace panacea (magic pill) for the heart" /><published>2024-10-25T00:00:00+08:00</published><updated>2024-10-25T00:00:00+08:00</updated><id>/toastmasters/2024/10/25/leadership_styles</id><content type="html" xml:base="/toastmasters/2024/10/25/leadership_styles/">&lt;h1 id=&quot;title-workplace-panacea-magic-pill-for-the-heart&quot;&gt;Title: Workplace panacea (magic pill) for the heart&lt;/h1&gt;

&lt;p&gt;Dear fellow toastmasters and distinguished guests,&lt;/p&gt;

&lt;p&gt;Does anyone in the audience lean towards a coaching or affiliative leadership style?
Raise your hand if you do!&lt;/p&gt;

&lt;p&gt;The coaching style emphasizes building morale and trust among your followers, while the affiliative style focuses on their gratification and emotional well-being. Both styles require us, as leaders, to care deeply about the emotional needs of others. Personally, these two styles are incredibly challenging for me.&lt;/p&gt;

&lt;p&gt;I’ve often scrutinized myself:
Why do I struggle with these styles?
Why can’t I coach effectively?
Why do I fail to pay attention to emotional needs?
Why do my actions fail to bring gratification to others?&lt;/p&gt;

&lt;p&gt;The answer is that at work, many of us feel drained, frustrated, angry, and stressed. Like trying to spend money from a bank account with a zero balance, we simply don’t have the emotional capacity to invest in others.&lt;/p&gt;

&lt;p&gt;Let me share a personal story that sheds light on this struggle.&lt;/p&gt;

&lt;p&gt;Recently, we purchased a new device to experiment with cutting-edge technology. Although we didn’t know how to use it, the abundance of tutorials and setup instructions made it seem manageable—more like low-hanging fruit than a mission impossible.&lt;/p&gt;

&lt;p&gt;Since the task wasn’t high-priority, I delegated the task to my colleague. I thought I had set clear objectives and a reasonable timeline.&lt;/p&gt;

&lt;p&gt;However, progress was slow, and after a week, I received no updates. Occasionally, my colleague approached me with questions he faced, often concluding that the problems were insurmountable. Sometimes, his reasoning left me perplexed as it didn’t make much sense. To be fair, since I wasn’t directly involved, I struggled to comprehend the issues. Back then, I also lacked the energy, time and appetite to dive into all the details.&lt;/p&gt;

&lt;p&gt;So I just told him what I believed to be right and common sense. But naively, I assumed that telling someone common sense would lead to common-sense behavior. No, it didn’t. Instead, my patience wore thin, my ego was bruised, and frustration built up.&lt;/p&gt;

&lt;p&gt;During a morning meeting, my colleague presented a lengthy list of obstacles—without a single proposed solution. My heart sank.
To move things forward, my boss suggested contacting the salesperson for technical support. I thought that was a great idea, so I seconded. This rekindled my hope that we could finally make it work.&lt;/p&gt;

&lt;p&gt;To my surprise, my colleague came back and asked me to contact the salesperson. I was stunned. Somehow, in his mind, he would continue to work on the problems that he said he could not solve while I was responsible for reaching out for help. This misunderstanding could be a bad omen. I patiently explained to him that the choice to contact the salesperson was his, not mine.&lt;/p&gt;

&lt;p&gt;At the end, we managed to resolve some but not all the problems, and we abandoned the experiment altogether.
The experience left me drained—not just because of the technical challenges but also because of the emotional roller-coaster ride. There was unnecessary discomfort, frustration, and miscommunication.&lt;/p&gt;

&lt;p&gt;[what would you do in this situation?]&lt;/p&gt;

&lt;p&gt;Here is the good news- I’ve discovered a magic pill, a panacea. Take it three times a day, for as long as needed, with no side effects.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If someone is inept, useless, or dumb, that’s their flaw. But delegating tasks to them—that’s the leader’s fault.&lt;/li&gt;
  &lt;li&gt;If someone is deceitful, disloyal, or manipulative, that’s their flaw. But trusting them—that’s the leader’s fault.&lt;/li&gt;
  &lt;li&gt;If this speech sounds boring, cliche and underwhelming, that is my flaw. But coming to listen to me speak. That is your fault.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider this carefully:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;When we cook poorly, we don’t blame the ingredients for tasting bad.&lt;/li&gt;
  &lt;li&gt;When we lose money in the stock market, we don’t blame the money for falling stock prices.&lt;/li&gt;
  &lt;li&gt;When we arrive late, we don’t blame the clock for running too fast.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the outcome sours, it is our animal instinct to point the finger at the closest person, but in fact, it is farthest from the truth. When we see the truth for what it is, we experience less anger, less frustration, and less confusion. Instead, we feel empowered, in control, and relieved. With this pill, we could refill our emotional reservoir, and only then we could reach out to take care of the emotional needs of others. This pill has transformed my life and my relationships.&lt;/p&gt;

&lt;p&gt;I urge you to try this tonight with your family, and again on Monday with your boss or colleagues. I promise, this pill works wonders in life. Thank you.&lt;/p&gt;</content><author><name>Wilson Fok</name></author><category term="Toastmasters" /><summary type="html">Title: Workplace panacea (magic pill) for the heart Dear fellow toastmasters and distinguished guests, Does anyone in the audience lean towards a coaching or affiliative leadership style? Raise your hand if you do! The coaching style emphasizes building morale and trust among your followers, while the affiliative style focuses on their gratification and emotional well-being. Both styles require us, as leaders, to care deeply about the emotional needs of others. Personally, these two styles are incredibly challenging for me. I’ve often scrutinized myself: Why do I struggle with these styles? Why can’t I coach effectively? Why do I fail to pay attention to emotional needs? Why do my actions fail to bring gratification to others? The answer is that at work, many of us feel drained, frustrated, angry, and stressed. Like trying to spend money from a bank account with a zero balance, we simply don’t have the emotional capacity to invest in others. Let me share a personal story that sheds light on this struggle. Recently, we purchased a new device to experiment with cutting-edge technology. Although we didn’t know how to use it, the abundance of tutorials and setup instructions made it seem manageable—more like low-hanging fruit than a mission impossible. Since the task wasn’t high-priority, I delegated the task to my colleague. I thought I had set clear objectives and a reasonable timeline. However, progress was slow, and after a week, I received no updates. Occasionally, my colleague approached me with questions he faced, often concluding that the problems were insurmountable. Sometimes, his reasoning left me perplexed as it didn’t make much sense. To be fair, since I wasn’t directly involved, I struggled to comprehend the issues. Back then, I also lacked the energy, time and appetite to dive into all the details. So I just told him what I believed to be right and common sense. But naively, I assumed that telling someone common sense would lead to common-sense behavior. No, it didn’t. Instead, my patience wore thin, my ego was bruised, and frustration built up. During a morning meeting, my colleague presented a lengthy list of obstacles—without a single proposed solution. My heart sank. To move things forward, my boss suggested contacting the salesperson for technical support. I thought that was a great idea, so I seconded. This rekindled my hope that we could finally make it work. To my surprise, my colleague came back and asked me to contact the salesperson. I was stunned. Somehow, in his mind, he would continue to work on the problems that he said he could not solve while I was responsible for reaching out for help. This misunderstanding could be a bad omen. I patiently explained to him that the choice to contact the salesperson was his, not mine. At the end, we managed to resolve some but not all the problems, and we abandoned the experiment altogether. The experience left me drained—not just because of the technical challenges but also because of the emotional roller-coaster ride. There was unnecessary discomfort, frustration, and miscommunication. [what would you do in this situation?] Here is the good news- I’ve discovered a magic pill, a panacea. Take it three times a day, for as long as needed, with no side effects. If someone is inept, useless, or dumb, that’s their flaw. But delegating tasks to them—that’s the leader’s fault. If someone is deceitful, disloyal, or manipulative, that’s their flaw. But trusting them—that’s the leader’s fault. If this speech sounds boring, cliche and underwhelming, that is my flaw. But coming to listen to me speak. That is your fault. Consider this carefully: When we cook poorly, we don’t blame the ingredients for tasting bad. When we lose money in the stock market, we don’t blame the money for falling stock prices. When we arrive late, we don’t blame the clock for running too fast. When the outcome sours, it is our animal instinct to point the finger at the closest person, but in fact, it is farthest from the truth. When we see the truth for what it is, we experience less anger, less frustration, and less confusion. Instead, we feel empowered, in control, and relieved. With this pill, we could refill our emotional reservoir, and only then we could reach out to take care of the emotional needs of others. This pill has transformed my life and my relationships. I urge you to try this tonight with your family, and again on Monday with your boss or colleagues. I promise, this pill works wonders in life. Thank you.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/toastmasters/cover.jpg" /><media:content medium="image" url="/assets/images/toastmasters/cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Database Search</title><link href="/others/2024/09/28/database_search/" rel="alternate" type="text/html" title="Database Search" /><published>2024-09-28T00:00:00+08:00</published><updated>2024-09-28T00:00:00+08:00</updated><id>/others/2024/09/28/database_search</id><content type="html" xml:base="/others/2024/09/28/database_search/">&lt;h2 id=&quot;database-search&quot;&gt;Database Search&lt;/h2&gt;
&lt;p&gt;A database search is a process of querying a structured collection of data (a database) to retrieve specific information that meets certain criteria. This is commonly used in various fields, including academia, business, medicine, and technology, to efficiently locate relevant data or documents within large and complex datasets. Here’s a detailed explanation of the components and process involved in a database search:&lt;/p&gt;
&lt;h3 id=&quot;1-database-structure&quot;&gt;1. Database Structure:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Tables: Most databases are organized into tables, where each table contains rows and columns. Each row is a record, and each column is a field containing specific data attributes.&lt;/li&gt;
  &lt;li&gt;Records: A record is a single entry in a database table, often representing a real-world entity such as a customer, transaction, or product.&lt;/li&gt;
  &lt;li&gt;Fields: Fields are the individual data points within a record, such as a name, date, or price.
    &lt;h3 id=&quot;2-search-criteria&quot;&gt;2. Search Criteria:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Keywords: Users input specific keywords that describe the information they are looking for. For example, in a medical research database, a keyword could be a specific disease or treatment method.&lt;/li&gt;
  &lt;li&gt;Filters: To narrow down results, filters can be applied. These could include date ranges, categories, authors, publication types, or other relevant attributes.&lt;/li&gt;
  &lt;li&gt;Boolean Operators: These operators (AND, OR, NOT) are used to refine the search. For example, “heart disease AND diabetes” will return results that contain both terms, whereas “heart disease OR diabetes” will return results that contain either term.
    &lt;h3 id=&quot;3-query-language&quot;&gt;3. Query Language:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;SQL (Structured Query Language): Most databases are queried using SQL, a standard language for managing and retrieving data.&lt;/li&gt;
  &lt;li&gt;Natural Language Queries: Some modern databases support natural language processing, allowing users to input queries in plain language, such as “find all articles about heart disease published in 2023.”
    &lt;h3 id=&quot;4-search-algorithms&quot;&gt;4. Search Algorithms:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Exact Match: The database returns results that exactly match the search terms.&lt;/li&gt;
  &lt;li&gt;Partial Match: The database returns results that partially match the search terms, useful when the exact term is not known.&lt;/li&gt;
  &lt;li&gt;Relevance Ranking: Some databases rank the search results based on relevance, using algorithms that consider factors like the frequency of the search terms, the age of the data, or user preferences.
    &lt;h3 id=&quot;5-search-results&quot;&gt;5. Search Results:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Result Set: The output of a database search is a set of records that match the search criteria. This can be displayed in various formats, such as a list, table, or graph.&lt;/li&gt;
  &lt;li&gt;Metadata: Alongside the results, databases often provide metadata, such as the date of entry, source, and other relevant details to help users assess the quality and relevance of the results.
    &lt;h3 id=&quot;6-advanced-search-options&quot;&gt;6. Advanced Search Options:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Wildcards/ Regular Expressions: Symbols like * or ? are used to represent unknown characters or groups of characters, allowing for more flexible searches. For example, “medic*” might return results for “medical,” “medicine,” and “medications.”&lt;/li&gt;
  &lt;li&gt;Proximity Searches: Some databases allow searches based on the proximity of terms to each other within a document. This is useful for finding phrases or related concepts that appear close together.
    &lt;h3 id=&quot;7-search-in-different-database-types&quot;&gt;7. Search in Different Database Types:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Relational Databases: These are structured databases where data is stored in tables with defined relationships between them (e.g., MySQL, Oracle).&lt;/li&gt;
  &lt;li&gt;Document Databases: These store data in document formats, often JSON or XML, allowing for more flexible and hierarchical data structures (e.g., MongoDB).&lt;/li&gt;
  &lt;li&gt;Full-Text Search Databases: Specialized for searching text-heavy data, these databases index text to allow rapid searches across large volumes of content (e.g., Elasticsearch).
    &lt;h3 id=&quot;8-iterative-search-and-refinement&quot;&gt;8. Iterative Search and Refinement:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Initial Search: The user performs a broad search to get a wide range of results.&lt;/li&gt;
  &lt;li&gt;Refinement: Based on the initial results, the user may refine the search by adding more specific criteria, adjusting filters, or using different keywords.&lt;/li&gt;
  &lt;li&gt;Iteration: This process might be repeated multiple times to narrow down to the most relevant results.
    &lt;h3 id=&quot;9-exporting-and-using-results&quot;&gt;9. Exporting and Using Results:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Exporting Data: Users can often export search results into different formats (e.g., CSV, PDF) for further analysis or reporting.&lt;/li&gt;
  &lt;li&gt;Data Analysis: Results can be used in statistical analysis, trend identification, or other decision-making processes, depending on the user’s needs.
    &lt;h3 id=&quot;10-security-and-access-control&quot;&gt;10. Security and Access Control:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;User Authentication: Access to certain databases may require user authentication to ensure that only authorized individuals can perform searches.&lt;/li&gt;
  &lt;li&gt;Data Privacy: Sensitive information within a database may be protected by encryption, and access to certain fields or records may be restricted based on user roles.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wilson Fok</name></author><category term="Others" /><summary type="html">Database Search A database search is a process of querying a structured collection of data (a database) to retrieve specific information that meets certain criteria. This is commonly used in various fields, including academia, business, medicine, and technology, to efficiently locate relevant data or documents within large and complex datasets. Here’s a detailed explanation of the components and process involved in a database search: 1. Database Structure: Tables: Most databases are organized into tables, where each table contains rows and columns. Each row is a record, and each column is a field containing specific data attributes. Records: A record is a single entry in a database table, often representing a real-world entity such as a customer, transaction, or product. Fields: Fields are the individual data points within a record, such as a name, date, or price. 2. Search Criteria: Keywords: Users input specific keywords that describe the information they are looking for. For example, in a medical research database, a keyword could be a specific disease or treatment method. Filters: To narrow down results, filters can be applied. These could include date ranges, categories, authors, publication types, or other relevant attributes. Boolean Operators: These operators (AND, OR, NOT) are used to refine the search. For example, “heart disease AND diabetes” will return results that contain both terms, whereas “heart disease OR diabetes” will return results that contain either term. 3. Query Language: SQL (Structured Query Language): Most databases are queried using SQL, a standard language for managing and retrieving data. Natural Language Queries: Some modern databases support natural language processing, allowing users to input queries in plain language, such as “find all articles about heart disease published in 2023.” 4. Search Algorithms: Exact Match: The database returns results that exactly match the search terms. Partial Match: The database returns results that partially match the search terms, useful when the exact term is not known. Relevance Ranking: Some databases rank the search results based on relevance, using algorithms that consider factors like the frequency of the search terms, the age of the data, or user preferences. 5. Search Results: Result Set: The output of a database search is a set of records that match the search criteria. This can be displayed in various formats, such as a list, table, or graph. Metadata: Alongside the results, databases often provide metadata, such as the date of entry, source, and other relevant details to help users assess the quality and relevance of the results. 6. Advanced Search Options: Wildcards/ Regular Expressions: Symbols like * or ? are used to represent unknown characters or groups of characters, allowing for more flexible searches. For example, “medic*” might return results for “medical,” “medicine,” and “medications.” Proximity Searches: Some databases allow searches based on the proximity of terms to each other within a document. This is useful for finding phrases or related concepts that appear close together. 7. Search in Different Database Types: Relational Databases: These are structured databases where data is stored in tables with defined relationships between them (e.g., MySQL, Oracle). Document Databases: These store data in document formats, often JSON or XML, allowing for more flexible and hierarchical data structures (e.g., MongoDB). Full-Text Search Databases: Specialized for searching text-heavy data, these databases index text to allow rapid searches across large volumes of content (e.g., Elasticsearch). 8. Iterative Search and Refinement: Initial Search: The user performs a broad search to get a wide range of results. Refinement: Based on the initial results, the user may refine the search by adding more specific criteria, adjusting filters, or using different keywords. Iteration: This process might be repeated multiple times to narrow down to the most relevant results. 9. Exporting and Using Results: Exporting Data: Users can often export search results into different formats (e.g., CSV, PDF) for further analysis or reporting. Data Analysis: Results can be used in statistical analysis, trend identification, or other decision-making processes, depending on the user’s needs. 10. Security and Access Control: User Authentication: Access to certain databases may require user authentication to ensure that only authorized individuals can perform searches. Data Privacy: Sensitive information within a database may be protected by encryption, and access to certain fields or records may be restricted based on user roles.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/Mongodb/taxonomy_facet_example.png" /><media:content medium="image" url="/assets/images/Mongodb/taxonomy_facet_example.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Facet Search</title><link href="/others/2024/09/27/facet_search/" rel="alternate" type="text/html" title="Facet Search" /><published>2024-09-27T00:00:00+08:00</published><updated>2024-09-27T00:00:00+08:00</updated><id>/others/2024/09/27/facet_search</id><content type="html" xml:base="/others/2024/09/27/facet_search/">&lt;h1 id=&quot;facet-search&quot;&gt;Facet Search&lt;/h1&gt;
&lt;p&gt;A facet search is an advanced search technique that allows users to filter and refine search results dynamically by selecting from multiple categories or “facets.” Each facet represents a distinct dimension or attribute of the data, such as date, author, category, or price range. Facet search is widely used in e-commerce, digital libraries, and large-scale databases to help users quickly narrow down large sets of results to find exactly what they are looking for.&lt;/p&gt;

&lt;h2 id=&quot;heres-a-detailed-breakdown-of-how-facet-search-works-and-its-components&quot;&gt;Here’s a detailed breakdown of how facet search works and its components:&lt;/h2&gt;
&lt;h3 id=&quot;1-basic-concept-of-facet-search&quot;&gt;1. Basic Concept of Facet Search:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Facets: A facet is a specific attribute or property of the items in the database. For example, in an online store, facets might include categories like “Brand,” “Price,” “Color,” and “Size.”&lt;/li&gt;
  &lt;li&gt;Facet Values: Each facet has multiple values that represent the different options available. For example, the “Color” facet might have values like “Red,” “Blue,” “Green,” etc.&lt;/li&gt;
  &lt;li&gt;Dynamic Filtering: As users select facet values, the search results update in real-time to reflect the filters applied, helping users progressively narrow down the results.
    &lt;h3 id=&quot;2-components-of-facet-search&quot;&gt;2. Components of Facet Search:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Search Index: The underlying database or search engine indexes all the data, categorizing items according to their facet values. This allows for quick retrieval and filtering based on facet selections.&lt;/li&gt;
  &lt;li&gt;Facet List: This is the user interface component that displays all available facets and their values. Users can see how many items match each facet value, often displayed as a count next to the facet.&lt;/li&gt;
  &lt;li&gt;Facet Selection: Users interact with the facet list by selecting or deselecting facet values. For example, a user might filter a product search by selecting the “Electronics” category, the “Samsung” brand, and a price range of “$200-$500.”
    &lt;h3 id=&quot;3-how-facet-search-works&quot;&gt;3. How Facet Search Works:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Initial Search: The user starts with a broad search, such as searching for “smartphones” in an online store.&lt;/li&gt;
  &lt;li&gt;Facet Presentation: The search engine presents the user with a list of facets related to the search results. For smartphones, these might include “Brand,” “Operating System,” “Screen Size,” “Price,” etc.&lt;/li&gt;
  &lt;li&gt;User Interaction: The user selects one or more facet values. For example, they might choose the “Apple” brand and a price range of “$500-$1000.”&lt;/li&gt;
  &lt;li&gt;Dynamic Filtering: As each facet is selected, the search results are dynamically updated to reflect the current filters. The user can see how many items match the selected criteria and further refine the search by selecting additional facets.&lt;/li&gt;
  &lt;li&gt;Iteration: The process is iterative, allowing users to add or remove facets until they find the desired results.
    &lt;h3 id=&quot;4-types-of-facets&quot;&gt;4. Types of Facets:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Hierarchical Facets: These facets have a parent-child relationship, often used for categories. For example, “Electronics” might be a parent category, with “Smartphones” and “Laptops” as child categories.&lt;/li&gt;
  &lt;li&gt;Flat Facets: These facets are non-hierarchical and represent simple attributes like color, brand, or material.&lt;/li&gt;
  &lt;li&gt;Range Facets: These allow users to select a range of values, such as price, weight, or date. Users can often specify custom ranges or choose from predefined ranges.&lt;/li&gt;
  &lt;li&gt;Multi-Select Facets: Users can select multiple values within a facet. For instance, they might choose both “Red” and “Blue” under the “Color” facet to see products that are either color.
    &lt;h3 id=&quot;5-advantages-of-facet-search&quot;&gt;5. Advantages of Facet Search:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;User-Friendly Navigation: Facet search simplifies navigation by allowing users to progressively filter results, making it easier to find what they’re looking for without needing to know exact search terms.&lt;/li&gt;
  &lt;li&gt;Flexibility: Users can explore results from multiple angles by combining different facets, which is particularly useful for databases with diverse or complex data.&lt;/li&gt;
  &lt;li&gt;Immediate Feedback: Facet counts give users immediate feedback on how many results will be returned for each selection, helping them make informed decisions.
    &lt;h3 id=&quot;6-facet-search-in-different-contexts&quot;&gt;6. Facet Search in Different Contexts:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;E-commerce: In online shopping, facets might include brand, price, ratings, availability, and more, helping users quickly find products that match their preferences.&lt;/li&gt;
  &lt;li&gt;Digital Libraries: Academic or digital libraries use facet search to allow users to filter search results by publication year, author, subject area, or document type.&lt;/li&gt;
  &lt;li&gt;Content Management Systems: Websites with large content repositories often use facet search to help users filter articles, videos, or documents by topic, date, or tags.&lt;/li&gt;
  &lt;li&gt;Databases: In relational or document-oriented databases, facets can be used to filter data records by various attributes, making it easier for users to explore the dataset.
    &lt;h3 id=&quot;7-implementation-of-facet-search&quot;&gt;7. Implementation of Facet Search:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Search Engine Integration: Facet search is often implemented using search engines like Lucene, Elasticsearch or Solr, which support faceted navigation out of the box.&lt;/li&gt;
  &lt;li&gt;User Interface: A well-designed user interface is crucial for effective facet search. Facets are typically displayed on the side or top of the search results page, allowing for easy access.&lt;/li&gt;
  &lt;li&gt;Performance Considerations: The system must be optimized to handle complex queries and large datasets efficiently. This involves indexing the facets and caching commonly used facet combinations.
    &lt;h3 id=&quot;8-challenges-in-facet-search&quot;&gt;8. Challenges in Facet Search:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Facet Overload: Presenting too many facets or facet values can overwhelm users. It’s important to prioritize the most relevant facets for the user’s search context.&lt;/li&gt;
  &lt;li&gt;Facet Dependency: In some cases, selecting one facet may limit the available options in another. Managing these dependencies while maintaining an intuitive user experience can be challenging.&lt;/li&gt;
  &lt;li&gt;Data Quality: The effectiveness of facet search depends on the quality of the underlying data. Inconsistent or poorly categorized data can lead to irrelevant or incomplete search results.
    &lt;h3 id=&quot;9-examples-of-facet-search&quot;&gt;9. Examples of Facet Search:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Amazon: When searching for a product on Amazon, users can filter results by various facets such as brand, price, customer reviews, and more.&lt;/li&gt;
  &lt;li&gt;Google Scholar: Google Scholar allows users to refine their search results by year of publication, author, and relevance, among other facets.&lt;/li&gt;
  &lt;li&gt;EBSCOhost: An academic database that offers facets for filtering search results by subject, publication date, source type, and more.
    &lt;h3 id=&quot;10-best-practices-for-facet-search&quot;&gt;10. Best Practices for Facet Search:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Prioritize Key Facets: Display the most commonly used facets prominently to guide users efficiently.&lt;/li&gt;
  &lt;li&gt;Limit the Number of Facet Values: Show only the most relevant facet values by default, with options to expand or see more if needed.&lt;/li&gt;
  &lt;li&gt;Provide Clear Counts: Show how many results match each facet value, so users know what to expect when they make a selection.&lt;/li&gt;
  &lt;li&gt;Allow Easy Removal of Facets: Users should be able to easily deselect facets or clear all filters to start a new search.
    &lt;h3 id=&quot;11-actual-source-codes-and-examples&quot;&gt;11. Actual Source Codes and Examples&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;numerical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/numerical_range_facet.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/numerical_range_facet_example.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;categorical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/string_facet.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/string_facet_example.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Taxonomical
&lt;img src=&quot;/assets/images/Mongodb/taxonomy_facet.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/taxonomy_facet_example.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wilson Fok</name></author><category term="Others" /><summary type="html">Facet Search A facet search is an advanced search technique that allows users to filter and refine search results dynamically by selecting from multiple categories or “facets.” Each facet represents a distinct dimension or attribute of the data, such as date, author, category, or price range. Facet search is widely used in e-commerce, digital libraries, and large-scale databases to help users quickly narrow down large sets of results to find exactly what they are looking for. Here’s a detailed breakdown of how facet search works and its components: 1. Basic Concept of Facet Search: Facets: A facet is a specific attribute or property of the items in the database. For example, in an online store, facets might include categories like “Brand,” “Price,” “Color,” and “Size.” Facet Values: Each facet has multiple values that represent the different options available. For example, the “Color” facet might have values like “Red,” “Blue,” “Green,” etc. Dynamic Filtering: As users select facet values, the search results update in real-time to reflect the filters applied, helping users progressively narrow down the results. 2. Components of Facet Search: Search Index: The underlying database or search engine indexes all the data, categorizing items according to their facet values. This allows for quick retrieval and filtering based on facet selections. Facet List: This is the user interface component that displays all available facets and their values. Users can see how many items match each facet value, often displayed as a count next to the facet. Facet Selection: Users interact with the facet list by selecting or deselecting facet values. For example, a user might filter a product search by selecting the “Electronics” category, the “Samsung” brand, and a price range of “$200-$500.” 3. How Facet Search Works: Initial Search: The user starts with a broad search, such as searching for “smartphones” in an online store. Facet Presentation: The search engine presents the user with a list of facets related to the search results. For smartphones, these might include “Brand,” “Operating System,” “Screen Size,” “Price,” etc. User Interaction: The user selects one or more facet values. For example, they might choose the “Apple” brand and a price range of “$500-$1000.” Dynamic Filtering: As each facet is selected, the search results are dynamically updated to reflect the current filters. The user can see how many items match the selected criteria and further refine the search by selecting additional facets. Iteration: The process is iterative, allowing users to add or remove facets until they find the desired results. 4. Types of Facets: Hierarchical Facets: These facets have a parent-child relationship, often used for categories. For example, “Electronics” might be a parent category, with “Smartphones” and “Laptops” as child categories. Flat Facets: These facets are non-hierarchical and represent simple attributes like color, brand, or material. Range Facets: These allow users to select a range of values, such as price, weight, or date. Users can often specify custom ranges or choose from predefined ranges. Multi-Select Facets: Users can select multiple values within a facet. For instance, they might choose both “Red” and “Blue” under the “Color” facet to see products that are either color. 5. Advantages of Facet Search: User-Friendly Navigation: Facet search simplifies navigation by allowing users to progressively filter results, making it easier to find what they’re looking for without needing to know exact search terms. Flexibility: Users can explore results from multiple angles by combining different facets, which is particularly useful for databases with diverse or complex data. Immediate Feedback: Facet counts give users immediate feedback on how many results will be returned for each selection, helping them make informed decisions. 6. Facet Search in Different Contexts: E-commerce: In online shopping, facets might include brand, price, ratings, availability, and more, helping users quickly find products that match their preferences. Digital Libraries: Academic or digital libraries use facet search to allow users to filter search results by publication year, author, subject area, or document type. Content Management Systems: Websites with large content repositories often use facet search to help users filter articles, videos, or documents by topic, date, or tags. Databases: In relational or document-oriented databases, facets can be used to filter data records by various attributes, making it easier for users to explore the dataset. 7. Implementation of Facet Search: Search Engine Integration: Facet search is often implemented using search engines like Lucene, Elasticsearch or Solr, which support faceted navigation out of the box. User Interface: A well-designed user interface is crucial for effective facet search. Facets are typically displayed on the side or top of the search results page, allowing for easy access. Performance Considerations: The system must be optimized to handle complex queries and large datasets efficiently. This involves indexing the facets and caching commonly used facet combinations. 8. Challenges in Facet Search: Facet Overload: Presenting too many facets or facet values can overwhelm users. It’s important to prioritize the most relevant facets for the user’s search context. Facet Dependency: In some cases, selecting one facet may limit the available options in another. Managing these dependencies while maintaining an intuitive user experience can be challenging. Data Quality: The effectiveness of facet search depends on the quality of the underlying data. Inconsistent or poorly categorized data can lead to irrelevant or incomplete search results. 9. Examples of Facet Search: Amazon: When searching for a product on Amazon, users can filter results by various facets such as brand, price, customer reviews, and more. Google Scholar: Google Scholar allows users to refine their search results by year of publication, author, and relevance, among other facets. EBSCOhost: An academic database that offers facets for filtering search results by subject, publication date, source type, and more. 10. Best Practices for Facet Search: Prioritize Key Facets: Display the most commonly used facets prominently to guide users efficiently. Limit the Number of Facet Values: Show only the most relevant facet values by default, with options to expand or see more if needed. Provide Clear Counts: Show how many results match each facet value, so users know what to expect when they make a selection. Allow Easy Removal of Facets: Users should be able to easily deselect facets or clear all filters to start a new search. 11. Actual Source Codes and Examples numerical categorical Taxonomical</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/Mongodb/taxonomy_facet_example.png" /><media:content medium="image" url="/assets/images/Mongodb/taxonomy_facet_example.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">MongoDB Background</title><link href="/others/2024/09/26/mongoDB_background/" rel="alternate" type="text/html" title="MongoDB Background" /><published>2024-09-26T00:00:00+08:00</published><updated>2024-09-26T00:00:00+08:00</updated><id>/others/2024/09/26/mongoDB_background</id><content type="html" xml:base="/others/2024/09/26/mongoDB_background/">&lt;p&gt;Dear readers,&lt;/p&gt;

&lt;p&gt;This is my introductory course on some basic concepts on database, searches, and optimization. MongoDB is a NoSQL database that stores data in flexible, JSON-like documents, rather than the traditional table-based relational database structure. This allows for more dynamic schemas, where fields can vary between documents, and data can be nested in complex hierarchies.
###Key Features of MongoDB:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Document-Oriented Storage: MongoDB stores data in BSON (binary JSON) format, which means data can be represented in a rich, hierarchical structure. This makes it more adaptable to changing data models.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;what-is-a-data-model&quot;&gt;What is a data model?&lt;/h3&gt;
&lt;h3 id=&quot;conceptual-data-models&quot;&gt;Conceptual data models&lt;/h3&gt;

&lt;p&gt;These model types provide a high-level, conceptual view of your data. They identify key entities—like customers, products, orders, and payments—and show how these entities relate to each other. This model is designed to help business stakeholders understand how different parts of the data interact without diving into technical details.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Example: For a retail company, a conceptual data model might include categories like customers, products, orders, and payments. The relationships between these categories would be mapped out visually to help stakeholders see how the data from different parts of the business interact without getting into specifics like data types or storage methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;logical-data-models&quot;&gt;Logical data models&lt;/h3&gt;

&lt;p&gt;Logical data models build on the conceptual model by adding more detail. They define the data elements, their attributes, and the relationships between them in a way that aligns more closely with how the data will be implemented in a database. This model bridges the gap between business needs and technical design, making it easier for IT teams to plan the database structure.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Example: Continuing with the retail company example, a logical data model would define specific attributes for each category defined in the conceptual model. For instance, the customer category might include attributes like customer ID, name, email, and address. The order category could include details like order ID, order date, customer ID, and total amount. This additional detail translates business concepts into a structured database design, though it doesn’t yet address the physical aspects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;physical-data-models-electronic&quot;&gt;Physical data models (Electronic)&lt;/h3&gt;

&lt;p&gt;Physical data models provide the most detail. They take the logical model and turn it into a specific framework for storing and managing the data within a particular database system. This includes defining the structure of tables, the types of data that will be stored in each column, and how the data will be indexed and accessed. The physical model optimizes the database for performance and maintains accurate data relationships.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Example: For our hypothetical retail company, the physical data model would translate the logical model into a concrete database design. The customer category might become a table named “Customers,” with fields for customer information like ID, name, email, and address. Similarly, the order category would be “Orders,” containing details like order date, customer ID, and total amount. The physical model also defines how these tables interact within the database to ensure efficient data retrieval and integrity.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Scalability: MongoDB is designed to scale horizontally, which means you can distribute data across multiple servers. This is especially useful for handling large volumes of data and high traffic loads.&lt;/li&gt;
  &lt;li&gt;Flexibility: Unlike traditional relational databases that require a predefined schema, MongoDB allows for flexible schemas (mixture of different data variable types, inconsistent number of fields, etc), making it easier to handle data that doesn’t fit neatly into a predefined structure.&lt;/li&gt;
  &lt;li&gt;High Performance: MongoDB is optimized for read and write performance, and it supports indexing and querying that can improve data access speeds.&lt;/li&gt;
  &lt;li&gt;Distributed Database: MongoDB is built for distributed systems, with features like replication, sharding (splitting a large database into smaller partitions and storing them in various locations), and automatic failover, making it highly resilient and available.&lt;/li&gt;
  &lt;li&gt;Aggregation Framework: MongoDB provides a powerful aggregation framework that allows for complex data processing and transformation directly within the database.&lt;/li&gt;
  &lt;li&gt;Integration with Modern Development Stacks: MongoDB integrates well with many modern development environments, including JavaScript, Python, and Node.js, making it popular among developers building web applications.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###Why MongoDB is Popular:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Ease of Use: MongoDB’s flexible document model is more aligned with how developers think about data, especially in web and mobile applications. This makes it easier to use and faster to develop with compared to traditional relational databases.&lt;/li&gt;
  &lt;li&gt;Scalability: As data grows, MongoDB’s ability to scale horizontally by adding more servers allows businesses to manage large datasets without significant performance degradation.&lt;/li&gt;
  &lt;li&gt;Flexible Schema: The ability to store various data types and structures in the same collection without needing to define a strict schema upfront makes MongoDB ideal for rapidly evolving applications.&lt;/li&gt;
  &lt;li&gt;Strong Community and Ecosystem: MongoDB has a large and active community, extensive documentation, and a wide range of tools and integrations, making it a popular choice for developers and companies.&lt;/li&gt;
  &lt;li&gt;Cloud-Native: MongoDB Atlas, the cloud version of MongoDB, offers a managed service that abstracts away the complexities of database management, making it easier for developers to deploy and scale databases in the cloud.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Support for Big Data and Real-Time Applications: MongoDB’s performance characteristics and scalability make it well-suited for big data applications, real-time analytics, and other modern use cases where traditional databases may struggle.
MongoDB’s combination of flexibility, performance, and scalability has made it one of the most popular NoSQL databases, especially in environments where developers need to move quickly and handle large, complex datasets.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;I have read through its documentation and tutorials on MongoDB website (https://www.mongodb.com/). They are well-suited for beginners like myself and offer MongoDB University courses &lt;strong&gt;for free&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;some-basic-differences-between-mongodb-nosql-vs-sql-database&quot;&gt;Some basic differences between MongoDB (NoSQL) vs SQL database&lt;/h3&gt;

&lt;p&gt;SQL is very fast for lookup, and for adding new rows, which makes it very suitable for a situation where we need to often add and remove new samples. However, its schema is rigid. In other words, its columns are preset, so adding or removing a field can be tricky. Also, its schema can only handle single variable type within a field, which means it can be less flexible.&lt;/p&gt;

&lt;p&gt;On the other hand, MongoDB lets us mix multiple variable types in the same field or add or remove new columns, with each entry can have different number of fields. Apart from the standard integer, string, double, MongoDB uses unique variable types. For example, ID Key, ISODATE, etc. Each sample is a document. Many related or similar documents grouped together are called a collection. Many related or similar collections grouped together are called a database and putting several databases together are called a cluster. It can scale easily. Despite its flexibility, MongoDB can enforce constraints on its schema and validate its documents against its constraints.&lt;/p&gt;

&lt;h3 id=&quot;how-mongodb-handles-relationships&quot;&gt;How MongoDB handles relationships?&lt;/h3&gt;

&lt;p&gt;In MongoDB, we have 3 different ways to combine a key (unique) to a value (information). The first way is one-to-one. This is most useful when we need to look up a unique record. Say we identify this particular record with its own unique id that is automatically generated when we insert it into a database. The second way is one-to-many. This is most useful when we have multiply items inside an array for a field. We can search through them. For example, a single record possesses multiple tags or labels. The last way is many-to-many. 
It is very paramount that we understand the purpose and the functional requirements of database. The four functional pillars of a good database are atomicity, consistency, isolation and durability.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Atomicity = All operations will either succeed or fail together.&lt;/li&gt;
  &lt;li&gt;Consistency = All changes made by operations are consistent with database constraints or meet the schema validation rules.&lt;/li&gt;
  &lt;li&gt;Isolation = Multiple transactions can happen at the same time without affecting the outcome of other transaction.&lt;/li&gt;
  &lt;li&gt;Durability = All of the changes that are made by operations in a transaction will persist, no matter what.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-do-we-use-indexing&quot;&gt;Why do we use indexing?&lt;/h3&gt;

&lt;p&gt;Indexing in MongoDB is a powerful feature that enhances the efficiency of query operations by allowing the database to quickly locate and access the data needed without scanning the entire collection. This can significantly improve query performance, especially in large datasets.&lt;/p&gt;

&lt;h3 id=&quot;benefits-of-indexing-in-mongodb&quot;&gt;Benefits of Indexing in MongoDB:&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Improved Query Performance: Indexes allow MongoDB to search for records more quickly by narrowing down the search space. Instead of scanning the entire collection, the database can directly access the indexed fields, resulting in faster query execution.&lt;/li&gt;
  &lt;li&gt;Reduced Resource Consumption: Efficient indexing reduces the CPU and memory load on the database server by minimizing the amount of data that needs to be processed during queries.&lt;/li&gt;
  &lt;li&gt;Enhanced Sorting: Indexes can also improve the performance of sort operations. If a query requests data in a sorted order based on an indexed field, MongoDB can retrieve the data in the desired order without additional sorting, saving time and resources.&lt;/li&gt;
  &lt;li&gt;Faster Data Aggregation: Indexes can accelerate the performance of aggregation operations that involve filtering or sorting, allowing for quicker insights and data analysis.&lt;/li&gt;
  &lt;li&gt;Support for Unique Constraints: MongoDB indexes can enforce unique constraints, ensuring that a particular field or combination of fields in a collection is unique across all documents. This is useful for maintaining data integrity, such as ensuring unique email addresses in a user collection.&lt;/li&gt;
  &lt;li&gt;Geospatial Queries: MongoDB supports geospatial indexes, enabling efficient querying of location-based data. This is beneficial for applications that involve mapping, geolocation services, or any feature requiring spatial data processing.&lt;/li&gt;
  &lt;li&gt;Text Search Optimization: MongoDB offers text indexes that optimize the performance of text search queries, allowing for efficient full-text search within documents.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;how-indexing-is-done-in-mongodb&quot;&gt;How Indexing is Done in MongoDB:&lt;/h3&gt;
&lt;p&gt;Creating and managing indexes in MongoDB is straightforward. Here’s how you can do it:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Single Field Index: The simplest form of an index is a single field index, which is created on a specific field in a collection. This is useful for queries that frequently filter or sort based on this field.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/createIndex.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1 specifies ascending order, while -1 would specify descending order.&lt;/p&gt;

&lt;p&gt;When we query a database, instead of searching through all its documents, we can just search through this index. This saves time by searching in fewer places. However, if we have creates too many different indices, we may lose out especially we need to update them as well whenever we updates the underlying documents. Each update requires a write operation on the index too.&lt;/p&gt;

&lt;p&gt;So, we may want to let an index expire on its own after some time.&lt;/p&gt;

&lt;p&gt;TTL Index: A Time-To-Live (TTL) index can automatically remove documents from a collection after a certain period. 
db.collection.createIndex({ createdAt: 1 }, { expireAfterSeconds: 3600 })&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Trick 1: create index that can be used to speed up the search. We create an index based on frequently observed queries on some of the fields. Then when we query, if  its corresponding index exists, the search will automatically use it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Trick 2: indexing order matters.  A rule of thumb is that we filter or use Boolean selection to reduce the number of documents or results as early as feasible. Then we perform more complicated / expensive operations, such as sorting.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;index-management&quot;&gt;Index management&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* How to examine what indices built in the database so far?
* What happen if we are searching on the fields that have no index?
* How to remove redundant index?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s take a look with the explain method that delineates how MongoDB performs searches. Without an index is not going to stymie the search progress. MongoDB has different mode for finding the subset of documents that match the queries.&lt;/p&gt;

&lt;p&gt;COLLSCAN: collection scan is performed, without accessing the index&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/explain_collscan.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IXSCAN: indicate whether query uses index or not
FETCH: read the documents
SORT: sort the search results in memory&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/explain_ixscan.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Trick: when we are only after some specific fields, we can use projection to display only the relevant fields and hide others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/projection_ex_index.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/explain_projection.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, we can turn a single field index into multiple fields index (aka compound index) to make searching more than one field more efficient. However, the order of the items in the field matters to the efficiency, but not search results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/compound_index.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This MongoDB tutorial does not recommend users to delete indices when they become obsolete. This is because we often can delete the index that we still need. Instead of deleting it, we can just hide the index from use and check to see if anything else breaks as a result.&lt;/p&gt;

&lt;p&gt;Delete = dropIndex
hide index = hideIndex&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/hide.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/delete.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;commonly-used-apis&quot;&gt;Commonly Used APIs&lt;/h3&gt;

&lt;p&gt;We can use different filters . The chose of filters depend on the data type of the field that we are looking at.&lt;/p&gt;

&lt;p&gt;If it is just a plain and simple string, integer, float, double, etc, we can use pretty much anything.&lt;/p&gt;

&lt;h5 id=&quot;logical-operators&quot;&gt;Logical operators&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/andOr.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some field contain arrays. Arrays are data structure that inside itself, contains data or elements. If we want to search inside an array, we need to do this.&lt;/p&gt;

&lt;p&gt;We use the operator called elemMatch that looks up &lt;strong&gt;multiple fields and across every elements / all elements&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/elemMatch.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/elemMatch_elements.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/insertOne.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Many&lt;/strong&gt; belongs to the family of bulk-write-method. It accesses multiple documents at once, with the benefit of reducing the number of round trips to the server and improved efficiency.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/updateOne.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/updateOne_Code.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/upsert_q.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we cannot find a document, we can create it with the desired fields by turning the upsert=True&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Array&lt;/strong&gt; is a special data structure, so we use push to append a new element to the array of existing elements.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/updateMany.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/updateManyCode.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we can also use findAndModify to perform an update operation. This is helpful for keep track of statistics such as counts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/findAndModify.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/replaceOne.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NOTE: when input to the APIs is null / empty, the functions perform like we are working on all documents. CountDocuments counts all documents. DeleteMany deletes all documents. Find finds all documents.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/countDocuments.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;referencing&quot;&gt;Referencing&lt;/h3&gt;

&lt;p&gt;In MongoDB, we have two options for referencing. The first is embedding. Embedding duplicates the data entries such that each document is complete. The pros are we do not need to look elsewhere for the information, and it is fast. The cons are we can end up with a very large document with many redundancy. The second is referencing. Referencing does not duplicate the data, but it adds a OBJECTID in the document and we can search and link to the other documents to locate the information. However, this means that we search more slowly, and through more documents. But the document itself are smaller, without duplicate of information, easier to update and maintain proper records. Referencing is also closely related to the concept of data normalization.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/ref.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/refTypes.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;atomicity&quot;&gt;Atomicity&lt;/h3&gt;

&lt;p&gt;Whenever we are working with multiple documents, we can use session to ensure atomicity.
For example, we like to transfer money from accouter holder A to account holder B, this transfer involves the deduction from A and the increment of B. we want to ensure that both operations succeed together or fail together, but not one succeeded and the other failed (for instance, money taken out from A but not put back in B).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/session.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-is-aggregates&quot;&gt;What is aggregates?&lt;/h3&gt;

&lt;p&gt;In MongoDB, the concept of &lt;strong&gt;aggregation&lt;/strong&gt; refers to the process of processing data records and returning computed results. Aggregation operations group values from multiple documents together and can perform a variety of operations on the grouped data to return a single result. Aggregations are similar to SQL’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GROUP BY&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JOIN&lt;/code&gt; operations, but they are more powerful and flexible.&lt;/p&gt;

&lt;h3 id=&quot;key-concepts-of-aggregation-in-mongodb&quot;&gt;Key Concepts of Aggregation in MongoDB&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Aggregation Pipeline:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The aggregation framework uses a concept called the “aggregation pipeline,” which is a series of stages that process the data. Each stage performs an operation on the input documents and passes the result to the next stage.&lt;/li&gt;
      &lt;li&gt;The pipeline operates in a sequence, where the output of one stage becomes the input to the next.&lt;/li&gt;
      &lt;li&gt;Example of an aggregation pipeline:
        &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;db.orders.aggregate(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$match:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;status:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shipped&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Stage&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;documents&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$group:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;_id:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$customerId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;total:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$sum:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$amount&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Stage&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$sort:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;total:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Stage&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;descending&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stages in the Aggregation Pipeline:&lt;/strong&gt;
&lt;strong&gt;$match:&lt;/strong&gt; Filters the documents to pass only those that match the specified conditions. Similar to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; clause in SQL.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/match.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$group:&lt;/strong&gt; Groups documents by a specified identifier (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_id&lt;/code&gt;) and applies an aggregation function to the grouped data (e.g., sum, average). Similar to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GROUP BY&lt;/code&gt; clause in SQL.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/group.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$sort:&lt;/strong&gt; Sorts the documents based on the specified field(s) and order (ascending or descending).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/sort.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$project:&lt;/strong&gt; Reshapes each document in the stream, adding, removing, or transforming fields.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/project.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$limit:&lt;/strong&gt; Limits the number of documents that are passed through the pipeline.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/limit.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;$skip:&lt;/strong&gt; Skips a specified number of documents, often used in conjunction with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$limit&lt;/code&gt; to implement pagination.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;$unwind:&lt;/strong&gt; Deconstructs an array field from the input documents to output a document for each element of the array. It is useful for dealing with arrays within documents.
&lt;strong&gt;$lookup:&lt;/strong&gt; Performs a left outer join to another collection in the same database to combine data from multiple sources, similar to SQL’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JOIN&lt;/code&gt; operation.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;$Set:&lt;/strong&gt; Insert or modify the values of a field.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/set.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Aggregation Expressions:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Aggregation stages often include expressions to perform operations on fields, such as arithmetic, string manipulation, and conditional logic.
Example: In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$group&lt;/code&gt; stage, you might use Accumulator such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$sum&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$avg&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$max&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$min&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$count&lt;/code&gt;,etc., to perform calculations on grouped documents.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/count.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Example Scenarios:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Calculate Total Sales by Product:&lt;/strong&gt;
        &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;db.sales.aggregate(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$group:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;_id:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$productId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;totalSales:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$sum:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$amount&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;This query groups sales records by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;productId&lt;/code&gt; and calculates the total sales for each product.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Find Top 5 Products by Sales:&lt;/strong&gt;
        &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;db.sales.aggregate(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$group:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;_id:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$productId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;totalSales:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$sum:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$amount&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$sort:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;totalSales:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$limit:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;This pipeline groups sales by product, sorts them in descending order by total sales, and returns the top 5 products.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Save the new collections&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;$merge:&lt;/strong&gt; Allows the output of an aggregation pipeline to be written to a collection, either by replacing existing documents or merging the results.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;$out:&lt;/strong&gt; Directly writes the results of an aggregation pipeline to a new collection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/aggregateCode.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aggregation is a a way to create new collections from existing collections of documents or by modifying them. It is very useful for create a sub-set of documents as a new collections for subsequent analysis.&lt;/p&gt;

&lt;h3 id=&quot;comparison-operators&quot;&gt;Comparison Operators&lt;/h3&gt;

&lt;p&gt;In MongoDB, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$gt&lt;/code&gt; is a query operator that stands for “greater than.” It is used to compare a field’s value with a specified value and returns documents where the field’s value is greater than the specified value.&lt;/p&gt;

&lt;h3 id=&quot;syntax&quot;&gt;Syntax:&lt;/h3&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;field:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$gt:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;field:&lt;/strong&gt; The field in the document you want to compare.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;value:&lt;/strong&gt; The value that the field’s value must be greater than to match the document.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example&quot;&gt;Example:&lt;/h3&gt;

&lt;p&gt;Suppose you have a collection called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;products&lt;/code&gt; with documents that look like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Laptop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1200&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Phone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tablet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To find all products with a price greater than 800, you would use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$gt&lt;/code&gt; operator like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;db.products.find(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;price:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$gt:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This query would return:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Laptop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1200&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, only the document with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;price&lt;/code&gt; of 1200 is returned because it is the only document where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;price&lt;/code&gt; is greater than 800.&lt;/p&gt;

&lt;p&gt;In MongoDB, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$lt&lt;/code&gt; is a query operator that stands for “less than.” It is used to compare a field’s value with a specified value and returns documents where the field’s value is less than the specified value.&lt;/p&gt;

&lt;h3 id=&quot;syntax-1&quot;&gt;Syntax:&lt;/h3&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;field:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$lt:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;field:&lt;/strong&gt; The field in the document you want to compare.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;value:&lt;/strong&gt; The value that the field’s value must be less than to match the document.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example-1&quot;&gt;Example:&lt;/h3&gt;

&lt;p&gt;Suppose you have a collection called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;products&lt;/code&gt; with documents that look like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Laptop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1200&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Phone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tablet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To find all products with a price less than 800, you would use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$lt&lt;/code&gt; operator like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;db.products.find(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;price:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$lt:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This query would return:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tablet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, only the document with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;price&lt;/code&gt; of 600 is returned because it is the only document where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;price&lt;/code&gt; is less than 800.&lt;/p&gt;

&lt;p&gt;In MongoDB, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$lte&lt;/code&gt; is a query operator that stands for “less than or equal to.” It is used to compare a field’s value with a specified value and returns documents where the field’s value is less than or equal to the specified value.&lt;/p&gt;

&lt;h3 id=&quot;syntax-2&quot;&gt;Syntax:&lt;/h3&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;field:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$lte:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;field:&lt;/strong&gt; The field in the document you want to compare.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;value:&lt;/strong&gt; The value that the field’s value must be less than or equal to in order to match the document.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example-2&quot;&gt;Example:&lt;/h3&gt;

&lt;p&gt;Suppose you have a collection called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;products&lt;/code&gt; with documents like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Laptop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1200&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Phone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tablet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To find all products with a price less than or equal to 800, you would use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$lte&lt;/code&gt; operator like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;db.products.find(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;price:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$lte:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This query would return:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Phone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tablet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, the documents with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;price&lt;/code&gt; of 800 and 600 are returned because both prices are less than or equal to 800.&lt;/p&gt;

&lt;p&gt;In MongoDB, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$gte&lt;/code&gt; is a query operator that stands for “greater than or equal to.” It is used to compare a field’s value with a specified value and returns documents where the field’s value is greater than or equal to the specified value.&lt;/p&gt;

&lt;h3 id=&quot;syntax-3&quot;&gt;Syntax:&lt;/h3&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;field:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$gte:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;field:&lt;/strong&gt; The field in the document you want to compare.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;value:&lt;/strong&gt; The value that the field’s value must be greater than or equal to in order to match the document.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example-3&quot;&gt;Example:&lt;/h3&gt;

&lt;p&gt;Suppose you have a collection called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;products&lt;/code&gt; with documents like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Laptop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1200&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Phone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tablet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To find all products with a price greater than or equal to 800, you would use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$gte&lt;/code&gt; operator like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;db.products.find(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;price:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$gte:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This query would return:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Laptop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1200&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Phone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, the documents with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;price&lt;/code&gt; of 1200 and 800 are returned because both prices are greater than or equal to 800.&lt;/p&gt;

&lt;p&gt;In MongoDB, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$in&lt;/code&gt; operator is used to match documents where the value of a field equals any value in a specified array. It is equivalent to the SQL &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IN&lt;/code&gt; operator.&lt;/p&gt;

&lt;h3 id=&quot;syntax-4&quot;&gt;Syntax:&lt;/h3&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;field:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$in:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;field:&lt;/strong&gt; The field in the document that you want to check.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;value1, value2, …:&lt;/strong&gt; The values that you want to match against the field. If the field’s value matches any of these values, the document will be included in the results.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example-4&quot;&gt;Example:&lt;/h3&gt;

&lt;p&gt;Suppose you have a collection called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;products&lt;/code&gt; with documents like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Laptop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Electronics&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Desk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Furniture&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Phone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Electronics&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Chair&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Furniture&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to find all products that belong to either the “Electronics” or “Furniture” category, you would use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$in&lt;/code&gt; operator like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;db.products.find(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;category:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$in:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Electronics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Furniture&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This query would return all documents where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;category&lt;/code&gt; field is either “Electronics” or “Furniture”:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Laptop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Electronics&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Desk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Furniture&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Phone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Electronics&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Chair&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Furniture&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;use-cases&quot;&gt;Use Cases:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Filtering by Multiple Values:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$in&lt;/code&gt; is useful when you want to filter documents that can match any value within a specified list. For example, finding all users with specific roles or all orders with certain statuses.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Checking Membership in an Array:&lt;/strong&gt; If a field contains an array, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$in&lt;/code&gt; can be used to check if any element of the array matches one of the specified values.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;key-points&quot;&gt;Key Points:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;If the field contains an array, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$in&lt;/code&gt; checks if any of the elements in the array match any of the values in the specified array.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$in&lt;/code&gt; can be used with both scalar values (e.g., strings, numbers) and arrays within documents.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$in&lt;/code&gt; operator is a powerful tool for querying documents with multiple potential matching criteria, making it easier to handle complex filtering conditions in MongoDB queries.&lt;/p&gt;</content><author><name>Wilson Fok</name></author><category term="Others" /><summary type="html">Dear readers, This is my introductory course on some basic concepts on database, searches, and optimization. MongoDB is a NoSQL database that stores data in flexible, JSON-like documents, rather than the traditional table-based relational database structure. This allows for more dynamic schemas, where fields can vary between documents, and data can be nested in complex hierarchies. ###Key Features of MongoDB: Document-Oriented Storage: MongoDB stores data in BSON (binary JSON) format, which means data can be represented in a rich, hierarchical structure. This makes it more adaptable to changing data models. What is a data model? Conceptual data models These model types provide a high-level, conceptual view of your data. They identify key entities—like customers, products, orders, and payments—and show how these entities relate to each other. This model is designed to help business stakeholders understand how different parts of the data interact without diving into technical details. Example: For a retail company, a conceptual data model might include categories like customers, products, orders, and payments. The relationships between these categories would be mapped out visually to help stakeholders see how the data from different parts of the business interact without getting into specifics like data types or storage methods. Logical data models Logical data models build on the conceptual model by adding more detail. They define the data elements, their attributes, and the relationships between them in a way that aligns more closely with how the data will be implemented in a database. This model bridges the gap between business needs and technical design, making it easier for IT teams to plan the database structure. Example: Continuing with the retail company example, a logical data model would define specific attributes for each category defined in the conceptual model. For instance, the customer category might include attributes like customer ID, name, email, and address. The order category could include details like order ID, order date, customer ID, and total amount. This additional detail translates business concepts into a structured database design, though it doesn’t yet address the physical aspects. Physical data models (Electronic) Physical data models provide the most detail. They take the logical model and turn it into a specific framework for storing and managing the data within a particular database system. This includes defining the structure of tables, the types of data that will be stored in each column, and how the data will be indexed and accessed. The physical model optimizes the database for performance and maintains accurate data relationships. Example: For our hypothetical retail company, the physical data model would translate the logical model into a concrete database design. The customer category might become a table named “Customers,” with fields for customer information like ID, name, email, and address. Similarly, the order category would be “Orders,” containing details like order date, customer ID, and total amount. The physical model also defines how these tables interact within the database to ensure efficient data retrieval and integrity. Scalability: MongoDB is designed to scale horizontally, which means you can distribute data across multiple servers. This is especially useful for handling large volumes of data and high traffic loads. Flexibility: Unlike traditional relational databases that require a predefined schema, MongoDB allows for flexible schemas (mixture of different data variable types, inconsistent number of fields, etc), making it easier to handle data that doesn’t fit neatly into a predefined structure. High Performance: MongoDB is optimized for read and write performance, and it supports indexing and querying that can improve data access speeds. Distributed Database: MongoDB is built for distributed systems, with features like replication, sharding (splitting a large database into smaller partitions and storing them in various locations), and automatic failover, making it highly resilient and available. Aggregation Framework: MongoDB provides a powerful aggregation framework that allows for complex data processing and transformation directly within the database. Integration with Modern Development Stacks: MongoDB integrates well with many modern development environments, including JavaScript, Python, and Node.js, making it popular among developers building web applications. ###Why MongoDB is Popular: Ease of Use: MongoDB’s flexible document model is more aligned with how developers think about data, especially in web and mobile applications. This makes it easier to use and faster to develop with compared to traditional relational databases. Scalability: As data grows, MongoDB’s ability to scale horizontally by adding more servers allows businesses to manage large datasets without significant performance degradation. Flexible Schema: The ability to store various data types and structures in the same collection without needing to define a strict schema upfront makes MongoDB ideal for rapidly evolving applications. Strong Community and Ecosystem: MongoDB has a large and active community, extensive documentation, and a wide range of tools and integrations, making it a popular choice for developers and companies. Cloud-Native: MongoDB Atlas, the cloud version of MongoDB, offers a managed service that abstracts away the complexities of database management, making it easier for developers to deploy and scale databases in the cloud. Support for Big Data and Real-Time Applications: MongoDB’s performance characteristics and scalability make it well-suited for big data applications, real-time analytics, and other modern use cases where traditional databases may struggle. MongoDB’s combination of flexibility, performance, and scalability has made it one of the most popular NoSQL databases, especially in environments where developers need to move quickly and handle large, complex datasets. I have read through its documentation and tutorials on MongoDB website (https://www.mongodb.com/). They are well-suited for beginners like myself and offer MongoDB University courses for free. Some basic differences between MongoDB (NoSQL) vs SQL database SQL is very fast for lookup, and for adding new rows, which makes it very suitable for a situation where we need to often add and remove new samples. However, its schema is rigid. In other words, its columns are preset, so adding or removing a field can be tricky. Also, its schema can only handle single variable type within a field, which means it can be less flexible. On the other hand, MongoDB lets us mix multiple variable types in the same field or add or remove new columns, with each entry can have different number of fields. Apart from the standard integer, string, double, MongoDB uses unique variable types. For example, ID Key, ISODATE, etc. Each sample is a document. Many related or similar documents grouped together are called a collection. Many related or similar collections grouped together are called a database and putting several databases together are called a cluster. It can scale easily. Despite its flexibility, MongoDB can enforce constraints on its schema and validate its documents against its constraints. How MongoDB handles relationships? In MongoDB, we have 3 different ways to combine a key (unique) to a value (information). The first way is one-to-one. This is most useful when we need to look up a unique record. Say we identify this particular record with its own unique id that is automatically generated when we insert it into a database. The second way is one-to-many. This is most useful when we have multiply items inside an array for a field. We can search through them. For example, a single record possesses multiple tags or labels. The last way is many-to-many. It is very paramount that we understand the purpose and the functional requirements of database. The four functional pillars of a good database are atomicity, consistency, isolation and durability. Atomicity = All operations will either succeed or fail together. Consistency = All changes made by operations are consistent with database constraints or meet the schema validation rules. Isolation = Multiple transactions can happen at the same time without affecting the outcome of other transaction. Durability = All of the changes that are made by operations in a transaction will persist, no matter what. Why do we use indexing? Indexing in MongoDB is a powerful feature that enhances the efficiency of query operations by allowing the database to quickly locate and access the data needed without scanning the entire collection. This can significantly improve query performance, especially in large datasets. Benefits of Indexing in MongoDB: Improved Query Performance: Indexes allow MongoDB to search for records more quickly by narrowing down the search space. Instead of scanning the entire collection, the database can directly access the indexed fields, resulting in faster query execution. Reduced Resource Consumption: Efficient indexing reduces the CPU and memory load on the database server by minimizing the amount of data that needs to be processed during queries. Enhanced Sorting: Indexes can also improve the performance of sort operations. If a query requests data in a sorted order based on an indexed field, MongoDB can retrieve the data in the desired order without additional sorting, saving time and resources. Faster Data Aggregation: Indexes can accelerate the performance of aggregation operations that involve filtering or sorting, allowing for quicker insights and data analysis. Support for Unique Constraints: MongoDB indexes can enforce unique constraints, ensuring that a particular field or combination of fields in a collection is unique across all documents. This is useful for maintaining data integrity, such as ensuring unique email addresses in a user collection. Geospatial Queries: MongoDB supports geospatial indexes, enabling efficient querying of location-based data. This is beneficial for applications that involve mapping, geolocation services, or any feature requiring spatial data processing. Text Search Optimization: MongoDB offers text indexes that optimize the performance of text search queries, allowing for efficient full-text search within documents. How Indexing is Done in MongoDB: Creating and managing indexes in MongoDB is straightforward. Here’s how you can do it: Single Field Index: The simplest form of an index is a single field index, which is created on a specific field in a collection. This is useful for queries that frequently filter or sort based on this field. 1 specifies ascending order, while -1 would specify descending order. When we query a database, instead of searching through all its documents, we can just search through this index. This saves time by searching in fewer places. However, if we have creates too many different indices, we may lose out especially we need to update them as well whenever we updates the underlying documents. Each update requires a write operation on the index too. So, we may want to let an index expire on its own after some time. TTL Index: A Time-To-Live (TTL) index can automatically remove documents from a collection after a certain period. db.collection.createIndex({ createdAt: 1 }, { expireAfterSeconds: 3600 }) Trick 1: create index that can be used to speed up the search. We create an index based on frequently observed queries on some of the fields. Then when we query, if its corresponding index exists, the search will automatically use it. Trick 2: indexing order matters. A rule of thumb is that we filter or use Boolean selection to reduce the number of documents or results as early as feasible. Then we perform more complicated / expensive operations, such as sorting. Index management * How to examine what indices built in the database so far? * What happen if we are searching on the fields that have no index? * How to remove redundant index? Let’s take a look with the explain method that delineates how MongoDB performs searches. Without an index is not going to stymie the search progress. MongoDB has different mode for finding the subset of documents that match the queries. COLLSCAN: collection scan is performed, without accessing the index IXSCAN: indicate whether query uses index or not FETCH: read the documents SORT: sort the search results in memory Trick: when we are only after some specific fields, we can use projection to display only the relevant fields and hide others. Furthermore, we can turn a single field index into multiple fields index (aka compound index) to make searching more than one field more efficient. However, the order of the items in the field matters to the efficiency, but not search results. This MongoDB tutorial does not recommend users to delete indices when they become obsolete. This is because we often can delete the index that we still need. Instead of deleting it, we can just hide the index from use and check to see if anything else breaks as a result. Delete = dropIndex hide index = hideIndex Commonly Used APIs We can use different filters . The chose of filters depend on the data type of the field that we are looking at. If it is just a plain and simple string, integer, float, double, etc, we can use pretty much anything. Logical operators Some field contain arrays. Arrays are data structure that inside itself, contains data or elements. If we want to search inside an array, we need to do this. We use the operator called elemMatch that looks up multiple fields and across every elements / all elements. Many belongs to the family of bulk-write-method. It accesses multiple documents at once, with the benefit of reducing the number of round trips to the server and improved efficiency. If we cannot find a document, we can create it with the desired fields by turning the upsert=True Array is a special data structure, so we use push to append a new element to the array of existing elements. we can also use findAndModify to perform an update operation. This is helpful for keep track of statistics such as counts. NOTE: when input to the APIs is null / empty, the functions perform like we are working on all documents. CountDocuments counts all documents. DeleteMany deletes all documents. Find finds all documents. Referencing In MongoDB, we have two options for referencing. The first is embedding. Embedding duplicates the data entries such that each document is complete. The pros are we do not need to look elsewhere for the information, and it is fast. The cons are we can end up with a very large document with many redundancy. The second is referencing. Referencing does not duplicate the data, but it adds a OBJECTID in the document and we can search and link to the other documents to locate the information. However, this means that we search more slowly, and through more documents. But the document itself are smaller, without duplicate of information, easier to update and maintain proper records. Referencing is also closely related to the concept of data normalization. Atomicity Whenever we are working with multiple documents, we can use session to ensure atomicity. For example, we like to transfer money from accouter holder A to account holder B, this transfer involves the deduction from A and the increment of B. we want to ensure that both operations succeed together or fail together, but not one succeeded and the other failed (for instance, money taken out from A but not put back in B). What is aggregates? In MongoDB, the concept of aggregation refers to the process of processing data records and returning computed results. Aggregation operations group values from multiple documents together and can perform a variety of operations on the grouped data to return a single result. Aggregations are similar to SQL’s GROUP BY and JOIN operations, but they are more powerful and flexible. Key Concepts of Aggregation in MongoDB Aggregation Pipeline: The aggregation framework uses a concept called the “aggregation pipeline,” which is a series of stages that process the data. Each stage performs an operation on the input documents and passes the result to the next stage. The pipeline operates in a sequence, where the output of one stage becomes the input to the next. Example of an aggregation pipeline: db.orders.aggregate([ { $match: { status: &quot;shipped&quot; } }, // Stage 1: Filter documents { $group: { _id: &quot;$customerId&quot;, total: { $sum: &quot;$amount&quot; } } }, // Stage 2: Group and calculate total amount { $sort: { total: -1 } } // Stage 3: Sort by total amount in descending order ]) Stages in the Aggregation Pipeline: $match: Filters the documents to pass only those that match the specified conditions. Similar to the WHERE clause in SQL. $group: Groups documents by a specified identifier (_id) and applies an aggregation function to the grouped data (e.g., sum, average). Similar to the GROUP BY clause in SQL. $sort: Sorts the documents based on the specified field(s) and order (ascending or descending). $project: Reshapes each document in the stream, adding, removing, or transforming fields. $limit: Limits the number of documents that are passed through the pipeline. $skip: Skips a specified number of documents, often used in conjunction with $limit to implement pagination. $unwind: Deconstructs an array field from the input documents to output a document for each element of the array. It is useful for dealing with arrays within documents. $lookup: Performs a left outer join to another collection in the same database to combine data from multiple sources, similar to SQL’s JOIN operation. $Set: Insert or modify the values of a field. Aggregation Expressions: Aggregation stages often include expressions to perform operations on fields, such as arithmetic, string manipulation, and conditional logic. Example: In the $group stage, you might use Accumulator such as $sum, $avg, $max, $min, $count,etc., to perform calculations on grouped documents. Example Scenarios: Calculate Total Sales by Product: db.sales.aggregate([ { $group: { _id: &quot;$productId&quot;, totalSales: { $sum: &quot;$amount&quot; } } } ]) This query groups sales records by productId and calculates the total sales for each product. Find Top 5 Products by Sales: db.sales.aggregate([ { $group: { _id: &quot;$productId&quot;, totalSales: { $sum: &quot;$amount&quot; } } }, { $sort: { totalSales: -1 } }, { $limit: 5 } ]) This pipeline groups sales by product, sorts them in descending order by total sales, and returns the top 5 products. Save the new collections $merge: Allows the output of an aggregation pipeline to be written to a collection, either by replacing existing documents or merging the results. $out: Directly writes the results of an aggregation pipeline to a new collection. Aggregation is a a way to create new collections from existing collections of documents or by modifying them. It is very useful for create a sub-set of documents as a new collections for subsequent analysis. Comparison Operators In MongoDB, $gt is a query operator that stands for “greater than.” It is used to compare a field’s value with a specified value and returns documents where the field’s value is greater than the specified value. Syntax: { field: { $gt: value } } field: The field in the document you want to compare. value: The value that the field’s value must be greater than to match the document. Example: Suppose you have a collection called products with documents that look like this: { &quot;_id&quot;: 1, &quot;name&quot;: &quot;Laptop&quot;, &quot;price&quot;: 1200 }, { &quot;_id&quot;: 2, &quot;name&quot;: &quot;Phone&quot;, &quot;price&quot;: 800 }, { &quot;_id&quot;: 3, &quot;name&quot;: &quot;Tablet&quot;, &quot;price&quot;: 600 } To find all products with a price greater than 800, you would use the $gt operator like this: db.products.find({ price: { $gt: 800 } }) This query would return: { &quot;_id&quot;: 1, &quot;name&quot;: &quot;Laptop&quot;, &quot;price&quot;: 1200 } In this example, only the document with the price of 1200 is returned because it is the only document where the price is greater than 800. In MongoDB, $lt is a query operator that stands for “less than.” It is used to compare a field’s value with a specified value and returns documents where the field’s value is less than the specified value. Syntax: { field: { $lt: value } } field: The field in the document you want to compare. value: The value that the field’s value must be less than to match the document. Example: Suppose you have a collection called products with documents that look like this: { &quot;_id&quot;: 1, &quot;name&quot;: &quot;Laptop&quot;, &quot;price&quot;: 1200 }, { &quot;_id&quot;: 2, &quot;name&quot;: &quot;Phone&quot;, &quot;price&quot;: 800 }, { &quot;_id&quot;: 3, &quot;name&quot;: &quot;Tablet&quot;, &quot;price&quot;: 600 } To find all products with a price less than 800, you would use the $lt operator like this: db.products.find({ price: { $lt: 800 } }) This query would return: { &quot;_id&quot;: 3, &quot;name&quot;: &quot;Tablet&quot;, &quot;price&quot;: 600 } In this example, only the document with the price of 600 is returned because it is the only document where the price is less than 800. In MongoDB, $lte is a query operator that stands for “less than or equal to.” It is used to compare a field’s value with a specified value and returns documents where the field’s value is less than or equal to the specified value. Syntax: { field: { $lte: value } } field: The field in the document you want to compare. value: The value that the field’s value must be less than or equal to in order to match the document. Example: Suppose you have a collection called products with documents like this: { &quot;_id&quot;: 1, &quot;name&quot;: &quot;Laptop&quot;, &quot;price&quot;: 1200 }, { &quot;_id&quot;: 2, &quot;name&quot;: &quot;Phone&quot;, &quot;price&quot;: 800 }, { &quot;_id&quot;: 3, &quot;name&quot;: &quot;Tablet&quot;, &quot;price&quot;: 600 } To find all products with a price less than or equal to 800, you would use the $lte operator like this: db.products.find({ price: { $lte: 800 } }) This query would return: { &quot;_id&quot;: 2, &quot;name&quot;: &quot;Phone&quot;, &quot;price&quot;: 800 }, { &quot;_id&quot;: 3, &quot;name&quot;: &quot;Tablet&quot;, &quot;price&quot;: 600 } In this example, the documents with the price of 800 and 600 are returned because both prices are less than or equal to 800. In MongoDB, $gte is a query operator that stands for “greater than or equal to.” It is used to compare a field’s value with a specified value and returns documents where the field’s value is greater than or equal to the specified value. Syntax: { field: { $gte: value } } field: The field in the document you want to compare. value: The value that the field’s value must be greater than or equal to in order to match the document. Example: Suppose you have a collection called products with documents like this: { &quot;_id&quot;: 1, &quot;name&quot;: &quot;Laptop&quot;, &quot;price&quot;: 1200 }, { &quot;_id&quot;: 2, &quot;name&quot;: &quot;Phone&quot;, &quot;price&quot;: 800 }, { &quot;_id&quot;: 3, &quot;name&quot;: &quot;Tablet&quot;, &quot;price&quot;: 600 } To find all products with a price greater than or equal to 800, you would use the $gte operator like this: db.products.find({ price: { $gte: 800 } }) This query would return: { &quot;_id&quot;: 1, &quot;name&quot;: &quot;Laptop&quot;, &quot;price&quot;: 1200 }, { &quot;_id&quot;: 2, &quot;name&quot;: &quot;Phone&quot;, &quot;price&quot;: 800 } In this example, the documents with the price of 1200 and 800 are returned because both prices are greater than or equal to 800. In MongoDB, the $in operator is used to match documents where the value of a field equals any value in a specified array. It is equivalent to the SQL IN operator. Syntax: { field: { $in: [ value1, value2, ... ] } } field: The field in the document that you want to check. value1, value2, …: The values that you want to match against the field. If the field’s value matches any of these values, the document will be included in the results. Example: Suppose you have a collection called products with documents like this: { &quot;_id&quot;: 1, &quot;name&quot;: &quot;Laptop&quot;, &quot;category&quot;: &quot;Electronics&quot; }, { &quot;_id&quot;: 2, &quot;name&quot;: &quot;Desk&quot;, &quot;category&quot;: &quot;Furniture&quot; }, { &quot;_id&quot;: 3, &quot;name&quot;: &quot;Phone&quot;, &quot;category&quot;: &quot;Electronics&quot; }, { &quot;_id&quot;: 4, &quot;name&quot;: &quot;Chair&quot;, &quot;category&quot;: &quot;Furniture&quot; } If you want to find all products that belong to either the “Electronics” or “Furniture” category, you would use the $in operator like this: db.products.find({ category: { $in: [&quot;Electronics&quot;, &quot;Furniture&quot;] } }) This query would return all documents where the category field is either “Electronics” or “Furniture”: { &quot;_id&quot;: 1, &quot;name&quot;: &quot;Laptop&quot;, &quot;category&quot;: &quot;Electronics&quot; }, { &quot;_id&quot;: 2, &quot;name&quot;: &quot;Desk&quot;, &quot;category&quot;: &quot;Furniture&quot; }, { &quot;_id&quot;: 3, &quot;name&quot;: &quot;Phone&quot;, &quot;category&quot;: &quot;Electronics&quot; }, { &quot;_id&quot;: 4, &quot;name&quot;: &quot;Chair&quot;, &quot;category&quot;: &quot;Furniture&quot; } Use Cases: Filtering by Multiple Values: $in is useful when you want to filter documents that can match any value within a specified list. For example, finding all users with specific roles or all orders with certain statuses. Checking Membership in an Array: If a field contains an array, $in can be used to check if any element of the array matches one of the specified values. Key Points: If the field contains an array, $in checks if any of the elements in the array match any of the values in the specified array. $in can be used with both scalar values (e.g., strings, numbers) and arrays within documents. The $in operator is a powerful tool for querying documents with multiple potential matching criteria, making it easier to handle complex filtering conditions in MongoDB queries.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/Mongodb/taxonomy_facet_example.png" /><media:content medium="image" url="/assets/images/Mongodb/taxonomy_facet_example.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Seize the day</title><link href="/toastmasters/2024/09/25/second_speech/" rel="alternate" type="text/html" title="Seize the day" /><published>2024-09-25T00:00:00+08:00</published><updated>2024-09-25T00:00:00+08:00</updated><id>/toastmasters/2024/09/25/second_speech</id><content type="html" xml:base="/toastmasters/2024/09/25/second_speech/">&lt;h1 id=&quot;title-seize-the-day--carpe-diem&quot;&gt;Title: Seize the day / Carpe diem&lt;/h1&gt;

&lt;p&gt;Dear fellow toastmasters and guest,&lt;/p&gt;

&lt;p&gt;[opening]
I have looked up the phase“seize the day” in a dictionary. It means to take the opportunity to do something at the present moment without worrying about the future.&lt;/p&gt;

&lt;p&gt;I would elaborate it a bit further. A great opportunity does not come often and can only be seized within a short moment of time. 
When we take the opportunity to follow our passion and desires, we can live a more fulfilling and meaningful life.If seizing the day is as promising as it sounds, why people don’t just go ahead and “seize the day” ?&lt;/p&gt;

&lt;p&gt;Well, we are not entirely free. Perhaps, we sometimes are not aware of what is possible. Even when we know our possibility, we worry about taking  the wrong steps. We tend to avoid losses at the expense of gain, and incline to resist change until a crisis is here. Finally , we hate ourselves for draining our energy this way.&lt;/p&gt;

&lt;p&gt;[Transition] Let me share with you my own personal journey I embarked when I seized my day and the lessons I took away from it.&lt;/p&gt;

&lt;p&gt;[Background]&lt;/p&gt;

&lt;p&gt;In 2018, I applied for a programming job at a startup company in Singapore. After passing two rounds of interviews, I got the offer, but with strings attached. The startup was in the process of relocating from Singapore to Beijing, so the boss wanted me to work in Beijing instead. There I was, facing an opportunity, should I seize it or should I let it go and find another employment? Fears and worries popped up all over my head.&lt;/p&gt;

&lt;p&gt;For those of you who don’t know me. I was born and raised during the colonial era of Hong Kong.  I was at most a half-baked Chinese.&lt;/p&gt;

&lt;p&gt;I was uncomfortable with Beijing simply because  I only knew where Beijing was on the map. I had never visited it. I knew nobody, and I was nobody.&lt;/p&gt;

&lt;p&gt;To make things worse the employment package did not provide any accommodation assistance, so I needed to find a place to stay on my own. I knew nothing about the rental market in Beijing, yet there were plenty of scary stories on how renters got ripped off on the internet. Worst of all, I could not speak mandarin fluently.&lt;/p&gt;

&lt;p&gt;The job front did not offer any comfort either. I had ZERO working experience in China.  What I was going for was a programmer role with some research flavour. What made me stressful was that  NOT ONLY my background was not in computer science, but also I wanted to use this job as a springboard to steer my future career development. I needed to become acquainted with a new domain by picking up new skills and adapting my work habits.&lt;/p&gt;

&lt;p&gt;[transition] Needless to say, I was very worried and  disturbed by the gravity of the challenge. On the other hand, this was a golden opportunity for me to try many new things all at once. I tried to channel my thinking away from the risks and negatives and towards the rewards and positives.&lt;/p&gt;

&lt;p&gt;I slowly became excited. After all, this could be a once-in-a-life-time chance to be paid to explore China. As a Chinese, I felt wrong not to spend some time at the Capital and explore the land.&lt;/p&gt;

&lt;p&gt;I would hate myself for passing up the chance. I picked up the courage. The only thing we have to fear is fear itself. Finally, I enthusiastically bought a one-way flight ticket from Hong Kong to Beijing.&lt;/p&gt;

&lt;p&gt;When my plane landed, I was in deep trouble. My clothes were inadequate to even handle Beijing’s Autumn (which is considered very cold by the Hong Kong standard). The air was so dry that my nose bled easily. Since I had no bank account in China, my wechat pay account wasn’t set up, and I could not transfer fund from Hong Kong to Beijing. And by law, I could only bring a limited amount of cash on me.
Thus, my cash ran out pretty quickly, and I was down to penny very soon. Luckily, my new colleague was willing to lend me some cash and I paid him back when I got my first paycheck.&lt;/p&gt;

&lt;p&gt;Like the old adage: There is will , there is a way. After several weeks of struggles and learning, I managed to adjust to the pace of Beijing, to cope with all the practicalities, and to pass my probation and to start a career that I continue to this day.&lt;/p&gt;

&lt;p&gt;I started to explore the city and the people.  I visited all the must-see tourist destinations such as the great wall and the forbidden city, parks and many national museums.  I listened and tried to understand those, like myself, who came to Beijing for work. I was surprised but later understood why graduates would give up a better paid job for the prospect of obtaining the right to remain in Beijing. This exposure helped me connect and relate to them deeper.&lt;/p&gt;

&lt;p&gt;In retrospect, I had regrets. I regretted that I did not have the chance to attend some very traditional celebrations over the Chinese new year as they were all canceled due to covid. I did not have time to visit Northern part of China, such as inner Mongolia.&lt;/p&gt;

&lt;p&gt;Seizing the day does not mean it is all sunshine. Our imagination may fail to foresee all the troubles and difficulties lying ahead. They can get much worse before getting better. Yet, the upside can just be as surprising as the downside. To be safe all the time and to go through life without mental distress and difficulties is to remain ignorant of half of the natural world. Seizing the day leads me to take a road less traveled. On it I saw a part of China that I would otherwise never experience.&lt;/p&gt;

&lt;p&gt;It is now xxxx. Spend the rest of this afternoon however you like, you can’t take it with you.&lt;/p&gt;</content><author><name>Wilson Fok</name></author><category term="Toastmasters" /><summary type="html">Title: Seize the day / Carpe diem Dear fellow toastmasters and guest, [opening] I have looked up the phase“seize the day” in a dictionary. It means to take the opportunity to do something at the present moment without worrying about the future. I would elaborate it a bit further. A great opportunity does not come often and can only be seized within a short moment of time. When we take the opportunity to follow our passion and desires, we can live a more fulfilling and meaningful life.If seizing the day is as promising as it sounds, why people don’t just go ahead and “seize the day” ? Well, we are not entirely free. Perhaps, we sometimes are not aware of what is possible. Even when we know our possibility, we worry about taking the wrong steps. We tend to avoid losses at the expense of gain, and incline to resist change until a crisis is here. Finally , we hate ourselves for draining our energy this way. [Transition] Let me share with you my own personal journey I embarked when I seized my day and the lessons I took away from it. [Background] In 2018, I applied for a programming job at a startup company in Singapore. After passing two rounds of interviews, I got the offer, but with strings attached. The startup was in the process of relocating from Singapore to Beijing, so the boss wanted me to work in Beijing instead. There I was, facing an opportunity, should I seize it or should I let it go and find another employment? Fears and worries popped up all over my head. For those of you who don’t know me. I was born and raised during the colonial era of Hong Kong. I was at most a half-baked Chinese. I was uncomfortable with Beijing simply because I only knew where Beijing was on the map. I had never visited it. I knew nobody, and I was nobody. To make things worse the employment package did not provide any accommodation assistance, so I needed to find a place to stay on my own. I knew nothing about the rental market in Beijing, yet there were plenty of scary stories on how renters got ripped off on the internet. Worst of all, I could not speak mandarin fluently. The job front did not offer any comfort either. I had ZERO working experience in China. What I was going for was a programmer role with some research flavour. What made me stressful was that NOT ONLY my background was not in computer science, but also I wanted to use this job as a springboard to steer my future career development. I needed to become acquainted with a new domain by picking up new skills and adapting my work habits. [transition] Needless to say, I was very worried and disturbed by the gravity of the challenge. On the other hand, this was a golden opportunity for me to try many new things all at once. I tried to channel my thinking away from the risks and negatives and towards the rewards and positives. I slowly became excited. After all, this could be a once-in-a-life-time chance to be paid to explore China. As a Chinese, I felt wrong not to spend some time at the Capital and explore the land. I would hate myself for passing up the chance. I picked up the courage. The only thing we have to fear is fear itself. Finally, I enthusiastically bought a one-way flight ticket from Hong Kong to Beijing. When my plane landed, I was in deep trouble. My clothes were inadequate to even handle Beijing’s Autumn (which is considered very cold by the Hong Kong standard). The air was so dry that my nose bled easily. Since I had no bank account in China, my wechat pay account wasn’t set up, and I could not transfer fund from Hong Kong to Beijing. And by law, I could only bring a limited amount of cash on me. Thus, my cash ran out pretty quickly, and I was down to penny very soon. Luckily, my new colleague was willing to lend me some cash and I paid him back when I got my first paycheck. Like the old adage: There is will , there is a way. After several weeks of struggles and learning, I managed to adjust to the pace of Beijing, to cope with all the practicalities, and to pass my probation and to start a career that I continue to this day. I started to explore the city and the people. I visited all the must-see tourist destinations such as the great wall and the forbidden city, parks and many national museums. I listened and tried to understand those, like myself, who came to Beijing for work. I was surprised but later understood why graduates would give up a better paid job for the prospect of obtaining the right to remain in Beijing. This exposure helped me connect and relate to them deeper. In retrospect, I had regrets. I regretted that I did not have the chance to attend some very traditional celebrations over the Chinese new year as they were all canceled due to covid. I did not have time to visit Northern part of China, such as inner Mongolia. Seizing the day does not mean it is all sunshine. Our imagination may fail to foresee all the troubles and difficulties lying ahead. They can get much worse before getting better. Yet, the upside can just be as surprising as the downside. To be safe all the time and to go through life without mental distress and difficulties is to remain ignorant of half of the natural world. Seizing the day leads me to take a road less traveled. On it I saw a part of China that I would otherwise never experience. It is now xxxx. Spend the rest of this afternoon however you like, you can’t take it with you.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/toastmasters/cover.jpg" /><media:content medium="image" url="/assets/images/toastmasters/cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">My understanding of toastmasters values</title><link href="/toastmasters/2024/09/05/vocal/" rel="alternate" type="text/html" title="My understanding of toastmasters values" /><published>2024-09-05T00:00:00+08:00</published><updated>2024-09-05T00:00:00+08:00</updated><id>/toastmasters/2024/09/05/vocal</id><content type="html" xml:base="/toastmasters/2024/09/05/vocal/">&lt;h1 id=&quot;title-my-understanding-of-toastmasters-values&quot;&gt;Title: My understanding of toastmasters values&lt;/h1&gt;

&lt;p&gt;Dear fellow toastmasters, and guests,&lt;/p&gt;

&lt;p&gt;[introduction]&lt;/p&gt;

&lt;p&gt;do you know the 4 core values of toastmasters?
we have them on every agenda at the bottom. Yes, they are excellence, respect, service and integrity.&lt;/p&gt;

&lt;p&gt;I shall explain my understanding of them and with the help of the 16th President of the United State – Abraham Lincoln, I hope to bring those words to life.&lt;/p&gt;

&lt;p&gt;The first value is Excellence. Excellence means to complete our duty to the best of our ability. It does not mean that whatever we do is perfect.&lt;/p&gt;

&lt;p&gt;Abraham Lincoln was born in near-poverty. His father was a carpenter and a farmer. Although he was respected, he was poor and couldn’t read or write. Lincoln had only about 1 year at school. With his mothers’ encouragement, he understood excellence and self-improvement at a very young age. He taught himself how to write, read and borrowed books from others to learn more.&lt;/p&gt;

&lt;p&gt;When he turned 21, he left his home for bigger cities. There, he found his passion Law, and had the opportunity to practice debating and public speaking – a skill that served him well later on. 
With his friends’ support and his desire to learn, he became a lawyer and earned a reputation that elevated him to be one of the finest in his state.&lt;/p&gt;

&lt;p&gt;The second value is Respect. Respect is our willingness to accept and to treat others as our equal, even though they have different opinions, strengths, abilities, goals and weakness.&lt;/p&gt;

&lt;p&gt;Back then, many black people were held as slaves.
Lincoln believed that the blacks are men too, and that all men are created equal and free, and that they have a right to enjoy their fruit of labour.&lt;/p&gt;

&lt;p&gt;At that time the US was expanding. What to do with slavery in these new territories became a HOT POTATO. Since slavery had already existed, he believed that we should accept slavery where it was, out of necessity; stop it from going anywhere else, out of principles.&lt;/p&gt;

&lt;p&gt;Many in the South disagreed. A house divided against itself cannot stand. This disagreement was ripping the country apart violently .&lt;/p&gt;

&lt;p&gt;The third value is service. At  toastmasters, we help each other grow and provide the space for them to develop at their own pace without them feeling pressured or pushed.&lt;/p&gt;

&lt;p&gt;The service Lincoln provided was in his speeches and debates, which provided clarity in thinking and principles, inspiration and leadership. As a politician, ambitious to lead, he argued against slavery and contested the presidency.&lt;/p&gt;

&lt;p&gt;He inspired others to believe that it was good to lift artificial weights from all shoulders – to clear the paths of laudable pursuit for all, to afford all, an unfettered start, and a fair chance, in the race of life. 
He said: Let us have faith that right makes might, and in that faith, let us, to the end, dare to do our duty as we understand it.&lt;/p&gt;

&lt;p&gt;The final value of toastmaster is integrity. To have integrity is to be honest with your actions, feelings, and words, to be ethical and to keep your promises. We help out whenever possible, attend meetings, and are friendly to each other.&lt;/p&gt;

&lt;p&gt;Lincoln entered the White House with the promise to keep the country together as one. That meant winning the civil war against the South and bringing them back.&lt;/p&gt;

&lt;p&gt;The 4-year civil war tested Lincoln’s integrity. He dealt with difficult officials with vastly different opinions, replaced incompetent generals who lost in battlefields, saw destruction, death, damages and bloodshed that turned rivers red, broke the law to keep the law which drew increased criticism.&lt;/p&gt;

&lt;p&gt;on a personal level, he lost his beloved son to disease and his wife nearly gone mad and treated him poorly. He sank into depression.&lt;/p&gt;

&lt;p&gt;Nonetheless, he endured. And waited patiently. Finally, he found a team of generals who could bring victory and reunite the country once and for all.&lt;/p&gt;

&lt;p&gt;With great timing and skills, he issued the law that paved the way to eventually free all slaves. In front of the dead, he said: from these honored dead we take increased devotion to that cause for which they gave the last full measure of devotion – that this nation….. shall have a new birth of freedom, and that government of the people, by the people, for the people shall not perish from the earth.&lt;/p&gt;

&lt;p&gt;Toastmasters clubs are a place for us to nurture our characters on a small stage to prepare us for the world stage. With excellence and integrity, respect and service, let us speak as he spoke and act as he acted.&lt;/p&gt;</content><author><name>Wilson Fok</name></author><category term="Toastmasters" /><summary type="html">Title: My understanding of toastmasters values Dear fellow toastmasters, and guests, [introduction] do you know the 4 core values of toastmasters? we have them on every agenda at the bottom. Yes, they are excellence, respect, service and integrity. I shall explain my understanding of them and with the help of the 16th President of the United State – Abraham Lincoln, I hope to bring those words to life. The first value is Excellence. Excellence means to complete our duty to the best of our ability. It does not mean that whatever we do is perfect. Abraham Lincoln was born in near-poverty. His father was a carpenter and a farmer. Although he was respected, he was poor and couldn’t read or write. Lincoln had only about 1 year at school. With his mothers’ encouragement, he understood excellence and self-improvement at a very young age. He taught himself how to write, read and borrowed books from others to learn more. When he turned 21, he left his home for bigger cities. There, he found his passion Law, and had the opportunity to practice debating and public speaking – a skill that served him well later on. With his friends’ support and his desire to learn, he became a lawyer and earned a reputation that elevated him to be one of the finest in his state. The second value is Respect. Respect is our willingness to accept and to treat others as our equal, even though they have different opinions, strengths, abilities, goals and weakness. Back then, many black people were held as slaves. Lincoln believed that the blacks are men too, and that all men are created equal and free, and that they have a right to enjoy their fruit of labour. At that time the US was expanding. What to do with slavery in these new territories became a HOT POTATO. Since slavery had already existed, he believed that we should accept slavery where it was, out of necessity; stop it from going anywhere else, out of principles. Many in the South disagreed. A house divided against itself cannot stand. This disagreement was ripping the country apart violently . The third value is service. At toastmasters, we help each other grow and provide the space for them to develop at their own pace without them feeling pressured or pushed. The service Lincoln provided was in his speeches and debates, which provided clarity in thinking and principles, inspiration and leadership. As a politician, ambitious to lead, he argued against slavery and contested the presidency. He inspired others to believe that it was good to lift artificial weights from all shoulders – to clear the paths of laudable pursuit for all, to afford all, an unfettered start, and a fair chance, in the race of life. He said: Let us have faith that right makes might, and in that faith, let us, to the end, dare to do our duty as we understand it. The final value of toastmaster is integrity. To have integrity is to be honest with your actions, feelings, and words, to be ethical and to keep your promises. We help out whenever possible, attend meetings, and are friendly to each other. Lincoln entered the White House with the promise to keep the country together as one. That meant winning the civil war against the South and bringing them back. The 4-year civil war tested Lincoln’s integrity. He dealt with difficult officials with vastly different opinions, replaced incompetent generals who lost in battlefields, saw destruction, death, damages and bloodshed that turned rivers red, broke the law to keep the law which drew increased criticism. on a personal level, he lost his beloved son to disease and his wife nearly gone mad and treated him poorly. He sank into depression. Nonetheless, he endured. And waited patiently. Finally, he found a team of generals who could bring victory and reunite the country once and for all. With great timing and skills, he issued the law that paved the way to eventually free all slaves. In front of the dead, he said: from these honored dead we take increased devotion to that cause for which they gave the last full measure of devotion – that this nation….. shall have a new birth of freedom, and that government of the people, by the people, for the people shall not perish from the earth. Toastmasters clubs are a place for us to nurture our characters on a small stage to prepare us for the world stage. With excellence and integrity, respect and service, let us speak as he spoke and act as he acted.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/toastmasters/cover.jpg" /><media:content medium="image" url="/assets/images/toastmasters/cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>