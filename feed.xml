<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-09-28T20:27:04+08:00</updated><id>/feed.xml</id><title type="html">Wilson Fok</title><subtitle>Hello, My name is Wilson Fok. I love to extract useful insights and knowledge from big data. I also like to make new friends and connections. Let&apos;s connect! </subtitle><author><name>Wilson Fok</name></author><entry><title type="html">Database Search</title><link href="/others/2024/09/28/database_search/" rel="alternate" type="text/html" title="Database Search" /><published>2024-09-28T00:00:00+08:00</published><updated>2024-09-28T00:00:00+08:00</updated><id>/others/2024/09/28/database_search</id><content type="html" xml:base="/others/2024/09/28/database_search/">&lt;h2 id=&quot;database-search&quot;&gt;Database Search&lt;/h2&gt;
&lt;p&gt;A database search is a process of querying a structured collection of data (a database) to retrieve specific information that meets certain criteria. This is commonly used in various fields, including academia, business, medicine, and technology, to efficiently locate relevant data or documents within large and complex datasets. Here’s a detailed explanation of the components and process involved in a database search:&lt;/p&gt;
&lt;h3 id=&quot;1-database-structure&quot;&gt;1. Database Structure:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Tables: Most databases are organized into tables, where each table contains rows and columns. Each row is a record, and each column is a field containing specific data attributes.&lt;/li&gt;
  &lt;li&gt;Records: A record is a single entry in a database table, often representing a real-world entity such as a customer, transaction, or product.&lt;/li&gt;
  &lt;li&gt;Fields: Fields are the individual data points within a record, such as a name, date, or price.
    &lt;h3 id=&quot;2-search-criteria&quot;&gt;2. Search Criteria:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Keywords: Users input specific keywords that describe the information they are looking for. For example, in a medical research database, a keyword could be a specific disease or treatment method.&lt;/li&gt;
  &lt;li&gt;Filters: To narrow down results, filters can be applied. These could include date ranges, categories, authors, publication types, or other relevant attributes.&lt;/li&gt;
  &lt;li&gt;Boolean Operators: These operators (AND, OR, NOT) are used to refine the search. For example, “heart disease AND diabetes” will return results that contain both terms, whereas “heart disease OR diabetes” will return results that contain either term.
    &lt;h3 id=&quot;3-query-language&quot;&gt;3. Query Language:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;SQL (Structured Query Language): Most databases are queried using SQL, a standard language for managing and retrieving data.&lt;/li&gt;
  &lt;li&gt;Natural Language Queries: Some modern databases support natural language processing, allowing users to input queries in plain language, such as “find all articles about heart disease published in 2023.”
    &lt;h3 id=&quot;4-search-algorithms&quot;&gt;4. Search Algorithms:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Exact Match: The database returns results that exactly match the search terms.&lt;/li&gt;
  &lt;li&gt;Partial Match: The database returns results that partially match the search terms, useful when the exact term is not known.&lt;/li&gt;
  &lt;li&gt;Relevance Ranking: Some databases rank the search results based on relevance, using algorithms that consider factors like the frequency of the search terms, the age of the data, or user preferences.
    &lt;h3 id=&quot;5-search-results&quot;&gt;5. Search Results:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Result Set: The output of a database search is a set of records that match the search criteria. This can be displayed in various formats, such as a list, table, or graph.&lt;/li&gt;
  &lt;li&gt;Metadata: Alongside the results, databases often provide metadata, such as the date of entry, source, and other relevant details to help users assess the quality and relevance of the results.
    &lt;h3 id=&quot;6-advanced-search-options&quot;&gt;6. Advanced Search Options:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Wildcards/ Regular Expressions: Symbols like * or ? are used to represent unknown characters or groups of characters, allowing for more flexible searches. For example, “medic*” might return results for “medical,” “medicine,” and “medications.”&lt;/li&gt;
  &lt;li&gt;Proximity Searches: Some databases allow searches based on the proximity of terms to each other within a document. This is useful for finding phrases or related concepts that appear close together.
    &lt;h3 id=&quot;7-search-in-different-database-types&quot;&gt;7. Search in Different Database Types:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Relational Databases: These are structured databases where data is stored in tables with defined relationships between them (e.g., MySQL, Oracle).&lt;/li&gt;
  &lt;li&gt;Document Databases: These store data in document formats, often JSON or XML, allowing for more flexible and hierarchical data structures (e.g., MongoDB).&lt;/li&gt;
  &lt;li&gt;Full-Text Search Databases: Specialized for searching text-heavy data, these databases index text to allow rapid searches across large volumes of content (e.g., Elasticsearch).
    &lt;h3 id=&quot;8-iterative-search-and-refinement&quot;&gt;8. Iterative Search and Refinement:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Initial Search: The user performs a broad search to get a wide range of results.&lt;/li&gt;
  &lt;li&gt;Refinement: Based on the initial results, the user may refine the search by adding more specific criteria, adjusting filters, or using different keywords.&lt;/li&gt;
  &lt;li&gt;Iteration: This process might be repeated multiple times to narrow down to the most relevant results.
    &lt;h3 id=&quot;9-exporting-and-using-results&quot;&gt;9. Exporting and Using Results:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Exporting Data: Users can often export search results into different formats (e.g., CSV, PDF) for further analysis or reporting.&lt;/li&gt;
  &lt;li&gt;Data Analysis: Results can be used in statistical analysis, trend identification, or other decision-making processes, depending on the user’s needs.
    &lt;h3 id=&quot;10-security-and-access-control&quot;&gt;10. Security and Access Control:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;User Authentication: Access to certain databases may require user authentication to ensure that only authorized individuals can perform searches.&lt;/li&gt;
  &lt;li&gt;Data Privacy: Sensitive information within a database may be protected by encryption, and access to certain fields or records may be restricted based on user roles.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wilson Fok</name></author><category term="Others" /><summary type="html">Database Search A database search is a process of querying a structured collection of data (a database) to retrieve specific information that meets certain criteria. This is commonly used in various fields, including academia, business, medicine, and technology, to efficiently locate relevant data or documents within large and complex datasets. Here’s a detailed explanation of the components and process involved in a database search: 1. Database Structure: Tables: Most databases are organized into tables, where each table contains rows and columns. Each row is a record, and each column is a field containing specific data attributes. Records: A record is a single entry in a database table, often representing a real-world entity such as a customer, transaction, or product. Fields: Fields are the individual data points within a record, such as a name, date, or price. 2. Search Criteria: Keywords: Users input specific keywords that describe the information they are looking for. For example, in a medical research database, a keyword could be a specific disease or treatment method. Filters: To narrow down results, filters can be applied. These could include date ranges, categories, authors, publication types, or other relevant attributes. Boolean Operators: These operators (AND, OR, NOT) are used to refine the search. For example, “heart disease AND diabetes” will return results that contain both terms, whereas “heart disease OR diabetes” will return results that contain either term. 3. Query Language: SQL (Structured Query Language): Most databases are queried using SQL, a standard language for managing and retrieving data. Natural Language Queries: Some modern databases support natural language processing, allowing users to input queries in plain language, such as “find all articles about heart disease published in 2023.” 4. Search Algorithms: Exact Match: The database returns results that exactly match the search terms. Partial Match: The database returns results that partially match the search terms, useful when the exact term is not known. Relevance Ranking: Some databases rank the search results based on relevance, using algorithms that consider factors like the frequency of the search terms, the age of the data, or user preferences. 5. Search Results: Result Set: The output of a database search is a set of records that match the search criteria. This can be displayed in various formats, such as a list, table, or graph. Metadata: Alongside the results, databases often provide metadata, such as the date of entry, source, and other relevant details to help users assess the quality and relevance of the results. 6. Advanced Search Options: Wildcards/ Regular Expressions: Symbols like * or ? are used to represent unknown characters or groups of characters, allowing for more flexible searches. For example, “medic*” might return results for “medical,” “medicine,” and “medications.” Proximity Searches: Some databases allow searches based on the proximity of terms to each other within a document. This is useful for finding phrases or related concepts that appear close together. 7. Search in Different Database Types: Relational Databases: These are structured databases where data is stored in tables with defined relationships between them (e.g., MySQL, Oracle). Document Databases: These store data in document formats, often JSON or XML, allowing for more flexible and hierarchical data structures (e.g., MongoDB). Full-Text Search Databases: Specialized for searching text-heavy data, these databases index text to allow rapid searches across large volumes of content (e.g., Elasticsearch). 8. Iterative Search and Refinement: Initial Search: The user performs a broad search to get a wide range of results. Refinement: Based on the initial results, the user may refine the search by adding more specific criteria, adjusting filters, or using different keywords. Iteration: This process might be repeated multiple times to narrow down to the most relevant results. 9. Exporting and Using Results: Exporting Data: Users can often export search results into different formats (e.g., CSV, PDF) for further analysis or reporting. Data Analysis: Results can be used in statistical analysis, trend identification, or other decision-making processes, depending on the user’s needs. 10. Security and Access Control: User Authentication: Access to certain databases may require user authentication to ensure that only authorized individuals can perform searches. Data Privacy: Sensitive information within a database may be protected by encryption, and access to certain fields or records may be restricted based on user roles.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/Mongodb/taxonomy_facet_example.png" /><media:content medium="image" url="/assets/images/Mongodb/taxonomy_facet_example.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Facet Search</title><link href="/others/2024/09/27/facet_search/" rel="alternate" type="text/html" title="Facet Search" /><published>2024-09-27T00:00:00+08:00</published><updated>2024-09-27T00:00:00+08:00</updated><id>/others/2024/09/27/facet_search</id><content type="html" xml:base="/others/2024/09/27/facet_search/">&lt;h1 id=&quot;facet-search&quot;&gt;Facet Search&lt;/h1&gt;
&lt;p&gt;A facet search is an advanced search technique that allows users to filter and refine search results dynamically by selecting from multiple categories or “facets.” Each facet represents a distinct dimension or attribute of the data, such as date, author, category, or price range. Facet search is widely used in e-commerce, digital libraries, and large-scale databases to help users quickly narrow down large sets of results to find exactly what they are looking for.&lt;/p&gt;

&lt;h2 id=&quot;heres-a-detailed-breakdown-of-how-facet-search-works-and-its-components&quot;&gt;Here’s a detailed breakdown of how facet search works and its components:&lt;/h2&gt;
&lt;h3 id=&quot;1-basic-concept-of-facet-search&quot;&gt;1. Basic Concept of Facet Search:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Facets: A facet is a specific attribute or property of the items in the database. For example, in an online store, facets might include categories like “Brand,” “Price,” “Color,” and “Size.”&lt;/li&gt;
  &lt;li&gt;Facet Values: Each facet has multiple values that represent the different options available. For example, the “Color” facet might have values like “Red,” “Blue,” “Green,” etc.&lt;/li&gt;
  &lt;li&gt;Dynamic Filtering: As users select facet values, the search results update in real-time to reflect the filters applied, helping users progressively narrow down the results.
    &lt;h3 id=&quot;2-components-of-facet-search&quot;&gt;2. Components of Facet Search:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Search Index: The underlying database or search engine indexes all the data, categorizing items according to their facet values. This allows for quick retrieval and filtering based on facet selections.&lt;/li&gt;
  &lt;li&gt;Facet List: This is the user interface component that displays all available facets and their values. Users can see how many items match each facet value, often displayed as a count next to the facet.&lt;/li&gt;
  &lt;li&gt;Facet Selection: Users interact with the facet list by selecting or deselecting facet values. For example, a user might filter a product search by selecting the “Electronics” category, the “Samsung” brand, and a price range of “$200-$500.”
    &lt;h3 id=&quot;3-how-facet-search-works&quot;&gt;3. How Facet Search Works:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Initial Search: The user starts with a broad search, such as searching for “smartphones” in an online store.&lt;/li&gt;
  &lt;li&gt;Facet Presentation: The search engine presents the user with a list of facets related to the search results. For smartphones, these might include “Brand,” “Operating System,” “Screen Size,” “Price,” etc.&lt;/li&gt;
  &lt;li&gt;User Interaction: The user selects one or more facet values. For example, they might choose the “Apple” brand and a price range of “$500-$1000.”&lt;/li&gt;
  &lt;li&gt;Dynamic Filtering: As each facet is selected, the search results are dynamically updated to reflect the current filters. The user can see how many items match the selected criteria and further refine the search by selecting additional facets.&lt;/li&gt;
  &lt;li&gt;Iteration: The process is iterative, allowing users to add or remove facets until they find the desired results.
    &lt;h3 id=&quot;4-types-of-facets&quot;&gt;4. Types of Facets:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Hierarchical Facets: These facets have a parent-child relationship, often used for categories. For example, “Electronics” might be a parent category, with “Smartphones” and “Laptops” as child categories.&lt;/li&gt;
  &lt;li&gt;Flat Facets: These facets are non-hierarchical and represent simple attributes like color, brand, or material.&lt;/li&gt;
  &lt;li&gt;Range Facets: These allow users to select a range of values, such as price, weight, or date. Users can often specify custom ranges or choose from predefined ranges.&lt;/li&gt;
  &lt;li&gt;Multi-Select Facets: Users can select multiple values within a facet. For instance, they might choose both “Red” and “Blue” under the “Color” facet to see products that are either color.
    &lt;h3 id=&quot;5-advantages-of-facet-search&quot;&gt;5. Advantages of Facet Search:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;User-Friendly Navigation: Facet search simplifies navigation by allowing users to progressively filter results, making it easier to find what they’re looking for without needing to know exact search terms.&lt;/li&gt;
  &lt;li&gt;Flexibility: Users can explore results from multiple angles by combining different facets, which is particularly useful for databases with diverse or complex data.&lt;/li&gt;
  &lt;li&gt;Immediate Feedback: Facet counts give users immediate feedback on how many results will be returned for each selection, helping them make informed decisions.
    &lt;h3 id=&quot;6-facet-search-in-different-contexts&quot;&gt;6. Facet Search in Different Contexts:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;E-commerce: In online shopping, facets might include brand, price, ratings, availability, and more, helping users quickly find products that match their preferences.&lt;/li&gt;
  &lt;li&gt;Digital Libraries: Academic or digital libraries use facet search to allow users to filter search results by publication year, author, subject area, or document type.&lt;/li&gt;
  &lt;li&gt;Content Management Systems: Websites with large content repositories often use facet search to help users filter articles, videos, or documents by topic, date, or tags.&lt;/li&gt;
  &lt;li&gt;Databases: In relational or document-oriented databases, facets can be used to filter data records by various attributes, making it easier for users to explore the dataset.
    &lt;h3 id=&quot;7-implementation-of-facet-search&quot;&gt;7. Implementation of Facet Search:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Search Engine Integration: Facet search is often implemented using search engines like Lucene, Elasticsearch or Solr, which support faceted navigation out of the box.&lt;/li&gt;
  &lt;li&gt;User Interface: A well-designed user interface is crucial for effective facet search. Facets are typically displayed on the side or top of the search results page, allowing for easy access.&lt;/li&gt;
  &lt;li&gt;Performance Considerations: The system must be optimized to handle complex queries and large datasets efficiently. This involves indexing the facets and caching commonly used facet combinations.
    &lt;h3 id=&quot;8-challenges-in-facet-search&quot;&gt;8. Challenges in Facet Search:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Facet Overload: Presenting too many facets or facet values can overwhelm users. It’s important to prioritize the most relevant facets for the user’s search context.&lt;/li&gt;
  &lt;li&gt;Facet Dependency: In some cases, selecting one facet may limit the available options in another. Managing these dependencies while maintaining an intuitive user experience can be challenging.&lt;/li&gt;
  &lt;li&gt;Data Quality: The effectiveness of facet search depends on the quality of the underlying data. Inconsistent or poorly categorized data can lead to irrelevant or incomplete search results.
    &lt;h3 id=&quot;9-examples-of-facet-search&quot;&gt;9. Examples of Facet Search:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Amazon: When searching for a product on Amazon, users can filter results by various facets such as brand, price, customer reviews, and more.&lt;/li&gt;
  &lt;li&gt;Google Scholar: Google Scholar allows users to refine their search results by year of publication, author, and relevance, among other facets.&lt;/li&gt;
  &lt;li&gt;EBSCOhost: An academic database that offers facets for filtering search results by subject, publication date, source type, and more.
    &lt;h3 id=&quot;10-best-practices-for-facet-search&quot;&gt;10. Best Practices for Facet Search:&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;Prioritize Key Facets: Display the most commonly used facets prominently to guide users efficiently.&lt;/li&gt;
  &lt;li&gt;Limit the Number of Facet Values: Show only the most relevant facet values by default, with options to expand or see more if needed.&lt;/li&gt;
  &lt;li&gt;Provide Clear Counts: Show how many results match each facet value, so users know what to expect when they make a selection.&lt;/li&gt;
  &lt;li&gt;Allow Easy Removal of Facets: Users should be able to easily deselect facets or clear all filters to start a new search.
    &lt;h3 id=&quot;11-actual-source-codes-and-examples&quot;&gt;11. Actual Source Codes and Examples&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;numerical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/numerical_range_facet.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/numerical_range_facet_example.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;categorical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/string_facet.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/string_facet_example.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Taxonomical
&lt;img src=&quot;/assets/images/Mongodb/taxonomy_facet.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/taxonomy_facet_example.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wilson Fok</name></author><category term="Others" /><summary type="html">Facet Search A facet search is an advanced search technique that allows users to filter and refine search results dynamically by selecting from multiple categories or “facets.” Each facet represents a distinct dimension or attribute of the data, such as date, author, category, or price range. Facet search is widely used in e-commerce, digital libraries, and large-scale databases to help users quickly narrow down large sets of results to find exactly what they are looking for. Here’s a detailed breakdown of how facet search works and its components: 1. Basic Concept of Facet Search: Facets: A facet is a specific attribute or property of the items in the database. For example, in an online store, facets might include categories like “Brand,” “Price,” “Color,” and “Size.” Facet Values: Each facet has multiple values that represent the different options available. For example, the “Color” facet might have values like “Red,” “Blue,” “Green,” etc. Dynamic Filtering: As users select facet values, the search results update in real-time to reflect the filters applied, helping users progressively narrow down the results. 2. Components of Facet Search: Search Index: The underlying database or search engine indexes all the data, categorizing items according to their facet values. This allows for quick retrieval and filtering based on facet selections. Facet List: This is the user interface component that displays all available facets and their values. Users can see how many items match each facet value, often displayed as a count next to the facet. Facet Selection: Users interact with the facet list by selecting or deselecting facet values. For example, a user might filter a product search by selecting the “Electronics” category, the “Samsung” brand, and a price range of “$200-$500.” 3. How Facet Search Works: Initial Search: The user starts with a broad search, such as searching for “smartphones” in an online store. Facet Presentation: The search engine presents the user with a list of facets related to the search results. For smartphones, these might include “Brand,” “Operating System,” “Screen Size,” “Price,” etc. User Interaction: The user selects one or more facet values. For example, they might choose the “Apple” brand and a price range of “$500-$1000.” Dynamic Filtering: As each facet is selected, the search results are dynamically updated to reflect the current filters. The user can see how many items match the selected criteria and further refine the search by selecting additional facets. Iteration: The process is iterative, allowing users to add or remove facets until they find the desired results. 4. Types of Facets: Hierarchical Facets: These facets have a parent-child relationship, often used for categories. For example, “Electronics” might be a parent category, with “Smartphones” and “Laptops” as child categories. Flat Facets: These facets are non-hierarchical and represent simple attributes like color, brand, or material. Range Facets: These allow users to select a range of values, such as price, weight, or date. Users can often specify custom ranges or choose from predefined ranges. Multi-Select Facets: Users can select multiple values within a facet. For instance, they might choose both “Red” and “Blue” under the “Color” facet to see products that are either color. 5. Advantages of Facet Search: User-Friendly Navigation: Facet search simplifies navigation by allowing users to progressively filter results, making it easier to find what they’re looking for without needing to know exact search terms. Flexibility: Users can explore results from multiple angles by combining different facets, which is particularly useful for databases with diverse or complex data. Immediate Feedback: Facet counts give users immediate feedback on how many results will be returned for each selection, helping them make informed decisions. 6. Facet Search in Different Contexts: E-commerce: In online shopping, facets might include brand, price, ratings, availability, and more, helping users quickly find products that match their preferences. Digital Libraries: Academic or digital libraries use facet search to allow users to filter search results by publication year, author, subject area, or document type. Content Management Systems: Websites with large content repositories often use facet search to help users filter articles, videos, or documents by topic, date, or tags. Databases: In relational or document-oriented databases, facets can be used to filter data records by various attributes, making it easier for users to explore the dataset. 7. Implementation of Facet Search: Search Engine Integration: Facet search is often implemented using search engines like Lucene, Elasticsearch or Solr, which support faceted navigation out of the box. User Interface: A well-designed user interface is crucial for effective facet search. Facets are typically displayed on the side or top of the search results page, allowing for easy access. Performance Considerations: The system must be optimized to handle complex queries and large datasets efficiently. This involves indexing the facets and caching commonly used facet combinations. 8. Challenges in Facet Search: Facet Overload: Presenting too many facets or facet values can overwhelm users. It’s important to prioritize the most relevant facets for the user’s search context. Facet Dependency: In some cases, selecting one facet may limit the available options in another. Managing these dependencies while maintaining an intuitive user experience can be challenging. Data Quality: The effectiveness of facet search depends on the quality of the underlying data. Inconsistent or poorly categorized data can lead to irrelevant or incomplete search results. 9. Examples of Facet Search: Amazon: When searching for a product on Amazon, users can filter results by various facets such as brand, price, customer reviews, and more. Google Scholar: Google Scholar allows users to refine their search results by year of publication, author, and relevance, among other facets. EBSCOhost: An academic database that offers facets for filtering search results by subject, publication date, source type, and more. 10. Best Practices for Facet Search: Prioritize Key Facets: Display the most commonly used facets prominently to guide users efficiently. Limit the Number of Facet Values: Show only the most relevant facet values by default, with options to expand or see more if needed. Provide Clear Counts: Show how many results match each facet value, so users know what to expect when they make a selection. Allow Easy Removal of Facets: Users should be able to easily deselect facets or clear all filters to start a new search. 11. Actual Source Codes and Examples numerical categorical Taxonomical</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/Mongodb/taxonomy_facet_example.png" /><media:content medium="image" url="/assets/images/Mongodb/taxonomy_facet_example.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">MongoDB Background</title><link href="/others/2024/09/26/mongoDB_background/" rel="alternate" type="text/html" title="MongoDB Background" /><published>2024-09-26T00:00:00+08:00</published><updated>2024-09-26T00:00:00+08:00</updated><id>/others/2024/09/26/mongoDB_background</id><content type="html" xml:base="/others/2024/09/26/mongoDB_background/">&lt;p&gt;Dear readers,&lt;/p&gt;

&lt;p&gt;This is my introductory course on some basic concepts on database, searches, and optimization. MongoDB is a NoSQL database that stores data in flexible, JSON-like documents, rather than the traditional table-based relational database structure. This allows for more dynamic schemas, where fields can vary between documents, and data can be nested in complex hierarchies.
###Key Features of MongoDB:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Document-Oriented Storage: MongoDB stores data in BSON (binary JSON) format, which means data can be represented in a rich, hierarchical structure. This makes it more adaptable to changing data models.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;what-is-a-data-model&quot;&gt;What is a data model?&lt;/h3&gt;
&lt;h3 id=&quot;conceptual-data-models&quot;&gt;Conceptual data models&lt;/h3&gt;

&lt;p&gt;These model types provide a high-level, conceptual view of your data. They identify key entities—like customers, products, orders, and payments—and show how these entities relate to each other. This model is designed to help business stakeholders understand how different parts of the data interact without diving into technical details.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Example: For a retail company, a conceptual data model might include categories like customers, products, orders, and payments. The relationships between these categories would be mapped out visually to help stakeholders see how the data from different parts of the business interact without getting into specifics like data types or storage methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;logical-data-models&quot;&gt;Logical data models&lt;/h3&gt;

&lt;p&gt;Logical data models build on the conceptual model by adding more detail. They define the data elements, their attributes, and the relationships between them in a way that aligns more closely with how the data will be implemented in a database. This model bridges the gap between business needs and technical design, making it easier for IT teams to plan the database structure.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Example: Continuing with the retail company example, a logical data model would define specific attributes for each category defined in the conceptual model. For instance, the customer category might include attributes like customer ID, name, email, and address. The order category could include details like order ID, order date, customer ID, and total amount. This additional detail translates business concepts into a structured database design, though it doesn’t yet address the physical aspects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;physical-data-models-electronic&quot;&gt;Physical data models (Electronic)&lt;/h3&gt;

&lt;p&gt;Physical data models provide the most detail. They take the logical model and turn it into a specific framework for storing and managing the data within a particular database system. This includes defining the structure of tables, the types of data that will be stored in each column, and how the data will be indexed and accessed. The physical model optimizes the database for performance and maintains accurate data relationships.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Example: For our hypothetical retail company, the physical data model would translate the logical model into a concrete database design. The customer category might become a table named “Customers,” with fields for customer information like ID, name, email, and address. Similarly, the order category would be “Orders,” containing details like order date, customer ID, and total amount. The physical model also defines how these tables interact within the database to ensure efficient data retrieval and integrity.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Scalability: MongoDB is designed to scale horizontally, which means you can distribute data across multiple servers. This is especially useful for handling large volumes of data and high traffic loads.&lt;/li&gt;
  &lt;li&gt;Flexibility: Unlike traditional relational databases that require a predefined schema, MongoDB allows for flexible schemas (mixture of different data variable types, inconsistent number of fields, etc), making it easier to handle data that doesn’t fit neatly into a predefined structure.&lt;/li&gt;
  &lt;li&gt;High Performance: MongoDB is optimized for read and write performance, and it supports indexing and querying that can improve data access speeds.&lt;/li&gt;
  &lt;li&gt;Distributed Database: MongoDB is built for distributed systems, with features like replication, sharding (splitting a large database into smaller partitions and storing them in various locations), and automatic failover, making it highly resilient and available.&lt;/li&gt;
  &lt;li&gt;Aggregation Framework: MongoDB provides a powerful aggregation framework that allows for complex data processing and transformation directly within the database.&lt;/li&gt;
  &lt;li&gt;Integration with Modern Development Stacks: MongoDB integrates well with many modern development environments, including JavaScript, Python, and Node.js, making it popular among developers building web applications.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###Why MongoDB is Popular:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Ease of Use: MongoDB’s flexible document model is more aligned with how developers think about data, especially in web and mobile applications. This makes it easier to use and faster to develop with compared to traditional relational databases.&lt;/li&gt;
  &lt;li&gt;Scalability: As data grows, MongoDB’s ability to scale horizontally by adding more servers allows businesses to manage large datasets without significant performance degradation.&lt;/li&gt;
  &lt;li&gt;Flexible Schema: The ability to store various data types and structures in the same collection without needing to define a strict schema upfront makes MongoDB ideal for rapidly evolving applications.&lt;/li&gt;
  &lt;li&gt;Strong Community and Ecosystem: MongoDB has a large and active community, extensive documentation, and a wide range of tools and integrations, making it a popular choice for developers and companies.&lt;/li&gt;
  &lt;li&gt;Cloud-Native: MongoDB Atlas, the cloud version of MongoDB, offers a managed service that abstracts away the complexities of database management, making it easier for developers to deploy and scale databases in the cloud.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Support for Big Data and Real-Time Applications: MongoDB’s performance characteristics and scalability make it well-suited for big data applications, real-time analytics, and other modern use cases where traditional databases may struggle.
MongoDB’s combination of flexibility, performance, and scalability has made it one of the most popular NoSQL databases, especially in environments where developers need to move quickly and handle large, complex datasets.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;I have read through its documentation and tutorials on MongoDB website (https://www.mongodb.com/). They are well-suited for beginners like myself and offer MongoDB University courses &lt;strong&gt;for free&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;some-basic-differences-between-mongodb-nosql-vs-sql-database&quot;&gt;Some basic differences between MongoDB (NoSQL) vs SQL database&lt;/h3&gt;

&lt;p&gt;SQL is very fast for lookup, and for adding new rows, which makes it very suitable for a situation where we need to often add and remove new samples. However, its schema is rigid. In other words, its columns are preset, so adding or removing a field can be tricky. Also, its schema can only handle single variable type within a field, which means it can be less flexible.&lt;/p&gt;

&lt;p&gt;On the other hand, MongoDB lets us mix multiple variable types in the same field or add or remove new columns, with each entry can have different number of fields. Apart from the standard integer, string, double, MongoDB uses unique variable types. For example, ID Key, ISODATE, etc. Each sample is a document. Many related or similar documents grouped together are called a collection. Many related or similar collections grouped together are called a database and putting several databases together are called a cluster. It can scale easily. Despite its flexibility, MongoDB can enforce constraints on its schema and validate its documents against its constraints.&lt;/p&gt;

&lt;h3 id=&quot;how-mongodb-handles-relationships&quot;&gt;How MongoDB handles relationships?&lt;/h3&gt;

&lt;p&gt;In MongoDB, we have 3 different ways to combine a key (unique) to a value (information). The first way is one-to-one. This is most useful when we need to look up a unique record. Say we identify this particular record with its own unique id that is automatically generated when we insert it into a database. The second way is one-to-many. This is most useful when we have multiply items inside an array for a field. We can search through them. For example, a single record possesses multiple tags or labels. The last way is many-to-many. 
It is very paramount that we understand the purpose and the functional requirements of database. The four functional pillars of a good database are atomicity, consistency, isolation and durability.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Atomicity = All operations will either succeed or fail together.&lt;/li&gt;
  &lt;li&gt;Consistency = All changes made by operations are consistent with database constraints or meet the schema validation rules.&lt;/li&gt;
  &lt;li&gt;Isolation = Multiple transactions can happen at the same time without affecting the outcome of other transaction.&lt;/li&gt;
  &lt;li&gt;Durability = All of the changes that are made by operations in a transaction will persist, no matter what.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-do-we-use-indexing&quot;&gt;Why do we use indexing?&lt;/h3&gt;

&lt;p&gt;Indexing in MongoDB is a powerful feature that enhances the efficiency of query operations by allowing the database to quickly locate and access the data needed without scanning the entire collection. This can significantly improve query performance, especially in large datasets.&lt;/p&gt;

&lt;h3 id=&quot;benefits-of-indexing-in-mongodb&quot;&gt;Benefits of Indexing in MongoDB:&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Improved Query Performance: Indexes allow MongoDB to search for records more quickly by narrowing down the search space. Instead of scanning the entire collection, the database can directly access the indexed fields, resulting in faster query execution.&lt;/li&gt;
  &lt;li&gt;Reduced Resource Consumption: Efficient indexing reduces the CPU and memory load on the database server by minimizing the amount of data that needs to be processed during queries.&lt;/li&gt;
  &lt;li&gt;Enhanced Sorting: Indexes can also improve the performance of sort operations. If a query requests data in a sorted order based on an indexed field, MongoDB can retrieve the data in the desired order without additional sorting, saving time and resources.&lt;/li&gt;
  &lt;li&gt;Faster Data Aggregation: Indexes can accelerate the performance of aggregation operations that involve filtering or sorting, allowing for quicker insights and data analysis.&lt;/li&gt;
  &lt;li&gt;Support for Unique Constraints: MongoDB indexes can enforce unique constraints, ensuring that a particular field or combination of fields in a collection is unique across all documents. This is useful for maintaining data integrity, such as ensuring unique email addresses in a user collection.&lt;/li&gt;
  &lt;li&gt;Geospatial Queries: MongoDB supports geospatial indexes, enabling efficient querying of location-based data. This is beneficial for applications that involve mapping, geolocation services, or any feature requiring spatial data processing.&lt;/li&gt;
  &lt;li&gt;Text Search Optimization: MongoDB offers text indexes that optimize the performance of text search queries, allowing for efficient full-text search within documents.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;how-indexing-is-done-in-mongodb&quot;&gt;How Indexing is Done in MongoDB:&lt;/h3&gt;
&lt;p&gt;Creating and managing indexes in MongoDB is straightforward. Here’s how you can do it:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Single Field Index: The simplest form of an index is a single field index, which is created on a specific field in a collection. This is useful for queries that frequently filter or sort based on this field.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/createIndex.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1 specifies ascending order, while -1 would specify descending order.&lt;/p&gt;

&lt;p&gt;When we query a database, instead of searching through all its documents, we can just search through this index. This saves time by searching in fewer places. However, if we have creates too many different indices, we may lose out especially we need to update them as well whenever we updates the underlying documents. Each update requires a write operation on the index too.&lt;/p&gt;

&lt;p&gt;So, we may want to let an index expire on its own after some time.&lt;/p&gt;

&lt;p&gt;TTL Index: A Time-To-Live (TTL) index can automatically remove documents from a collection after a certain period. 
db.collection.createIndex({ createdAt: 1 }, { expireAfterSeconds: 3600 })&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Trick 1: create index that can be used to speed up the search. We create an index based on frequently observed queries on some of the fields. Then when we query, if  its corresponding index exists, the search will automatically use it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Trick 2: indexing order matters.  A rule of thumb is that we filter or use Boolean selection to reduce the number of documents or results as early as feasible. Then we perform more complicated / expensive operations, such as sorting.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;index-management&quot;&gt;Index management&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* How to examine what indices built in the database so far?
* What happen if we are searching on the fields that have no index?
* How to remove redundant index?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s take a look with the explain method that delineates how MongoDB performs searches. Without an index is not going to stymie the search progress. MongoDB has different mode for finding the subset of documents that match the queries.&lt;/p&gt;

&lt;p&gt;COLLSCAN: collection scan is performed, without accessing the index&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/explain_collscan.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IXSCAN: indicate whether query uses index or not
FETCH: read the documents
SORT: sort the search results in memory&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/explain_ixscan.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Trick: when we are only after some specific fields, we can use projection to display only the relevant fields and hide others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/projection_ex_index.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/explain_projection.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, we can turn a single field index into multiple fields index (aka compound index) to make searching more than one field more efficient. However, the order of the items in the field matters to the efficiency, but not search results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/compound_index.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This MongoDB tutorial does not recommend users to delete indices when they become obsolete. This is because we often can delete the index that we still need. Instead of deleting it, we can just hide the index from use and check to see if anything else breaks as a result.&lt;/p&gt;

&lt;p&gt;Delete = dropIndex
hide index = hideIndex&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/hide.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/delete.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;commonly-used-apis&quot;&gt;Commonly Used APIs&lt;/h3&gt;

&lt;p&gt;We can use different filters . The chose of filters depend on the data type of the field that we are looking at.&lt;/p&gt;

&lt;p&gt;If it is just a plain and simple string, integer, float, double, etc, we can use pretty much anything.&lt;/p&gt;

&lt;h5 id=&quot;logical-operators&quot;&gt;Logical operators&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/andOr.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some field contain arrays. Arrays are data structure that inside itself, contains data or elements. If we want to search inside an array, we need to do this.&lt;/p&gt;

&lt;p&gt;We use the operator called elemMatch that looks up &lt;strong&gt;multiple fields and across every elements / all elements&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/elemMatch.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/elemMatch_elements.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/insertOne.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Many&lt;/strong&gt; belongs to the family of bulk-write-method. It accesses multiple documents at once, with the benefit of reducing the number of round trips to the server and improved efficiency.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/updateOne.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/updateOne_Code.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/upsert_q.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we cannot find a document, we can create it with the desired fields by turning the upsert=True&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Array&lt;/strong&gt; is a special data structure, so we use push to append a new element to the array of existing elements.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/updateMany.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/updateManyCode.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we can also use findAndModify to perform an update operation. This is helpful for keep track of statistics such as counts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/findAndModify.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/replaceOne.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NOTE: when input to the APIs is null / empty, the functions perform like we are working on all documents. CountDocuments counts all documents. DeleteMany deletes all documents. Find finds all documents.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/countDocuments.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;referencing&quot;&gt;Referencing&lt;/h3&gt;

&lt;p&gt;In MongoDB, we have two options for referencing. The first is embedding. Embedding duplicates the data entries such that each document is complete. The pros are we do not need to look elsewhere for the information, and it is fast. The cons are we can end up with a very large document with many redundancy. The second is referencing. Referencing does not duplicate the data, but it adds a OBJECTID in the document and we can search and link to the other documents to locate the information. However, this means that we search more slowly, and through more documents. But the document itself are smaller, without duplicate of information, easier to update and maintain proper records. Referencing is also closely related to the concept of data normalization.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/ref.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt; 
&lt;img src=&quot;/assets/images/Mongodb/refTypes.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;atomicity&quot;&gt;Atomicity&lt;/h3&gt;

&lt;p&gt;Whenever we are working with multiple documents, we can use session to ensure atomicity.
For example, we like to transfer money from accouter holder A to account holder B, this transfer involves the deduction from A and the increment of B. we want to ensure that both operations succeed together or fail together, but not one succeeded and the other failed (for instance, money taken out from A but not put back in B).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/session.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-is-aggregates&quot;&gt;What is aggregates?&lt;/h3&gt;

&lt;p&gt;In MongoDB, the concept of &lt;strong&gt;aggregation&lt;/strong&gt; refers to the process of processing data records and returning computed results. Aggregation operations group values from multiple documents together and can perform a variety of operations on the grouped data to return a single result. Aggregations are similar to SQL’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GROUP BY&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JOIN&lt;/code&gt; operations, but they are more powerful and flexible.&lt;/p&gt;

&lt;h3 id=&quot;key-concepts-of-aggregation-in-mongodb&quot;&gt;Key Concepts of Aggregation in MongoDB&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Aggregation Pipeline:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;The aggregation framework uses a concept called the “aggregation pipeline,” which is a series of stages that process the data. Each stage performs an operation on the input documents and passes the result to the next stage.&lt;/li&gt;
      &lt;li&gt;The pipeline operates in a sequence, where the output of one stage becomes the input to the next.&lt;/li&gt;
      &lt;li&gt;Example of an aggregation pipeline:
        &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;db.orders.aggregate(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$match:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;status:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shipped&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Stage&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;documents&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$group:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;_id:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$customerId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;total:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$sum:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$amount&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Stage&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$sort:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;total:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Stage&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;descending&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stages in the Aggregation Pipeline:&lt;/strong&gt;
&lt;strong&gt;$match:&lt;/strong&gt; Filters the documents to pass only those that match the specified conditions. Similar to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; clause in SQL.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/match.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$group:&lt;/strong&gt; Groups documents by a specified identifier (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_id&lt;/code&gt;) and applies an aggregation function to the grouped data (e.g., sum, average). Similar to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GROUP BY&lt;/code&gt; clause in SQL.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/group.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$sort:&lt;/strong&gt; Sorts the documents based on the specified field(s) and order (ascending or descending).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/sort.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$project:&lt;/strong&gt; Reshapes each document in the stream, adding, removing, or transforming fields.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/project.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$limit:&lt;/strong&gt; Limits the number of documents that are passed through the pipeline.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/limit.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;$skip:&lt;/strong&gt; Skips a specified number of documents, often used in conjunction with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$limit&lt;/code&gt; to implement pagination.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;$unwind:&lt;/strong&gt; Deconstructs an array field from the input documents to output a document for each element of the array. It is useful for dealing with arrays within documents.
&lt;strong&gt;$lookup:&lt;/strong&gt; Performs a left outer join to another collection in the same database to combine data from multiple sources, similar to SQL’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JOIN&lt;/code&gt; operation.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;$Set:&lt;/strong&gt; Insert or modify the values of a field.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/set.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Aggregation Expressions:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Aggregation stages often include expressions to perform operations on fields, such as arithmetic, string manipulation, and conditional logic.
Example: In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$group&lt;/code&gt; stage, you might use Accumulator such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$sum&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$avg&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$max&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$min&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$count&lt;/code&gt;,etc., to perform calculations on grouped documents.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/count.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Example Scenarios:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Calculate Total Sales by Product:&lt;/strong&gt;
        &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;db.sales.aggregate(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$group:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;_id:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$productId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;totalSales:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$sum:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$amount&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;This query groups sales records by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;productId&lt;/code&gt; and calculates the total sales for each product.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Find Top 5 Products by Sales:&lt;/strong&gt;
        &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;db.sales.aggregate(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$group:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;_id:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$productId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;totalSales:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$sum:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$amount&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$sort:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;totalSales:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$limit:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;This pipeline groups sales by product, sorts them in descending order by total sales, and returns the top 5 products.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Save the new collections&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;$merge:&lt;/strong&gt; Allows the output of an aggregation pipeline to be written to a collection, either by replacing existing documents or merging the results.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;$out:&lt;/strong&gt; Directly writes the results of an aggregation pipeline to a new collection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Mongodb/aggregateCode.png&quot; alt=&quot;&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aggregation is a a way to create new collections from existing collections of documents or by modifying them. It is very useful for create a sub-set of documents as a new collections for subsequent analysis.&lt;/p&gt;

&lt;h3 id=&quot;comparison-operators&quot;&gt;Comparison Operators&lt;/h3&gt;

&lt;p&gt;In MongoDB, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$gt&lt;/code&gt; is a query operator that stands for “greater than.” It is used to compare a field’s value with a specified value and returns documents where the field’s value is greater than the specified value.&lt;/p&gt;

&lt;h3 id=&quot;syntax&quot;&gt;Syntax:&lt;/h3&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;field:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$gt:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;field:&lt;/strong&gt; The field in the document you want to compare.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;value:&lt;/strong&gt; The value that the field’s value must be greater than to match the document.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example&quot;&gt;Example:&lt;/h3&gt;

&lt;p&gt;Suppose you have a collection called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;products&lt;/code&gt; with documents that look like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Laptop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1200&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Phone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tablet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To find all products with a price greater than 800, you would use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$gt&lt;/code&gt; operator like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;db.products.find(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;price:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$gt:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This query would return:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Laptop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1200&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, only the document with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;price&lt;/code&gt; of 1200 is returned because it is the only document where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;price&lt;/code&gt; is greater than 800.&lt;/p&gt;

&lt;p&gt;In MongoDB, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$lt&lt;/code&gt; is a query operator that stands for “less than.” It is used to compare a field’s value with a specified value and returns documents where the field’s value is less than the specified value.&lt;/p&gt;

&lt;h3 id=&quot;syntax-1&quot;&gt;Syntax:&lt;/h3&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;field:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$lt:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;field:&lt;/strong&gt; The field in the document you want to compare.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;value:&lt;/strong&gt; The value that the field’s value must be less than to match the document.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example-1&quot;&gt;Example:&lt;/h3&gt;

&lt;p&gt;Suppose you have a collection called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;products&lt;/code&gt; with documents that look like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Laptop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1200&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Phone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tablet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To find all products with a price less than 800, you would use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$lt&lt;/code&gt; operator like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;db.products.find(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;price:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$lt:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This query would return:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tablet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, only the document with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;price&lt;/code&gt; of 600 is returned because it is the only document where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;price&lt;/code&gt; is less than 800.&lt;/p&gt;

&lt;p&gt;In MongoDB, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$lte&lt;/code&gt; is a query operator that stands for “less than or equal to.” It is used to compare a field’s value with a specified value and returns documents where the field’s value is less than or equal to the specified value.&lt;/p&gt;

&lt;h3 id=&quot;syntax-2&quot;&gt;Syntax:&lt;/h3&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;field:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$lte:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;field:&lt;/strong&gt; The field in the document you want to compare.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;value:&lt;/strong&gt; The value that the field’s value must be less than or equal to in order to match the document.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example-2&quot;&gt;Example:&lt;/h3&gt;

&lt;p&gt;Suppose you have a collection called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;products&lt;/code&gt; with documents like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Laptop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1200&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Phone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tablet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To find all products with a price less than or equal to 800, you would use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$lte&lt;/code&gt; operator like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;db.products.find(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;price:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$lte:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This query would return:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Phone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tablet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, the documents with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;price&lt;/code&gt; of 800 and 600 are returned because both prices are less than or equal to 800.&lt;/p&gt;

&lt;p&gt;In MongoDB, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$gte&lt;/code&gt; is a query operator that stands for “greater than or equal to.” It is used to compare a field’s value with a specified value and returns documents where the field’s value is greater than or equal to the specified value.&lt;/p&gt;

&lt;h3 id=&quot;syntax-3&quot;&gt;Syntax:&lt;/h3&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;field:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$gte:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;field:&lt;/strong&gt; The field in the document you want to compare.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;value:&lt;/strong&gt; The value that the field’s value must be greater than or equal to in order to match the document.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example-3&quot;&gt;Example:&lt;/h3&gt;

&lt;p&gt;Suppose you have a collection called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;products&lt;/code&gt; with documents like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Laptop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1200&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Phone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tablet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To find all products with a price greater than or equal to 800, you would use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$gte&lt;/code&gt; operator like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;db.products.find(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;price:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$gte:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This query would return:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Laptop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1200&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Phone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, the documents with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;price&lt;/code&gt; of 1200 and 800 are returned because both prices are greater than or equal to 800.&lt;/p&gt;

&lt;p&gt;In MongoDB, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$in&lt;/code&gt; operator is used to match documents where the value of a field equals any value in a specified array. It is equivalent to the SQL &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IN&lt;/code&gt; operator.&lt;/p&gt;

&lt;h3 id=&quot;syntax-4&quot;&gt;Syntax:&lt;/h3&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;field:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$in:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;field:&lt;/strong&gt; The field in the document that you want to check.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;value1, value2, …:&lt;/strong&gt; The values that you want to match against the field. If the field’s value matches any of these values, the document will be included in the results.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example-4&quot;&gt;Example:&lt;/h3&gt;

&lt;p&gt;Suppose you have a collection called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;products&lt;/code&gt; with documents like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Laptop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Electronics&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Desk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Furniture&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Phone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Electronics&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Chair&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Furniture&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to find all products that belong to either the “Electronics” or “Furniture” category, you would use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$in&lt;/code&gt; operator like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;db.products.find(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;category:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$in:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Electronics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Furniture&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This query would return all documents where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;category&lt;/code&gt; field is either “Electronics” or “Furniture”:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Laptop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Electronics&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Desk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Furniture&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Phone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Electronics&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Chair&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Furniture&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;use-cases&quot;&gt;Use Cases:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Filtering by Multiple Values:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$in&lt;/code&gt; is useful when you want to filter documents that can match any value within a specified list. For example, finding all users with specific roles or all orders with certain statuses.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Checking Membership in an Array:&lt;/strong&gt; If a field contains an array, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$in&lt;/code&gt; can be used to check if any element of the array matches one of the specified values.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;key-points&quot;&gt;Key Points:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;If the field contains an array, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$in&lt;/code&gt; checks if any of the elements in the array match any of the values in the specified array.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$in&lt;/code&gt; can be used with both scalar values (e.g., strings, numbers) and arrays within documents.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$in&lt;/code&gt; operator is a powerful tool for querying documents with multiple potential matching criteria, making it easier to handle complex filtering conditions in MongoDB queries.&lt;/p&gt;</content><author><name>Wilson Fok</name></author><category term="Others" /><summary type="html">Dear readers, This is my introductory course on some basic concepts on database, searches, and optimization. MongoDB is a NoSQL database that stores data in flexible, JSON-like documents, rather than the traditional table-based relational database structure. This allows for more dynamic schemas, where fields can vary between documents, and data can be nested in complex hierarchies. ###Key Features of MongoDB: Document-Oriented Storage: MongoDB stores data in BSON (binary JSON) format, which means data can be represented in a rich, hierarchical structure. This makes it more adaptable to changing data models. What is a data model? Conceptual data models These model types provide a high-level, conceptual view of your data. They identify key entities—like customers, products, orders, and payments—and show how these entities relate to each other. This model is designed to help business stakeholders understand how different parts of the data interact without diving into technical details. Example: For a retail company, a conceptual data model might include categories like customers, products, orders, and payments. The relationships between these categories would be mapped out visually to help stakeholders see how the data from different parts of the business interact without getting into specifics like data types or storage methods. Logical data models Logical data models build on the conceptual model by adding more detail. They define the data elements, their attributes, and the relationships between them in a way that aligns more closely with how the data will be implemented in a database. This model bridges the gap between business needs and technical design, making it easier for IT teams to plan the database structure. Example: Continuing with the retail company example, a logical data model would define specific attributes for each category defined in the conceptual model. For instance, the customer category might include attributes like customer ID, name, email, and address. The order category could include details like order ID, order date, customer ID, and total amount. This additional detail translates business concepts into a structured database design, though it doesn’t yet address the physical aspects. Physical data models (Electronic) Physical data models provide the most detail. They take the logical model and turn it into a specific framework for storing and managing the data within a particular database system. This includes defining the structure of tables, the types of data that will be stored in each column, and how the data will be indexed and accessed. The physical model optimizes the database for performance and maintains accurate data relationships. Example: For our hypothetical retail company, the physical data model would translate the logical model into a concrete database design. The customer category might become a table named “Customers,” with fields for customer information like ID, name, email, and address. Similarly, the order category would be “Orders,” containing details like order date, customer ID, and total amount. The physical model also defines how these tables interact within the database to ensure efficient data retrieval and integrity. Scalability: MongoDB is designed to scale horizontally, which means you can distribute data across multiple servers. This is especially useful for handling large volumes of data and high traffic loads. Flexibility: Unlike traditional relational databases that require a predefined schema, MongoDB allows for flexible schemas (mixture of different data variable types, inconsistent number of fields, etc), making it easier to handle data that doesn’t fit neatly into a predefined structure. High Performance: MongoDB is optimized for read and write performance, and it supports indexing and querying that can improve data access speeds. Distributed Database: MongoDB is built for distributed systems, with features like replication, sharding (splitting a large database into smaller partitions and storing them in various locations), and automatic failover, making it highly resilient and available. Aggregation Framework: MongoDB provides a powerful aggregation framework that allows for complex data processing and transformation directly within the database. Integration with Modern Development Stacks: MongoDB integrates well with many modern development environments, including JavaScript, Python, and Node.js, making it popular among developers building web applications. ###Why MongoDB is Popular: Ease of Use: MongoDB’s flexible document model is more aligned with how developers think about data, especially in web and mobile applications. This makes it easier to use and faster to develop with compared to traditional relational databases. Scalability: As data grows, MongoDB’s ability to scale horizontally by adding more servers allows businesses to manage large datasets without significant performance degradation. Flexible Schema: The ability to store various data types and structures in the same collection without needing to define a strict schema upfront makes MongoDB ideal for rapidly evolving applications. Strong Community and Ecosystem: MongoDB has a large and active community, extensive documentation, and a wide range of tools and integrations, making it a popular choice for developers and companies. Cloud-Native: MongoDB Atlas, the cloud version of MongoDB, offers a managed service that abstracts away the complexities of database management, making it easier for developers to deploy and scale databases in the cloud. Support for Big Data and Real-Time Applications: MongoDB’s performance characteristics and scalability make it well-suited for big data applications, real-time analytics, and other modern use cases where traditional databases may struggle. MongoDB’s combination of flexibility, performance, and scalability has made it one of the most popular NoSQL databases, especially in environments where developers need to move quickly and handle large, complex datasets. I have read through its documentation and tutorials on MongoDB website (https://www.mongodb.com/). They are well-suited for beginners like myself and offer MongoDB University courses for free. Some basic differences between MongoDB (NoSQL) vs SQL database SQL is very fast for lookup, and for adding new rows, which makes it very suitable for a situation where we need to often add and remove new samples. However, its schema is rigid. In other words, its columns are preset, so adding or removing a field can be tricky. Also, its schema can only handle single variable type within a field, which means it can be less flexible. On the other hand, MongoDB lets us mix multiple variable types in the same field or add or remove new columns, with each entry can have different number of fields. Apart from the standard integer, string, double, MongoDB uses unique variable types. For example, ID Key, ISODATE, etc. Each sample is a document. Many related or similar documents grouped together are called a collection. Many related or similar collections grouped together are called a database and putting several databases together are called a cluster. It can scale easily. Despite its flexibility, MongoDB can enforce constraints on its schema and validate its documents against its constraints. How MongoDB handles relationships? In MongoDB, we have 3 different ways to combine a key (unique) to a value (information). The first way is one-to-one. This is most useful when we need to look up a unique record. Say we identify this particular record with its own unique id that is automatically generated when we insert it into a database. The second way is one-to-many. This is most useful when we have multiply items inside an array for a field. We can search through them. For example, a single record possesses multiple tags or labels. The last way is many-to-many. It is very paramount that we understand the purpose and the functional requirements of database. The four functional pillars of a good database are atomicity, consistency, isolation and durability. Atomicity = All operations will either succeed or fail together. Consistency = All changes made by operations are consistent with database constraints or meet the schema validation rules. Isolation = Multiple transactions can happen at the same time without affecting the outcome of other transaction. Durability = All of the changes that are made by operations in a transaction will persist, no matter what. Why do we use indexing? Indexing in MongoDB is a powerful feature that enhances the efficiency of query operations by allowing the database to quickly locate and access the data needed without scanning the entire collection. This can significantly improve query performance, especially in large datasets. Benefits of Indexing in MongoDB: Improved Query Performance: Indexes allow MongoDB to search for records more quickly by narrowing down the search space. Instead of scanning the entire collection, the database can directly access the indexed fields, resulting in faster query execution. Reduced Resource Consumption: Efficient indexing reduces the CPU and memory load on the database server by minimizing the amount of data that needs to be processed during queries. Enhanced Sorting: Indexes can also improve the performance of sort operations. If a query requests data in a sorted order based on an indexed field, MongoDB can retrieve the data in the desired order without additional sorting, saving time and resources. Faster Data Aggregation: Indexes can accelerate the performance of aggregation operations that involve filtering or sorting, allowing for quicker insights and data analysis. Support for Unique Constraints: MongoDB indexes can enforce unique constraints, ensuring that a particular field or combination of fields in a collection is unique across all documents. This is useful for maintaining data integrity, such as ensuring unique email addresses in a user collection. Geospatial Queries: MongoDB supports geospatial indexes, enabling efficient querying of location-based data. This is beneficial for applications that involve mapping, geolocation services, or any feature requiring spatial data processing. Text Search Optimization: MongoDB offers text indexes that optimize the performance of text search queries, allowing for efficient full-text search within documents. How Indexing is Done in MongoDB: Creating and managing indexes in MongoDB is straightforward. Here’s how you can do it: Single Field Index: The simplest form of an index is a single field index, which is created on a specific field in a collection. This is useful for queries that frequently filter or sort based on this field. 1 specifies ascending order, while -1 would specify descending order. When we query a database, instead of searching through all its documents, we can just search through this index. This saves time by searching in fewer places. However, if we have creates too many different indices, we may lose out especially we need to update them as well whenever we updates the underlying documents. Each update requires a write operation on the index too. So, we may want to let an index expire on its own after some time. TTL Index: A Time-To-Live (TTL) index can automatically remove documents from a collection after a certain period. db.collection.createIndex({ createdAt: 1 }, { expireAfterSeconds: 3600 }) Trick 1: create index that can be used to speed up the search. We create an index based on frequently observed queries on some of the fields. Then when we query, if its corresponding index exists, the search will automatically use it. Trick 2: indexing order matters. A rule of thumb is that we filter or use Boolean selection to reduce the number of documents or results as early as feasible. Then we perform more complicated / expensive operations, such as sorting. Index management * How to examine what indices built in the database so far? * What happen if we are searching on the fields that have no index? * How to remove redundant index? Let’s take a look with the explain method that delineates how MongoDB performs searches. Without an index is not going to stymie the search progress. MongoDB has different mode for finding the subset of documents that match the queries. COLLSCAN: collection scan is performed, without accessing the index IXSCAN: indicate whether query uses index or not FETCH: read the documents SORT: sort the search results in memory Trick: when we are only after some specific fields, we can use projection to display only the relevant fields and hide others. Furthermore, we can turn a single field index into multiple fields index (aka compound index) to make searching more than one field more efficient. However, the order of the items in the field matters to the efficiency, but not search results. This MongoDB tutorial does not recommend users to delete indices when they become obsolete. This is because we often can delete the index that we still need. Instead of deleting it, we can just hide the index from use and check to see if anything else breaks as a result. Delete = dropIndex hide index = hideIndex Commonly Used APIs We can use different filters . The chose of filters depend on the data type of the field that we are looking at. If it is just a plain and simple string, integer, float, double, etc, we can use pretty much anything. Logical operators Some field contain arrays. Arrays are data structure that inside itself, contains data or elements. If we want to search inside an array, we need to do this. We use the operator called elemMatch that looks up multiple fields and across every elements / all elements. Many belongs to the family of bulk-write-method. It accesses multiple documents at once, with the benefit of reducing the number of round trips to the server and improved efficiency. If we cannot find a document, we can create it with the desired fields by turning the upsert=True Array is a special data structure, so we use push to append a new element to the array of existing elements. we can also use findAndModify to perform an update operation. This is helpful for keep track of statistics such as counts. NOTE: when input to the APIs is null / empty, the functions perform like we are working on all documents. CountDocuments counts all documents. DeleteMany deletes all documents. Find finds all documents. Referencing In MongoDB, we have two options for referencing. The first is embedding. Embedding duplicates the data entries such that each document is complete. The pros are we do not need to look elsewhere for the information, and it is fast. The cons are we can end up with a very large document with many redundancy. The second is referencing. Referencing does not duplicate the data, but it adds a OBJECTID in the document and we can search and link to the other documents to locate the information. However, this means that we search more slowly, and through more documents. But the document itself are smaller, without duplicate of information, easier to update and maintain proper records. Referencing is also closely related to the concept of data normalization. Atomicity Whenever we are working with multiple documents, we can use session to ensure atomicity. For example, we like to transfer money from accouter holder A to account holder B, this transfer involves the deduction from A and the increment of B. we want to ensure that both operations succeed together or fail together, but not one succeeded and the other failed (for instance, money taken out from A but not put back in B). What is aggregates? In MongoDB, the concept of aggregation refers to the process of processing data records and returning computed results. Aggregation operations group values from multiple documents together and can perform a variety of operations on the grouped data to return a single result. Aggregations are similar to SQL’s GROUP BY and JOIN operations, but they are more powerful and flexible. Key Concepts of Aggregation in MongoDB Aggregation Pipeline: The aggregation framework uses a concept called the “aggregation pipeline,” which is a series of stages that process the data. Each stage performs an operation on the input documents and passes the result to the next stage. The pipeline operates in a sequence, where the output of one stage becomes the input to the next. Example of an aggregation pipeline: db.orders.aggregate([ { $match: { status: &quot;shipped&quot; } }, // Stage 1: Filter documents { $group: { _id: &quot;$customerId&quot;, total: { $sum: &quot;$amount&quot; } } }, // Stage 2: Group and calculate total amount { $sort: { total: -1 } } // Stage 3: Sort by total amount in descending order ]) Stages in the Aggregation Pipeline: $match: Filters the documents to pass only those that match the specified conditions. Similar to the WHERE clause in SQL. $group: Groups documents by a specified identifier (_id) and applies an aggregation function to the grouped data (e.g., sum, average). Similar to the GROUP BY clause in SQL. $sort: Sorts the documents based on the specified field(s) and order (ascending or descending). $project: Reshapes each document in the stream, adding, removing, or transforming fields. $limit: Limits the number of documents that are passed through the pipeline. $skip: Skips a specified number of documents, often used in conjunction with $limit to implement pagination. $unwind: Deconstructs an array field from the input documents to output a document for each element of the array. It is useful for dealing with arrays within documents. $lookup: Performs a left outer join to another collection in the same database to combine data from multiple sources, similar to SQL’s JOIN operation. $Set: Insert or modify the values of a field. Aggregation Expressions: Aggregation stages often include expressions to perform operations on fields, such as arithmetic, string manipulation, and conditional logic. Example: In the $group stage, you might use Accumulator such as $sum, $avg, $max, $min, $count,etc., to perform calculations on grouped documents. Example Scenarios: Calculate Total Sales by Product: db.sales.aggregate([ { $group: { _id: &quot;$productId&quot;, totalSales: { $sum: &quot;$amount&quot; } } } ]) This query groups sales records by productId and calculates the total sales for each product. Find Top 5 Products by Sales: db.sales.aggregate([ { $group: { _id: &quot;$productId&quot;, totalSales: { $sum: &quot;$amount&quot; } } }, { $sort: { totalSales: -1 } }, { $limit: 5 } ]) This pipeline groups sales by product, sorts them in descending order by total sales, and returns the top 5 products. Save the new collections $merge: Allows the output of an aggregation pipeline to be written to a collection, either by replacing existing documents or merging the results. $out: Directly writes the results of an aggregation pipeline to a new collection. Aggregation is a a way to create new collections from existing collections of documents or by modifying them. It is very useful for create a sub-set of documents as a new collections for subsequent analysis. Comparison Operators In MongoDB, $gt is a query operator that stands for “greater than.” It is used to compare a field’s value with a specified value and returns documents where the field’s value is greater than the specified value. Syntax: { field: { $gt: value } } field: The field in the document you want to compare. value: The value that the field’s value must be greater than to match the document. Example: Suppose you have a collection called products with documents that look like this: { &quot;_id&quot;: 1, &quot;name&quot;: &quot;Laptop&quot;, &quot;price&quot;: 1200 }, { &quot;_id&quot;: 2, &quot;name&quot;: &quot;Phone&quot;, &quot;price&quot;: 800 }, { &quot;_id&quot;: 3, &quot;name&quot;: &quot;Tablet&quot;, &quot;price&quot;: 600 } To find all products with a price greater than 800, you would use the $gt operator like this: db.products.find({ price: { $gt: 800 } }) This query would return: { &quot;_id&quot;: 1, &quot;name&quot;: &quot;Laptop&quot;, &quot;price&quot;: 1200 } In this example, only the document with the price of 1200 is returned because it is the only document where the price is greater than 800. In MongoDB, $lt is a query operator that stands for “less than.” It is used to compare a field’s value with a specified value and returns documents where the field’s value is less than the specified value. Syntax: { field: { $lt: value } } field: The field in the document you want to compare. value: The value that the field’s value must be less than to match the document. Example: Suppose you have a collection called products with documents that look like this: { &quot;_id&quot;: 1, &quot;name&quot;: &quot;Laptop&quot;, &quot;price&quot;: 1200 }, { &quot;_id&quot;: 2, &quot;name&quot;: &quot;Phone&quot;, &quot;price&quot;: 800 }, { &quot;_id&quot;: 3, &quot;name&quot;: &quot;Tablet&quot;, &quot;price&quot;: 600 } To find all products with a price less than 800, you would use the $lt operator like this: db.products.find({ price: { $lt: 800 } }) This query would return: { &quot;_id&quot;: 3, &quot;name&quot;: &quot;Tablet&quot;, &quot;price&quot;: 600 } In this example, only the document with the price of 600 is returned because it is the only document where the price is less than 800. In MongoDB, $lte is a query operator that stands for “less than or equal to.” It is used to compare a field’s value with a specified value and returns documents where the field’s value is less than or equal to the specified value. Syntax: { field: { $lte: value } } field: The field in the document you want to compare. value: The value that the field’s value must be less than or equal to in order to match the document. Example: Suppose you have a collection called products with documents like this: { &quot;_id&quot;: 1, &quot;name&quot;: &quot;Laptop&quot;, &quot;price&quot;: 1200 }, { &quot;_id&quot;: 2, &quot;name&quot;: &quot;Phone&quot;, &quot;price&quot;: 800 }, { &quot;_id&quot;: 3, &quot;name&quot;: &quot;Tablet&quot;, &quot;price&quot;: 600 } To find all products with a price less than or equal to 800, you would use the $lte operator like this: db.products.find({ price: { $lte: 800 } }) This query would return: { &quot;_id&quot;: 2, &quot;name&quot;: &quot;Phone&quot;, &quot;price&quot;: 800 }, { &quot;_id&quot;: 3, &quot;name&quot;: &quot;Tablet&quot;, &quot;price&quot;: 600 } In this example, the documents with the price of 800 and 600 are returned because both prices are less than or equal to 800. In MongoDB, $gte is a query operator that stands for “greater than or equal to.” It is used to compare a field’s value with a specified value and returns documents where the field’s value is greater than or equal to the specified value. Syntax: { field: { $gte: value } } field: The field in the document you want to compare. value: The value that the field’s value must be greater than or equal to in order to match the document. Example: Suppose you have a collection called products with documents like this: { &quot;_id&quot;: 1, &quot;name&quot;: &quot;Laptop&quot;, &quot;price&quot;: 1200 }, { &quot;_id&quot;: 2, &quot;name&quot;: &quot;Phone&quot;, &quot;price&quot;: 800 }, { &quot;_id&quot;: 3, &quot;name&quot;: &quot;Tablet&quot;, &quot;price&quot;: 600 } To find all products with a price greater than or equal to 800, you would use the $gte operator like this: db.products.find({ price: { $gte: 800 } }) This query would return: { &quot;_id&quot;: 1, &quot;name&quot;: &quot;Laptop&quot;, &quot;price&quot;: 1200 }, { &quot;_id&quot;: 2, &quot;name&quot;: &quot;Phone&quot;, &quot;price&quot;: 800 } In this example, the documents with the price of 1200 and 800 are returned because both prices are greater than or equal to 800. In MongoDB, the $in operator is used to match documents where the value of a field equals any value in a specified array. It is equivalent to the SQL IN operator. Syntax: { field: { $in: [ value1, value2, ... ] } } field: The field in the document that you want to check. value1, value2, …: The values that you want to match against the field. If the field’s value matches any of these values, the document will be included in the results. Example: Suppose you have a collection called products with documents like this: { &quot;_id&quot;: 1, &quot;name&quot;: &quot;Laptop&quot;, &quot;category&quot;: &quot;Electronics&quot; }, { &quot;_id&quot;: 2, &quot;name&quot;: &quot;Desk&quot;, &quot;category&quot;: &quot;Furniture&quot; }, { &quot;_id&quot;: 3, &quot;name&quot;: &quot;Phone&quot;, &quot;category&quot;: &quot;Electronics&quot; }, { &quot;_id&quot;: 4, &quot;name&quot;: &quot;Chair&quot;, &quot;category&quot;: &quot;Furniture&quot; } If you want to find all products that belong to either the “Electronics” or “Furniture” category, you would use the $in operator like this: db.products.find({ category: { $in: [&quot;Electronics&quot;, &quot;Furniture&quot;] } }) This query would return all documents where the category field is either “Electronics” or “Furniture”: { &quot;_id&quot;: 1, &quot;name&quot;: &quot;Laptop&quot;, &quot;category&quot;: &quot;Electronics&quot; }, { &quot;_id&quot;: 2, &quot;name&quot;: &quot;Desk&quot;, &quot;category&quot;: &quot;Furniture&quot; }, { &quot;_id&quot;: 3, &quot;name&quot;: &quot;Phone&quot;, &quot;category&quot;: &quot;Electronics&quot; }, { &quot;_id&quot;: 4, &quot;name&quot;: &quot;Chair&quot;, &quot;category&quot;: &quot;Furniture&quot; } Use Cases: Filtering by Multiple Values: $in is useful when you want to filter documents that can match any value within a specified list. For example, finding all users with specific roles or all orders with certain statuses. Checking Membership in an Array: If a field contains an array, $in can be used to check if any element of the array matches one of the specified values. Key Points: If the field contains an array, $in checks if any of the elements in the array match any of the values in the specified array. $in can be used with both scalar values (e.g., strings, numbers) and arrays within documents. The $in operator is a powerful tool for querying documents with multiple potential matching criteria, making it easier to handle complex filtering conditions in MongoDB queries.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/Mongodb/taxonomy_facet_example.png" /><media:content medium="image" url="/assets/images/Mongodb/taxonomy_facet_example.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">High Output Management (by Andrew Glove)</title><link href="/reading/2024/05/26/High_output_management/" rel="alternate" type="text/html" title="High Output Management (by Andrew Glove)" /><published>2024-05-26T00:00:00+08:00</published><updated>2024-05-26T00:00:00+08:00</updated><id>/reading/2024/05/26/High_output_management</id><content type="html" xml:base="/reading/2024/05/26/High_output_management/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Hello reader,&lt;/p&gt;

&lt;p&gt;In this series of blog posts, I am going to share with you some lessons I stole from reading “high output management” written by Andrew Glove. Instead of just regurgitating what Andrew said chapter by chapter, I reckon I could do a more fruitful job by presenting in a way that is consistent with my own understanding.&lt;/p&gt;

&lt;p&gt;Andrew is a big picture guy. After all, he was the CEO of Intel for many years. The big picture problem  a company face in a competitive market is to bridge the gap between those who have the power to make managerial decisions and those who have the knowledge to do so.&lt;/p&gt;

&lt;p&gt;The US market is run by private enterprises that emphasize on competitiveness. The reason is that high output management is not targeted to those institutions that are judged more by procedures or correctness than results or those have monopoly. Thus, all the following discussion only concerns firms that compete to supply the most suitable products to meet market demands.&lt;/p&gt;

&lt;p&gt;Market change  is constant. However, we have two distinctive types of change. One is incremental and slow. The other disruptive and rapid. The latter has been discussed in Andrew’s book, “only the paranoid survive: how to exploit crisis points”.  He talks about his experience as the decision makers during a memory chip business crisis in the 70-80s. The former is the main focus of “high output management”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image37095.jpg&quot; alt=&quot;only the paranoid survive: how to exploit crisis points&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The demand of the market as described in this book is computer chips, that was the main business of Intel at that time. However, the management lessons are just applicable to other products outside of the chip industry.&lt;/p&gt;

&lt;p&gt;Fundamentally, Intel was a tech and manufacturing company. To analyze the output of Intel, we examine four pillars, and they are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The output of capital goods or equipment,&lt;/li&gt;
  &lt;li&gt;The output of employees,&lt;/li&gt;
  &lt;li&gt;The output of teams,&lt;/li&gt;
  &lt;li&gt;The output of corporation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I shall walk you through each and every pillar in the subsequent sections.&lt;/p&gt;

&lt;h2 id=&quot;authors-background&quot;&gt;Author’s background&lt;/h2&gt;
&lt;p&gt;Taken from https://www.britannica.com/biography/Andrew-S-Grove on Dec 6 , 2023&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image34064.jpg&quot; alt=&quot;only the paranoid survive: how to exploit crisis points&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Andrew S. Grove, born in 1936 and died in 2016, was often credited as one of the key leader in the management team of Intel during the time when memory storage device business got destroyed by Japanese competitors and launched Intel into the burgeoning microprocessor business. 
The period during which Intel shifted out of the memory business and embraced the microprocessor business had been written by Andrew in his “only the paranoid survive: how to exploit crisis points”.&lt;/p&gt;

&lt;p&gt;His career and the rise of Intel are linked. He entered Intel when it was small. He moved all the way up to management ladder. When he left, Intel was massive.&lt;/p&gt;

&lt;h2 id=&quot;the-high-output-of-capital-goods-or-equipment&quot;&gt;The high output of capital goods or equipment&lt;/h2&gt;

&lt;p&gt;Borrowing the breakfast factory example used in this book. I think the equipment are the most obvious and perhaps the easiest part to manage out of employees, teams and corporation. If we run a breakfast factory, we need some capital investment or cooking apparatus to help us prepare an English breakfast. What a customer wants is cheaper, faster, tastier.&lt;/p&gt;

&lt;p&gt;An English breakfast constitutes 3 separately prepared items: a fully boiled egg, a piece of toast, a cup of coffee. 
An egg boiler boils an egg.
A toaster prepares the toast.
A coffee brewer brews coffee.&lt;/p&gt;

&lt;p&gt;Since boiled eggs, toasts and a cup of coffee can be prepared separately, we have them prepared in parallel to reduce our customer wait time and to improve turnover.&lt;/p&gt;

&lt;p&gt;As shown in the workflow diagram below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/OIP-C.jpg&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Like a running race of 4x400m, the speed of the team is determined by its slowest member. When we make an English breakfast, our speed is limited by our slowest step.
In this example, our slowest step is waiting for a toaster.&lt;/p&gt;

&lt;p&gt;If we could shorten the wait for the toaster , we reduce choke point and cut down the wait time.
Thus, we now know that the output of capital goods depend on its choke point. If we can reduce them, then our output rises.&lt;/p&gt;

&lt;p&gt;To continue with out toaster problem, Here are a few options,&lt;/p&gt;

&lt;p&gt;We can buy a toaster with more slots, so that we can prepare more toasts in one setting. 
We can buy more toaster that operates side by side.&lt;/p&gt;

&lt;p&gt;Afterward, we can see that out next choke point which is the time we need to boil an egg.&lt;/p&gt;

&lt;p&gt;To shorten the time of boiling an egg, we can try
To boil more eggs in one go (batch operation), 
Or we can buy a boiler that have got a conveyor belt structure which allows us to continuously collect boiled egg at the end outlet or with a shorter time interval (continuous operation).&lt;/p&gt;

&lt;p&gt;By reducing the time spent at each step, the process becomes more efficient and faster.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/OIP-C (1).jpg&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, the cost of apparatus and the demands on English breakfasts have to be considered.&lt;/p&gt;

&lt;p&gt;Revenue and sales volume determine how much we produce. More precisely, it is the forecast of these two factors. Andy talks about this more in later section.&lt;/p&gt;

&lt;p&gt;Proposition:&lt;/p&gt;
&lt;h3 id=&quot;inputs-that-are-processed-correctly-with-the-right-apparatus-over-time-produce-outputs&quot;&gt;Inputs that are processed correctly with the right apparatus over time produce outputs.&lt;/h3&gt;

&lt;p&gt;The management of capital goods is about the input, process, apparatus and ultimately output.&lt;/p&gt;

&lt;p&gt;Oftentimes, it is better to foresee potential problems and prevent them from happening in the first place. It is easy to understate the extent or the chances of a problem;  treating that problem when it arises can incur a hefty bill and delays .&lt;/p&gt;

&lt;p&gt;In this book, he said what if our supply is cut off, we need to have some inventory or stock that is enough for 1 business day. Thus, we must balance the cost of storage and space required and the impact of such practice might have on food quality etc.  Otherwise, we have no English breakfast to sell after the inventory of raw ingredients is depleted. During the supply chain disruption over the COVID pandemic, we witnessed supply-side inflation and shortages.&lt;/p&gt;

&lt;p&gt;If we can catch a problem, it is better to catch it early on in the process rather later. Its remedy is going to be more expansive as the situation deteriorates which it often does when it is left on its own device.&lt;/p&gt;

&lt;p&gt;So to catch problem early, we need to monitor and detect signs of problems. The monitoring and detection are the key. We are told to monitor all aspects of the production from input or raw materials, the cooking or preparation process and of course the final product after assembly, the complete English breakfast on the tray.&lt;/p&gt;

&lt;p&gt;The quality of the final product is very important, and as the business grows, we ought to put its quality high up on our priority list. 
The rationale is that we cannot figure out what every customer may do with the final product. (No, the breakfast example makes little sense here. But microprocessor can perform a wide range of computing tasks depending on computer software, so the rationale makes sense. Andrew mentioned about the recall of Intel microprocessor chips as they produced a floating point error during complex calculations)&lt;/p&gt;

&lt;p&gt;One more thing that is very crucial to the output of the capital is the training of an operator. The operator must learn to use the equipment properly. In his experience, one worker who normally needs 200 hours to learn how to operate a wafer fabrication machine.&lt;/p&gt;

&lt;p&gt;However, in the case without sufficient training, a worker did not notice a warning signal from the equipment until so much time had passed and so much material had gone through the wafer machine. These semi-processed silicon wafers were of no use as they were faulty and unsuitable for further processing. With that, Intel lost 1 million worth of raw silicon wafer and the time needed to redo that batch.&lt;/p&gt;

&lt;p&gt;To monitor properly, we paradoxically need more equipment like senors , detectors, indicators, and meters, etc. Inside  our breakfast factory, we use thermometer to record and measure temperature of water in the boiler continuously. We size up the eggs, we detect all kinds of problems, the type of eggs, the quality of bread, the process and the kitchen hygiene. Applying automation and streamlining steps wherever possible.&lt;/p&gt;

&lt;p&gt;With the explosion of AI and robotics, it is not hard to image that machines are getting “smarter”.
And the internet of things are giving smarter machines more sensing capabilities. More capability, more steps can be automated. More sensor , more awareness, more able to detect more problems.
More problems detected and caught early leads to cheaper production by prevention, better product quality, and shorter downtime. Perhaps, this may be the driving force behind the statement: technology is deflationary.&lt;/p&gt;

&lt;h2 id=&quot;the-high-output-of-employees&quot;&gt;The high output of employees&lt;/h2&gt;
&lt;p&gt;The way we achieve high output on capital goods is different to the way we achieve high output on people. We now consider the next pillar: the high output of employees or human capital. Here I must stress that we are looking at an individual employee. Later we will examine the team of individuals.&lt;/p&gt;

&lt;p&gt;We first begin the comprehension of an employee by understanding the life cycle of an employee at a company. We begin the cycle by first acknowledging there is a need to hire someone in the labor market and there is a budget for the role. A job ad is written and posted on the internet. We got some potential candidates whose CVs are reviewed and screened.&lt;/p&gt;

&lt;p&gt;We schedule for an interview with most relevant candidates and conduct a background check. If we discover some interesting and new information about the candidates, we may consider a second interview to talk with the person further.&lt;/p&gt;

&lt;p&gt;Next, if the candidate pass all the stages, an offer is sent. For those who accept the offer, we use a probation period to see whether our new employee fits with the Intel culture. More on culture later.&lt;/p&gt;

&lt;p&gt;I reckon Andy thinks the corporate culture underpins many things that happen at Intel. I personally believe that as a CEO of Intel, he considers his job to nurture, foster and maintain this cooperate culture.&lt;/p&gt;

&lt;p&gt;In this book, he not only shares with us his story of a successful hire, but also an unsuccessful one.  It is common sense that relevant background and training must be met for a job. For instance, engineering background is required for an engineering role – the know-hows and problem solving. Yet, Andy shared with us in this book a story of someone without the background training in the domain, but he got the right mindset and thinking. He was hired.&lt;/p&gt;

&lt;p&gt;He explains that he gives a test to someone with the right educational background but with little or no experience in the industry Intel is in. He converses with that person. Since he knows the candidate has no experiences, he allows the candidate to probe him by asking questions regarding the context. With common sense, logical deduction, and  guesswork,  the candidate comes up with a step by step solution that makes sense and is close enough to the answer Andy had in mind.&lt;/p&gt;

&lt;p&gt;However, he mentioned that despite using the same recipe for hiring, he had hired someone who is good at being interviewed but bad at getting the job done.&lt;/p&gt;

&lt;p&gt;Thus, at this stage, the manager needs to evaluate the employees’ performance and decide to&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Promote if the employee performs well,&lt;/li&gt;
  &lt;li&gt;Demote if the employee performs  poorly, or&lt;/li&gt;
  &lt;li&gt;Lay he or she off if the employee after proper training and feedback remains unsuitable for the job and his or her performance is below expectation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On the other hand, when anyone decides to leave and announce their decision to the manager, depending on the view the manager has on them, he can make one of the two moves. If that employee is good at his or her job, it is important that the manager tries to keep that person within the company. To do so, the manager must learn to converse with the employee to understand the motivation behind his or her leaving. His tip is to ask why he is about to leave (the motivation). The first time you ask that question, the reply is always mechanical, standard and well rehearsed with preparation. Then, you try to ask and probe further, he or she may reveal the true intention and belief.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image122953.jpg&quot; alt=&quot;breakfast&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the most important aspect of a manager’s responsibility is to develop the subordinates during their time at Intel. Like the case with capital goods, the machine is not going to be productive if the operators misuse it or fail to operate it as intended.&lt;/p&gt;

&lt;p&gt;Andy summarizes what drives good work performance into two factors. They are the ability and the willingness to get the job done. Skills are improved with proper tutorials and training. Therefore, he proposes a concept called task-relevant maturity. Task relevant maturity is to make sure managers do not confuse someone with potential with someone who can do the job well already. In particular, not to let age, experience of prior jobs, friendship, and educational background confuse with the actual task at hand.&lt;/p&gt;

&lt;p&gt;While these attributes may be indicative of future performance, they may not be so now. Why task relevant? If someone is a good salesperson and has received a promotion to team lead based on his or her past sales records, he or she has a low task-relevant maturity as a manager but high task-relevant maturity as a salesperson. His or her management task-relevant maturity rises while he or she receives more training over time. 
It is important that at the beginning when task-relevant maturity is not high, more monitoring and support by senior staff are warranted. Once he or she becomes capable at doing the job in the new roles, they can do the job independently with less supervision.&lt;/p&gt;

&lt;p&gt;Following this principle, it is obvious that a manager tends to delegate his or her most familiar tasks and teaches his or her most familiar skills. Andy mentions that here one-on-one meeting can be helpful. Since every individual communication style is idiosyncratic, we need to explore and discover our own style and method.&lt;/p&gt;

&lt;p&gt;Andy management emphasizes planning, an indispensable element of work. It is a bit similar to the old adage: you reap what you sow. The idea is that factory makes to forecast, not to order. The just-in-time management is getting so popular nowadays that it is not hard to comprehend. I use the algebra analogy to visualize this. 
If A is our forecast, B is the actual (delayed measurement). What we actually should have done is A+B.  It would be great but unrealistic for have a perfect forecast, B = 0.  thus, we keep adjusting, monitoring and updating the forecast, production, and schedules.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/VectorsAddition.gif&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Employee performance appraisal is the key part of a manager’s responsibility. The principle behind appraisal is to use constructive feedback to improve the employee’s performance and productivity. 
Thus, Andy encourages all managers to provide feedback that are doable, concrete, and helpful while maintaining a perspective that we focus on tasks and not on people. I am amazed that Andy spends his precious time to edit other manager’s performance appraisal report just to ensure the quality of these reports reflect his principles and objectives.&lt;/p&gt;

&lt;p&gt;Perhaps, this is more relevant to high tech firms, knowledge based jobs are more difficult to ascertain the true contribution of an employee towards a final output. One reason is that from the time he or she performs a task to the time all the relevant outcomes pertaining to the decision and behaviors show up, the time gap can be years apart, yet performance review occurs annually. It is often that the manager can only observe some but not all contributions and harms. Using a analogy to explain this concept.
The light can see from distant stars are not the light they are emitting right now. The light comes from very very far away so what we see are what thy look like many many years ago. The time lag is astronomical. Performance evaluation is very real as it tights to bonuses paid to the employees. 
Andy formula for performance bonus is 1/3 individual performance, 1/3 team performance, 1/3 company performance. Good performance deserves promotion.&lt;/p&gt;

&lt;p&gt;In addition to ability as a factor for good work performance, the latter part is about motivation. He talks about the Maslow’s hierarchy of needs. As we stand today, and of the writing of this book, 1995, it is fair to say that most have achieved the basic shelter and safety needs, especially those who worked for Intel. So to motivate them, we need to look to higher levels such as a sense of achievement, self actualization, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/OIP-C (2).jpg&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Speaking of motivating employees, I have also come across some other articles that discuss incentives and compensation of senior executives (management needs to be motivated just as well).&lt;/p&gt;

&lt;p&gt;What is interesting is that to motivate senior staff, people pay them far far more than average workers. While it is understandable that their work requires more skills and are harder and take on more responsibility, the gap is growing since 1970 and widens exponentially since 1990 and fluctuates at around 300 times during 2000s.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image216885.jpg&quot; alt=&quot;breakfast&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To put this in perspective, it shocks me to know that a CEO only needs to work half a year to make more money than an average worker will ever make in a lifetime.&lt;/p&gt;

&lt;p&gt;Performance review and delivering the “news”. During a performance review, the manager delivers his or her opinions and judgement on the work that his or her subordinates have done over that period. In Andy’s experience, he has dealt with both types of employees. Let’s start with the worse.&lt;/p&gt;

&lt;p&gt;It is normal to react emotionally to bad news. There are 3 stages of an emotional reaction. The reaction starts from ignoring the news, denying the bad performance, and blaming others for the results. It is hard to resolve the emotion entangled in each of the three stages. A tip would be to send the report to the subordinates prior to the meeting, leaving ample of time for him or her to read and think through the issues properly at his or her own pace.&lt;/p&gt;

&lt;p&gt;However, if the manager and the subordinates can both get over with the aforementioned THREE emotional reactions, they can then take responsibility and find a solution. Taking responsibility and finding a solution is less emotional and more engineering. ** The goal is to turn the performance and behaviors around. ** Persistently poor performance eventually is met with layoffs.&lt;/p&gt;

&lt;p&gt;Self-review can also be useful. It demonstrates one’s ability to reflect and also it shows another set of skills - think critically about the work done.&lt;/p&gt;

&lt;p&gt;Good performers deserve a proper and throughout review, even more so than poor performers (more on this later!). A manager must always give constructive feedback to these subordinates who have done a job exceptionally well, so that they can keep improving. In turn they become ready for a promotion when the time and opportunities arrive.&lt;/p&gt;

&lt;p&gt;However, in such circumstances, a manager may unconsciously choose to spend more of his or her time and effort in helping the under-performers, instead of the Ace performers. This bias is considered inappropriate in Intel culture and management practice.&lt;/p&gt;

&lt;p&gt;At the end of the day, the main thing is to what gets performance improved. ** It does not matter as long as we focus on the task-relevant feedback and give helpful advice.**&lt;/p&gt;

&lt;h2 id=&quot;why-do-we-form-a-team&quot;&gt;Why do we form a team?&lt;/h2&gt;

&lt;h4 id=&quot;market-perspective&quot;&gt;Market perspective&lt;/h4&gt;
&lt;p&gt;The customers’ demand are highly complex and are evolving all the time. It is very tricky to navigate this landscape. On top of the demand, suppliers can also exert an influence on a business that faces competition from competitors. So we need a team of talented people to make a business work.&lt;/p&gt;

&lt;h4 id=&quot;efficiency-perspective&quot;&gt;Efficiency perspective&lt;/h4&gt;
&lt;p&gt;Andy reckons that the output of management is the output of the manager and the leverage of the team, or department. Without a loss of generality, what he is referring to is people under this purview or commands or influences. So, a team is a way to amplify the manager outputs, a form of leverage.&lt;/p&gt;

&lt;h4 id=&quot;pragmatic-perspective&quot;&gt;Pragmatic perspective&lt;/h4&gt;
&lt;p&gt;The tasks of meeting customers’ demands often involve many disciplines of knowledge and skills, so it is not practical to expect a single individual can do all of them. Thus a team with a set of diverse skills and knowledge is a must.&lt;/p&gt;

&lt;p&gt;How to mange a team?
Andy gives some of his own experiences at Intel and ways to guide the reader.
The first tip is to pay attention to leverage.
Because of the manager output formula, we notice that if the leverage is not applied correct, the output can be worse. For examples, the leverage can be positive or negative. We strive to achieve a positive leverage that is greater than 1.&lt;/p&gt;

&lt;p&gt;Figuratively speaking, Andy draws this.
&lt;img src=&quot;/assets/images/high_output_management/image98629.jpg&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image98861.jpg&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In particular, he suggests that we have 3 ways to improve the output of a manager and the team.
We can
    1)  use a more effective approach
    2)  spend less time
    3)  do more meaningful activities&lt;/p&gt;

&lt;p&gt;I just cannot help but to applaud. I personally have met friends  who would be willing to try something even though it is destined or extremely unlikely to succeed. I have to shamefully admit I have done the same. Nothing is more time wasting than to spend time and resources on a project that is going to be doomed.&lt;/p&gt;

&lt;p&gt;This is especially the case when someone fails to evaluation the prospect of the project objectively. 
They let their emotions decide for them. Sadly, unless your emotion is highly tuned to reflect the objective reality. The motion-led decision making often leads to less than ideal output.&lt;/p&gt;

&lt;p&gt;Funny enough, ** someone once says that the problem of the world is that good behaviors feel bad and bad behaviors feel good. **&lt;/p&gt;

&lt;p&gt;Thus, I think what Andy tries to teach us and what many wise sayings as well is that we need to have the right incentives that fully align with the behaviors we want to encourage.
So that good behaviors feel good and bad behaviors feel bad.&lt;/p&gt;

&lt;p&gt;From fundamental psychology courses, we also need to make sure the feedback is immediate, not delayed. Otherwise people find it hard to learn the right lessons.&lt;/p&gt;

&lt;h4 id=&quot;ways-to-manage-a-team&quot;&gt;Ways to manage a team&lt;/h4&gt;

&lt;p&gt;Meetings or team meetings are a part of manger work and responsibilities.
Andy thinks that meetings are meaningful and useful if done properly. He spends a good part of his daily time at various types of meetings as described in this book.&lt;/p&gt;

&lt;p&gt;A meeting is useful on two fronts.
A meeting is an effective way to have a one-on-one communication. A one-on-one communication is very helpful when the manager needs to teach a subordinates about the job and pass along the relevant information. It is very intriguing that Andy advises a manager to pass on the most familiar job to his or her subordinates, who can then be evaluated more properly and accurately. The most familiar job a manager does know about is also less ambiguous. That is a key to delegation, I think. Thus the manager can focus on more uncertain and complicated tasks.&lt;/p&gt;

&lt;p&gt;Moreover, a team needs to have a team meeting, which is different from a one-on-one. It has more participants attending. Concretely, Andy suggests that there are a few big categories of team meetings, namely routine regular team meetings and focused meeting.
Regardless of the categories, time costs money, so managers must ensure that only those who need to attend the meeting, and only those who can contribute to the meeting are enlisted.&lt;/p&gt;

&lt;p&gt;What do we mean by their contribution? Their contribution refers to the added value they provide in the decision making process. 
Routine regular team meetings are useful for review and planning progress. They are very useful for monitoring and prevent problems if we see warning signs. Since it is regular and the agenda is pretty much well known in advanced, everyone prepares well for this kind.&lt;/p&gt;

&lt;p&gt;A focused meeting is about a particular incident, and those who initiate the meeting would like to have a decision made by the end. Since we cannot know when the incident arises, otherwise we could have prevented it from happening if we have not run out of luck. Thus, a focused meeting is a bit more ad hoc, so it is trickier.&lt;/p&gt;

&lt;p&gt;We need to ensure several aspects are preform appropriately to ensure its efficiency.
    1) We need to decide who the attendees should be. Once assigned, they are required to attend the meeting because this is part of their jobs. 2) What we need to discuss and explain , especially regarding with the problem at hand.&lt;/p&gt;

&lt;p&gt;During the meeting, when each employee presents his or her knowledge, views and opinions about the problem, we need to figure out what information has got given and what else may be needed. By the end of the meeting, we need to have a doable plan, with deadlines and responsibility and accountability.&lt;/p&gt;

&lt;p&gt;Nothing would work if the meeting atmosphere is toxic. Andy cannot emphasize enough that we need to cultivate a culture that we dare speak our mind, and that we dare listen to opposing opinions. 
However, Andy and many others have noticed confirmation bias. The bias comes from the fact that human nature has a propensity to listen to what he or she likes or knows. And we like to let others speak first by withholding our own opinions.&lt;/p&gt;

&lt;p&gt;I think it sounds like risk management, too risky to be the first to speak, for whatever you say may anger other members of the group. So those who speak later can have time and observe where the general opinion is heading and just to say something  along those lines. With that said on the behavior of members of the team, it is not hard to imagine that we must urge a team member to express correctly, listen properly, and tolerate (or even celebrate) diverse opinions from other members.&lt;/p&gt;

&lt;p&gt;A successful meeting often leads to making better decisions. More on this later.&lt;/p&gt;

&lt;p&gt;Andy thinks the size of the team should be fewer than the slices of a pizza, 8.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/667.jpg&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The general rule of thumb is that a manager spends typically few hours per week with each team member. So we can only have around 6-8 members. Too many would mean the manager has no time for his own work.&lt;/p&gt;

&lt;p&gt;Today, we have technology that is far more advanced than 1995 (the year this book was first written). With better technology, we can communicate information and share documents, videos, etc. more easily, so we are able to use meetings for other functions such as explaining methods, opinions and experiences, and discussions.&lt;/p&gt;

&lt;p&gt;The overall process can be very inefficient. This book is about high output management. What an oxymoron. Andy understands this objection. But he thinks that if everyone can make up his or her own decision. There is no cohesion and group decision, and perhaps, worse decisions would be made as a result. After all, original sin of management is the discrepancy between those with the power to decide and those with the knowledge to do so.&lt;/p&gt;

&lt;p&gt;To assist us in group decision making, he has a step-by-step guide.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1) We ask what needs to be decided upon right now at this meeting? Oftentimes some decisions had already been made at other meetings that we don&apos;t want to regurgitate or ruminate on them.
2) Andy gives an example. Should we build a new factory building at a nearby Intel existing site in the Philippines or should we build another new factory farther away?
3) When do we need to make this decision? Because building a factory takes time and Intel needs a new factory for production. Working the math backward, we need to have the final decision made within 1-2 months.
4) Who should make the decision? The mangers in the Philippines.

5) Before making the decision, who should we consult? The team that work at the nearby factory and the team that work on the farther site.
6) Who should have the power to ratify or veto the decision? Andy / CEO
7) Who should be notified of the decision? Chairman and the rest of the teams
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whenever there is a sudden and unexpected change in the direction of work from top management, it is important to announce this shocking news and let everyone else have some time to absorb it.&lt;/p&gt;

&lt;p&gt;Team structure is another aspect of the team. Our concerns include how to put the teams together with other teams. This problem arises when we try to scale up the business.&lt;/p&gt;

&lt;p&gt;Going back to the breakfast factory example at the beginning of the book, the business has become such as success that it is ready to scale nationwide.
The problem we face is&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How to structure the teams located all around the country?&lt;/li&gt;
  &lt;li&gt;How to handle the logistics, supply, employment, etc?&lt;/li&gt;
  &lt;li&gt;What dishes to be standardized our menu?&lt;/li&gt;
  &lt;li&gt;How to standardize raw material supply and operating hours? Or should we avoid standardization?&lt;/li&gt;
  &lt;li&gt;How to ensure quality across so many outlets?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While there is of course no “correct” answer to the above questions, Andy uses a two-layer management framework that is depicted in the organizational chart to address them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image155096.jpg&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image159204.jpg&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The figure shows two separate branches. The employee, Cindy, shows up once on each branch. The top branch indicates the production branch hierarchy. The bottom branch indicates the coordinating group hierarchy. The production branch supervisor monitors and supports Cindy’s work; the process coordinating group needs the output of Cindy’s work. The two branches run in parallel. Also, notice that a supervisor cannot have too many subordinates underneath. Remember the pizza rule: a maximum of 6-8 subordinates.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image162157.jpg&quot; alt=&quot;breakfast&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The working environment influences human behaviors, and it is considered a continuum of CUA factor. The CUA factor is an abbreviation for the scale of complexity, uncertainty and ambiguity. 
For instance, if we cannot say exactly how long a project is going to take, this increases uncertainty. 
If we cannot say exactly what we need to do to complete it, this task is highly ambiguous. If we cannot say exactly how many parts are there, it is highly complex.&lt;/p&gt;

&lt;p&gt;The human behaviors are driven by self-interest all the way to group interest. The figure below simplifies the interaction of those two scales into 4 quadrants. The free market forces are best served with low CUA and by highly self-interested individuals. The contractual obligations come about as we motivate individual to pursuit self-interest to group interest. If the CUA is high and our motivation is largely driven by self-interest, management has a hard time managing. Fostering cooperate culture is the key to maintain optimality (from a manager perspective) in a high CUA environment.&lt;/p&gt;

&lt;p&gt;Concretely, we can explore some real life examples. In a fair and transparent spot competition,  the rules are clear, route is known, and the objective is set. Its CUA factor is low. Each player or each team is driven by their interest. The rule is the fastest gets the trophy.  From management perspective, the outcome is many teams or players got filtered out based on one particular metric. Thus, the output is a selection of the best of the best.&lt;/p&gt;

&lt;p&gt;Sometimes, even in a low CUA environment, motivation by self-interest can be sub-optimal compared with motivation by group interest.&lt;/p&gt;

&lt;p&gt;Let me digress a bit to explain why sub-optimality can arise. In game theory, economists illustrate a situation, commonly known as the prisoner’s dilemma, which involves the prisoners who have high self-interest and low trust in a low CUA environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/algorithms_to_live_by/prisoner_Dilemma.png&quot; alt=&quot;Picture description&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The payout for 4 different scenarios are illustrated in the figure. What is really interesting is that, the rules are very clear and the penalty (years in jail) are well listed in advance. For each prisoner, he can only decide either to confess or to remain silent. However, from his perspective, the payout of remaining silent is low, serving a total of 21 years, whereas the payout of confession is high, serving just 5 years. Therefore, both prisoners would confess. However, an outside observer knows that the most optimal actions to take is for both to remain silent. This way, the payout is the highest with each serving only 1 year. The concluding remark is that we , managers, need to introduce extra measures to guide the behavior to optimality.&lt;/p&gt;

&lt;p&gt;One method is to form a contractual agreement. Another is culture and social expectation. In addition, rules are unsuitable in the high CUA environment. The rules are fixed, lacking any flexibility in the dynamic environment. Their enforcement can be tricky. However, culture is more adaptive, constantly evolving. Its flexibility is more useful in a dynamic environment.&lt;/p&gt;

&lt;p&gt;Management usually pays employees more if the nature of the job contains higher CUA level. So if we want to keep wage cost low, we better split, design, and reorganize tasks, so that they are as low in CUA as possible.&lt;/p&gt;

&lt;p&gt;It is extraordinarily hard to hiring an outside CEO to manage a company that is in a crisis and to steer the ship away from the next trouble. An outside CEO, even though he or she may be very talented in managing companies, he or she may not able to execute a rescue plan that eradicates the problem at the root. If the cooperate culture was part of the problem, then not knowing the culture is not part of the solution.&lt;/p&gt;

&lt;h2 id=&quot;the-high-output-of-corporation&quot;&gt;The high output of corporation&lt;/h2&gt;
&lt;p&gt;Intel is a chip manufacturer. It sells, produces, and develops microprocessors. Its product ranges are not narrow. 
Here, Andy argues that the firm is structured in two separate yet interconnected blocks.&lt;/p&gt;

&lt;p&gt;We see that figure below.&lt;/p&gt;

&lt;p&gt;The vertical column represents functional units.
The horizontal row represents the business units.&lt;/p&gt;

&lt;p&gt;The functional units are shared among all business units. This way, Intel can standardize the procedures of sales, manufacturing, technology development and administration. It also enjoys the economy of scale; it houses 70% of all Intel employees.&lt;/p&gt;

&lt;p&gt;However the business units serve to adapt to market preferences. For instance, the menu of the breakfast factory varies depending the local tastes and raw material availability. The system business group, microprocessor business group may compliment each other. For instance, say a laptop requires both the WiFi card, microprocessor and many other components that Intel manufactures. Then, each group does not advertise separately. Instead, they sell all components as a bundle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image155084.jpg&quot; alt=&quot;breakfast&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I have seen similar structure in my work as a programmer. Scikit learn, a python package for machine learning, categorizes its APIs by algorithm types; PyTorch, a python package for training deep neural networks, lists out its tutorial by applications.&lt;/p&gt;

&lt;p&gt;From sales to delivery, we have learned that we need to pay attention to choke points. Here we revisit the concept from a corporation perspective. In this diagram, we can see the construction branch at the top and a sales branch at the bottom. The choke point is that the manufacturing plants want the order to come in before making the product and then send the product to its customer. To minimize this coke point, it would be great to predict the future demand and start making the products prior to the arrival of the actual sales. This way, the choke point of the lag time in manufacturing is reduced. And if so, the next choke point becomes logistic, outside of Intel control. As far as Intel  is concerned, it has sped up the order and cut down customer wait time.&lt;/p&gt;

&lt;p&gt;The greatest management challenge is the discrepancy between knowledge and power. Most managers do not have time to investigate and study the technology that is rapidly advancing everyday. Their understanding of the technology is not as deep as their technical staff. 
Like Andy, the managers take phone calls from customers and convene meetings with various functional departments and business groups, so they understand the needs and the wants of the market. However, the difficulty remains despite such effort. It is hard to know how to connect those in the position of power to make the decision with those in the position of knowledge that is needed to make a sound and balanced judgment&lt;/p&gt;

&lt;p&gt;Not coming across as a definite answer, Andy recommends every staff play multi-roles at the firm. This flexibility allows the staff to contribute towards issues differently at various times. For instance, Andy can be the leader in one meeting, but he is just a participant in another meeting.&lt;/p&gt;

&lt;p&gt;Plans&lt;/p&gt;

&lt;p&gt;The plans are to be written on the most senior management level; Intel plans about 5 years ahead. Every year the plan is updated and revised accordingly. 
The strategic thinking propagates down the levels of management. It is important to ensure actions at various levels constructively help Intel to achieve its overall strategic objectives. That is proper alignment.&lt;/p&gt;

&lt;p&gt;The most crucial element in running the firm is the promotion of all excellent staff members. Intel has some basic principles for promotion. 1 only promote those whose performance exceeds expectation, not their potential to perform. When the time is ready, the firm promotes. However, it  is very important that every newly promoted staff got given time and training in the new role. This idea links back to the task-maturity concept. The funny thing is that Intel continues to promote the staff to the next level up if once again he exceeds the expectation. Like the chart shown below, each promotion comes with higher financial reward. 
The key element is to let every staff know that if one performs well beyond expectation, one gets promoted. Hard work and talent are fairly recognized and appreciated.&lt;/p&gt;

&lt;p&gt;In some sense, Andy himself rises to where he is by merit. However, like the Peter principle, the staff are promoted to the level that they become less competent. In addition, those that are good at the job at the junior level may not indicate their suitability on a more senior level. It is okay to demote someone after a wrong or premature promotion if he or she needs more time to adjust. Once, he is ready. The management then promote him again.&lt;/p&gt;

&lt;p&gt;I reckon the problem of scale of the company is boiled down to management. 
This promotion scheme suggests that to overcome the scale problem we need to manage those who are talented and capable. In turn, they then help us mange other capable and talented employees.&lt;/p&gt;

&lt;p&gt;Is this a new idea?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/Screenshot 2023-10-19 083036.png&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we turn to history for guidance, I realize that nearly 2000 years ago, during the early years of the Han dynasty in China. The emperor at that time discussed with his best general about the leadership and talent in commanding an army among the rest of his generals. The emperor asked his best general how many troops he could command. The reply was about 100 thousands. Then, the emperor asked how many troops the best general can command. Instead of 100 thousands, the reply was infinite. The emperor laughed, and couldn’t help but wonder if the best general can command so much more troops, why he wasn’t the emperor. The best general answered that while the emperor couldn’t lead solders, he could lead leaders. That was why the best general was working for him. Furthermore, he believed such ability was by nature, not nurture.&lt;/p&gt;

&lt;p&gt;My closing remark is that managing people is a skill, an art, not knowledge. We all need plenty of practice to master such a skill.&lt;/p&gt;</content><author><name>Wilson Fok</name></author><category term="Reading" /><summary type="html">Introduction Hello reader, In this series of blog posts, I am going to share with you some lessons I stole from reading “high output management” written by Andrew Glove. Instead of just regurgitating what Andrew said chapter by chapter, I reckon I could do a more fruitful job by presenting in a way that is consistent with my own understanding. Andrew is a big picture guy. After all, he was the CEO of Intel for many years. The big picture problem a company face in a competitive market is to bridge the gap between those who have the power to make managerial decisions and those who have the knowledge to do so. The US market is run by private enterprises that emphasize on competitiveness. The reason is that high output management is not targeted to those institutions that are judged more by procedures or correctness than results or those have monopoly. Thus, all the following discussion only concerns firms that compete to supply the most suitable products to meet market demands. Market change is constant. However, we have two distinctive types of change. One is incremental and slow. The other disruptive and rapid. The latter has been discussed in Andrew’s book, “only the paranoid survive: how to exploit crisis points”. He talks about his experience as the decision makers during a memory chip business crisis in the 70-80s. The former is the main focus of “high output management”. The demand of the market as described in this book is computer chips, that was the main business of Intel at that time. However, the management lessons are just applicable to other products outside of the chip industry. Fundamentally, Intel was a tech and manufacturing company. To analyze the output of Intel, we examine four pillars, and they are: The output of capital goods or equipment, The output of employees, The output of teams, The output of corporation. I shall walk you through each and every pillar in the subsequent sections. Author’s background Taken from https://www.britannica.com/biography/Andrew-S-Grove on Dec 6 , 2023 Andrew S. Grove, born in 1936 and died in 2016, was often credited as one of the key leader in the management team of Intel during the time when memory storage device business got destroyed by Japanese competitors and launched Intel into the burgeoning microprocessor business. The period during which Intel shifted out of the memory business and embraced the microprocessor business had been written by Andrew in his “only the paranoid survive: how to exploit crisis points”. His career and the rise of Intel are linked. He entered Intel when it was small. He moved all the way up to management ladder. When he left, Intel was massive. The high output of capital goods or equipment Borrowing the breakfast factory example used in this book. I think the equipment are the most obvious and perhaps the easiest part to manage out of employees, teams and corporation. If we run a breakfast factory, we need some capital investment or cooking apparatus to help us prepare an English breakfast. What a customer wants is cheaper, faster, tastier. An English breakfast constitutes 3 separately prepared items: a fully boiled egg, a piece of toast, a cup of coffee. An egg boiler boils an egg. A toaster prepares the toast. A coffee brewer brews coffee. Since boiled eggs, toasts and a cup of coffee can be prepared separately, we have them prepared in parallel to reduce our customer wait time and to improve turnover. As shown in the workflow diagram below. Like a running race of 4x400m, the speed of the team is determined by its slowest member. When we make an English breakfast, our speed is limited by our slowest step. In this example, our slowest step is waiting for a toaster. If we could shorten the wait for the toaster , we reduce choke point and cut down the wait time. Thus, we now know that the output of capital goods depend on its choke point. If we can reduce them, then our output rises. To continue with out toaster problem, Here are a few options, We can buy a toaster with more slots, so that we can prepare more toasts in one setting. We can buy more toaster that operates side by side. Afterward, we can see that out next choke point which is the time we need to boil an egg. To shorten the time of boiling an egg, we can try To boil more eggs in one go (batch operation), Or we can buy a boiler that have got a conveyor belt structure which allows us to continuously collect boiled egg at the end outlet or with a shorter time interval (continuous operation). By reducing the time spent at each step, the process becomes more efficient and faster. Of course, the cost of apparatus and the demands on English breakfasts have to be considered. Revenue and sales volume determine how much we produce. More precisely, it is the forecast of these two factors. Andy talks about this more in later section. Proposition: Inputs that are processed correctly with the right apparatus over time produce outputs. The management of capital goods is about the input, process, apparatus and ultimately output. Oftentimes, it is better to foresee potential problems and prevent them from happening in the first place. It is easy to understate the extent or the chances of a problem; treating that problem when it arises can incur a hefty bill and delays . In this book, he said what if our supply is cut off, we need to have some inventory or stock that is enough for 1 business day. Thus, we must balance the cost of storage and space required and the impact of such practice might have on food quality etc. Otherwise, we have no English breakfast to sell after the inventory of raw ingredients is depleted. During the supply chain disruption over the COVID pandemic, we witnessed supply-side inflation and shortages. If we can catch a problem, it is better to catch it early on in the process rather later. Its remedy is going to be more expansive as the situation deteriorates which it often does when it is left on its own device. So to catch problem early, we need to monitor and detect signs of problems. The monitoring and detection are the key. We are told to monitor all aspects of the production from input or raw materials, the cooking or preparation process and of course the final product after assembly, the complete English breakfast on the tray. The quality of the final product is very important, and as the business grows, we ought to put its quality high up on our priority list. The rationale is that we cannot figure out what every customer may do with the final product. (No, the breakfast example makes little sense here. But microprocessor can perform a wide range of computing tasks depending on computer software, so the rationale makes sense. Andrew mentioned about the recall of Intel microprocessor chips as they produced a floating point error during complex calculations) One more thing that is very crucial to the output of the capital is the training of an operator. The operator must learn to use the equipment properly. In his experience, one worker who normally needs 200 hours to learn how to operate a wafer fabrication machine. However, in the case without sufficient training, a worker did not notice a warning signal from the equipment until so much time had passed and so much material had gone through the wafer machine. These semi-processed silicon wafers were of no use as they were faulty and unsuitable for further processing. With that, Intel lost 1 million worth of raw silicon wafer and the time needed to redo that batch. To monitor properly, we paradoxically need more equipment like senors , detectors, indicators, and meters, etc. Inside our breakfast factory, we use thermometer to record and measure temperature of water in the boiler continuously. We size up the eggs, we detect all kinds of problems, the type of eggs, the quality of bread, the process and the kitchen hygiene. Applying automation and streamlining steps wherever possible. With the explosion of AI and robotics, it is not hard to image that machines are getting “smarter”. And the internet of things are giving smarter machines more sensing capabilities. More capability, more steps can be automated. More sensor , more awareness, more able to detect more problems. More problems detected and caught early leads to cheaper production by prevention, better product quality, and shorter downtime. Perhaps, this may be the driving force behind the statement: technology is deflationary. The high output of employees The way we achieve high output on capital goods is different to the way we achieve high output on people. We now consider the next pillar: the high output of employees or human capital. Here I must stress that we are looking at an individual employee. Later we will examine the team of individuals. We first begin the comprehension of an employee by understanding the life cycle of an employee at a company. We begin the cycle by first acknowledging there is a need to hire someone in the labor market and there is a budget for the role. A job ad is written and posted on the internet. We got some potential candidates whose CVs are reviewed and screened. We schedule for an interview with most relevant candidates and conduct a background check. If we discover some interesting and new information about the candidates, we may consider a second interview to talk with the person further. Next, if the candidate pass all the stages, an offer is sent. For those who accept the offer, we use a probation period to see whether our new employee fits with the Intel culture. More on culture later. I reckon Andy thinks the corporate culture underpins many things that happen at Intel. I personally believe that as a CEO of Intel, he considers his job to nurture, foster and maintain this cooperate culture. In this book, he not only shares with us his story of a successful hire, but also an unsuccessful one. It is common sense that relevant background and training must be met for a job. For instance, engineering background is required for an engineering role – the know-hows and problem solving. Yet, Andy shared with us in this book a story of someone without the background training in the domain, but he got the right mindset and thinking. He was hired. He explains that he gives a test to someone with the right educational background but with little or no experience in the industry Intel is in. He converses with that person. Since he knows the candidate has no experiences, he allows the candidate to probe him by asking questions regarding the context. With common sense, logical deduction, and guesswork, the candidate comes up with a step by step solution that makes sense and is close enough to the answer Andy had in mind. However, he mentioned that despite using the same recipe for hiring, he had hired someone who is good at being interviewed but bad at getting the job done. Thus, at this stage, the manager needs to evaluate the employees’ performance and decide to Promote if the employee performs well, Demote if the employee performs poorly, or Lay he or she off if the employee after proper training and feedback remains unsuitable for the job and his or her performance is below expectation. On the other hand, when anyone decides to leave and announce their decision to the manager, depending on the view the manager has on them, he can make one of the two moves. If that employee is good at his or her job, it is important that the manager tries to keep that person within the company. To do so, the manager must learn to converse with the employee to understand the motivation behind his or her leaving. His tip is to ask why he is about to leave (the motivation). The first time you ask that question, the reply is always mechanical, standard and well rehearsed with preparation. Then, you try to ask and probe further, he or she may reveal the true intention and belief. One of the most important aspect of a manager’s responsibility is to develop the subordinates during their time at Intel. Like the case with capital goods, the machine is not going to be productive if the operators misuse it or fail to operate it as intended. Andy summarizes what drives good work performance into two factors. They are the ability and the willingness to get the job done. Skills are improved with proper tutorials and training. Therefore, he proposes a concept called task-relevant maturity. Task relevant maturity is to make sure managers do not confuse someone with potential with someone who can do the job well already. In particular, not to let age, experience of prior jobs, friendship, and educational background confuse with the actual task at hand. While these attributes may be indicative of future performance, they may not be so now. Why task relevant? If someone is a good salesperson and has received a promotion to team lead based on his or her past sales records, he or she has a low task-relevant maturity as a manager but high task-relevant maturity as a salesperson. His or her management task-relevant maturity rises while he or she receives more training over time. It is important that at the beginning when task-relevant maturity is not high, more monitoring and support by senior staff are warranted. Once he or she becomes capable at doing the job in the new roles, they can do the job independently with less supervision. Following this principle, it is obvious that a manager tends to delegate his or her most familiar tasks and teaches his or her most familiar skills. Andy mentions that here one-on-one meeting can be helpful. Since every individual communication style is idiosyncratic, we need to explore and discover our own style and method. Andy management emphasizes planning, an indispensable element of work. It is a bit similar to the old adage: you reap what you sow. The idea is that factory makes to forecast, not to order. The just-in-time management is getting so popular nowadays that it is not hard to comprehend. I use the algebra analogy to visualize this. If A is our forecast, B is the actual (delayed measurement). What we actually should have done is A+B. It would be great but unrealistic for have a perfect forecast, B = 0. thus, we keep adjusting, monitoring and updating the forecast, production, and schedules. Employee performance appraisal is the key part of a manager’s responsibility. The principle behind appraisal is to use constructive feedback to improve the employee’s performance and productivity. Thus, Andy encourages all managers to provide feedback that are doable, concrete, and helpful while maintaining a perspective that we focus on tasks and not on people. I am amazed that Andy spends his precious time to edit other manager’s performance appraisal report just to ensure the quality of these reports reflect his principles and objectives. Perhaps, this is more relevant to high tech firms, knowledge based jobs are more difficult to ascertain the true contribution of an employee towards a final output. One reason is that from the time he or she performs a task to the time all the relevant outcomes pertaining to the decision and behaviors show up, the time gap can be years apart, yet performance review occurs annually. It is often that the manager can only observe some but not all contributions and harms. Using a analogy to explain this concept. The light can see from distant stars are not the light they are emitting right now. The light comes from very very far away so what we see are what thy look like many many years ago. The time lag is astronomical. Performance evaluation is very real as it tights to bonuses paid to the employees. Andy formula for performance bonus is 1/3 individual performance, 1/3 team performance, 1/3 company performance. Good performance deserves promotion. In addition to ability as a factor for good work performance, the latter part is about motivation. He talks about the Maslow’s hierarchy of needs. As we stand today, and of the writing of this book, 1995, it is fair to say that most have achieved the basic shelter and safety needs, especially those who worked for Intel. So to motivate them, we need to look to higher levels such as a sense of achievement, self actualization, etc. Speaking of motivating employees, I have also come across some other articles that discuss incentives and compensation of senior executives (management needs to be motivated just as well). What is interesting is that to motivate senior staff, people pay them far far more than average workers. While it is understandable that their work requires more skills and are harder and take on more responsibility, the gap is growing since 1970 and widens exponentially since 1990 and fluctuates at around 300 times during 2000s. To put this in perspective, it shocks me to know that a CEO only needs to work half a year to make more money than an average worker will ever make in a lifetime. Performance review and delivering the “news”. During a performance review, the manager delivers his or her opinions and judgement on the work that his or her subordinates have done over that period. In Andy’s experience, he has dealt with both types of employees. Let’s start with the worse. It is normal to react emotionally to bad news. There are 3 stages of an emotional reaction. The reaction starts from ignoring the news, denying the bad performance, and blaming others for the results. It is hard to resolve the emotion entangled in each of the three stages. A tip would be to send the report to the subordinates prior to the meeting, leaving ample of time for him or her to read and think through the issues properly at his or her own pace. However, if the manager and the subordinates can both get over with the aforementioned THREE emotional reactions, they can then take responsibility and find a solution. Taking responsibility and finding a solution is less emotional and more engineering. ** The goal is to turn the performance and behaviors around. ** Persistently poor performance eventually is met with layoffs. Self-review can also be useful. It demonstrates one’s ability to reflect and also it shows another set of skills - think critically about the work done. Good performers deserve a proper and throughout review, even more so than poor performers (more on this later!). A manager must always give constructive feedback to these subordinates who have done a job exceptionally well, so that they can keep improving. In turn they become ready for a promotion when the time and opportunities arrive. However, in such circumstances, a manager may unconsciously choose to spend more of his or her time and effort in helping the under-performers, instead of the Ace performers. This bias is considered inappropriate in Intel culture and management practice. At the end of the day, the main thing is to what gets performance improved. ** It does not matter as long as we focus on the task-relevant feedback and give helpful advice.** Why do we form a team? Market perspective The customers’ demand are highly complex and are evolving all the time. It is very tricky to navigate this landscape. On top of the demand, suppliers can also exert an influence on a business that faces competition from competitors. So we need a team of talented people to make a business work. Efficiency perspective Andy reckons that the output of management is the output of the manager and the leverage of the team, or department. Without a loss of generality, what he is referring to is people under this purview or commands or influences. So, a team is a way to amplify the manager outputs, a form of leverage. Pragmatic perspective The tasks of meeting customers’ demands often involve many disciplines of knowledge and skills, so it is not practical to expect a single individual can do all of them. Thus a team with a set of diverse skills and knowledge is a must. How to mange a team? Andy gives some of his own experiences at Intel and ways to guide the reader. The first tip is to pay attention to leverage. Because of the manager output formula, we notice that if the leverage is not applied correct, the output can be worse. For examples, the leverage can be positive or negative. We strive to achieve a positive leverage that is greater than 1. Figuratively speaking, Andy draws this. In particular, he suggests that we have 3 ways to improve the output of a manager and the team. We can 1) use a more effective approach 2) spend less time 3) do more meaningful activities I just cannot help but to applaud. I personally have met friends who would be willing to try something even though it is destined or extremely unlikely to succeed. I have to shamefully admit I have done the same. Nothing is more time wasting than to spend time and resources on a project that is going to be doomed. This is especially the case when someone fails to evaluation the prospect of the project objectively. They let their emotions decide for them. Sadly, unless your emotion is highly tuned to reflect the objective reality. The motion-led decision making often leads to less than ideal output. Funny enough, ** someone once says that the problem of the world is that good behaviors feel bad and bad behaviors feel good. ** Thus, I think what Andy tries to teach us and what many wise sayings as well is that we need to have the right incentives that fully align with the behaviors we want to encourage. So that good behaviors feel good and bad behaviors feel bad. From fundamental psychology courses, we also need to make sure the feedback is immediate, not delayed. Otherwise people find it hard to learn the right lessons. Ways to manage a team Meetings or team meetings are a part of manger work and responsibilities. Andy thinks that meetings are meaningful and useful if done properly. He spends a good part of his daily time at various types of meetings as described in this book. A meeting is useful on two fronts. A meeting is an effective way to have a one-on-one communication. A one-on-one communication is very helpful when the manager needs to teach a subordinates about the job and pass along the relevant information. It is very intriguing that Andy advises a manager to pass on the most familiar job to his or her subordinates, who can then be evaluated more properly and accurately. The most familiar job a manager does know about is also less ambiguous. That is a key to delegation, I think. Thus the manager can focus on more uncertain and complicated tasks. Moreover, a team needs to have a team meeting, which is different from a one-on-one. It has more participants attending. Concretely, Andy suggests that there are a few big categories of team meetings, namely routine regular team meetings and focused meeting. Regardless of the categories, time costs money, so managers must ensure that only those who need to attend the meeting, and only those who can contribute to the meeting are enlisted. What do we mean by their contribution? Their contribution refers to the added value they provide in the decision making process. Routine regular team meetings are useful for review and planning progress. They are very useful for monitoring and prevent problems if we see warning signs. Since it is regular and the agenda is pretty much well known in advanced, everyone prepares well for this kind. A focused meeting is about a particular incident, and those who initiate the meeting would like to have a decision made by the end. Since we cannot know when the incident arises, otherwise we could have prevented it from happening if we have not run out of luck. Thus, a focused meeting is a bit more ad hoc, so it is trickier. We need to ensure several aspects are preform appropriately to ensure its efficiency. 1) We need to decide who the attendees should be. Once assigned, they are required to attend the meeting because this is part of their jobs. 2) What we need to discuss and explain , especially regarding with the problem at hand. During the meeting, when each employee presents his or her knowledge, views and opinions about the problem, we need to figure out what information has got given and what else may be needed. By the end of the meeting, we need to have a doable plan, with deadlines and responsibility and accountability. Nothing would work if the meeting atmosphere is toxic. Andy cannot emphasize enough that we need to cultivate a culture that we dare speak our mind, and that we dare listen to opposing opinions. However, Andy and many others have noticed confirmation bias. The bias comes from the fact that human nature has a propensity to listen to what he or she likes or knows. And we like to let others speak first by withholding our own opinions. I think it sounds like risk management, too risky to be the first to speak, for whatever you say may anger other members of the group. So those who speak later can have time and observe where the general opinion is heading and just to say something along those lines. With that said on the behavior of members of the team, it is not hard to imagine that we must urge a team member to express correctly, listen properly, and tolerate (or even celebrate) diverse opinions from other members. A successful meeting often leads to making better decisions. More on this later. Andy thinks the size of the team should be fewer than the slices of a pizza, 8. The general rule of thumb is that a manager spends typically few hours per week with each team member. So we can only have around 6-8 members. Too many would mean the manager has no time for his own work. Today, we have technology that is far more advanced than 1995 (the year this book was first written). With better technology, we can communicate information and share documents, videos, etc. more easily, so we are able to use meetings for other functions such as explaining methods, opinions and experiences, and discussions. The overall process can be very inefficient. This book is about high output management. What an oxymoron. Andy understands this objection. But he thinks that if everyone can make up his or her own decision. There is no cohesion and group decision, and perhaps, worse decisions would be made as a result. After all, original sin of management is the discrepancy between those with the power to decide and those with the knowledge to do so. To assist us in group decision making, he has a step-by-step guide. 1) We ask what needs to be decided upon right now at this meeting? Oftentimes some decisions had already been made at other meetings that we don&apos;t want to regurgitate or ruminate on them. 2) Andy gives an example. Should we build a new factory building at a nearby Intel existing site in the Philippines or should we build another new factory farther away? 3) When do we need to make this decision? Because building a factory takes time and Intel needs a new factory for production. Working the math backward, we need to have the final decision made within 1-2 months. 4) Who should make the decision? The mangers in the Philippines. 5) Before making the decision, who should we consult? The team that work at the nearby factory and the team that work on the farther site. 6) Who should have the power to ratify or veto the decision? Andy / CEO 7) Who should be notified of the decision? Chairman and the rest of the teams Whenever there is a sudden and unexpected change in the direction of work from top management, it is important to announce this shocking news and let everyone else have some time to absorb it. Team structure is another aspect of the team. Our concerns include how to put the teams together with other teams. This problem arises when we try to scale up the business. Going back to the breakfast factory example at the beginning of the book, the business has become such as success that it is ready to scale nationwide. The problem we face is How to structure the teams located all around the country? How to handle the logistics, supply, employment, etc? What dishes to be standardized our menu? How to standardize raw material supply and operating hours? Or should we avoid standardization? How to ensure quality across so many outlets? While there is of course no “correct” answer to the above questions, Andy uses a two-layer management framework that is depicted in the organizational chart to address them. The figure shows two separate branches. The employee, Cindy, shows up once on each branch. The top branch indicates the production branch hierarchy. The bottom branch indicates the coordinating group hierarchy. The production branch supervisor monitors and supports Cindy’s work; the process coordinating group needs the output of Cindy’s work. The two branches run in parallel. Also, notice that a supervisor cannot have too many subordinates underneath. Remember the pizza rule: a maximum of 6-8 subordinates. The working environment influences human behaviors, and it is considered a continuum of CUA factor. The CUA factor is an abbreviation for the scale of complexity, uncertainty and ambiguity. For instance, if we cannot say exactly how long a project is going to take, this increases uncertainty. If we cannot say exactly what we need to do to complete it, this task is highly ambiguous. If we cannot say exactly how many parts are there, it is highly complex. The human behaviors are driven by self-interest all the way to group interest. The figure below simplifies the interaction of those two scales into 4 quadrants. The free market forces are best served with low CUA and by highly self-interested individuals. The contractual obligations come about as we motivate individual to pursuit self-interest to group interest. If the CUA is high and our motivation is largely driven by self-interest, management has a hard time managing. Fostering cooperate culture is the key to maintain optimality (from a manager perspective) in a high CUA environment. Concretely, we can explore some real life examples. In a fair and transparent spot competition, the rules are clear, route is known, and the objective is set. Its CUA factor is low. Each player or each team is driven by their interest. The rule is the fastest gets the trophy. From management perspective, the outcome is many teams or players got filtered out based on one particular metric. Thus, the output is a selection of the best of the best. Sometimes, even in a low CUA environment, motivation by self-interest can be sub-optimal compared with motivation by group interest. Let me digress a bit to explain why sub-optimality can arise. In game theory, economists illustrate a situation, commonly known as the prisoner’s dilemma, which involves the prisoners who have high self-interest and low trust in a low CUA environment. The payout for 4 different scenarios are illustrated in the figure. What is really interesting is that, the rules are very clear and the penalty (years in jail) are well listed in advance. For each prisoner, he can only decide either to confess or to remain silent. However, from his perspective, the payout of remaining silent is low, serving a total of 21 years, whereas the payout of confession is high, serving just 5 years. Therefore, both prisoners would confess. However, an outside observer knows that the most optimal actions to take is for both to remain silent. This way, the payout is the highest with each serving only 1 year. The concluding remark is that we , managers, need to introduce extra measures to guide the behavior to optimality. One method is to form a contractual agreement. Another is culture and social expectation. In addition, rules are unsuitable in the high CUA environment. The rules are fixed, lacking any flexibility in the dynamic environment. Their enforcement can be tricky. However, culture is more adaptive, constantly evolving. Its flexibility is more useful in a dynamic environment. Management usually pays employees more if the nature of the job contains higher CUA level. So if we want to keep wage cost low, we better split, design, and reorganize tasks, so that they are as low in CUA as possible. It is extraordinarily hard to hiring an outside CEO to manage a company that is in a crisis and to steer the ship away from the next trouble. An outside CEO, even though he or she may be very talented in managing companies, he or she may not able to execute a rescue plan that eradicates the problem at the root. If the cooperate culture was part of the problem, then not knowing the culture is not part of the solution. The high output of corporation Intel is a chip manufacturer. It sells, produces, and develops microprocessors. Its product ranges are not narrow. Here, Andy argues that the firm is structured in two separate yet interconnected blocks. We see that figure below. The vertical column represents functional units. The horizontal row represents the business units. The functional units are shared among all business units. This way, Intel can standardize the procedures of sales, manufacturing, technology development and administration. It also enjoys the economy of scale; it houses 70% of all Intel employees. However the business units serve to adapt to market preferences. For instance, the menu of the breakfast factory varies depending the local tastes and raw material availability. The system business group, microprocessor business group may compliment each other. For instance, say a laptop requires both the WiFi card, microprocessor and many other components that Intel manufactures. Then, each group does not advertise separately. Instead, they sell all components as a bundle. I have seen similar structure in my work as a programmer. Scikit learn, a python package for machine learning, categorizes its APIs by algorithm types; PyTorch, a python package for training deep neural networks, lists out its tutorial by applications. From sales to delivery, we have learned that we need to pay attention to choke points. Here we revisit the concept from a corporation perspective. In this diagram, we can see the construction branch at the top and a sales branch at the bottom. The choke point is that the manufacturing plants want the order to come in before making the product and then send the product to its customer. To minimize this coke point, it would be great to predict the future demand and start making the products prior to the arrival of the actual sales. This way, the choke point of the lag time in manufacturing is reduced. And if so, the next choke point becomes logistic, outside of Intel control. As far as Intel is concerned, it has sped up the order and cut down customer wait time. The greatest management challenge is the discrepancy between knowledge and power. Most managers do not have time to investigate and study the technology that is rapidly advancing everyday. Their understanding of the technology is not as deep as their technical staff. Like Andy, the managers take phone calls from customers and convene meetings with various functional departments and business groups, so they understand the needs and the wants of the market. However, the difficulty remains despite such effort. It is hard to know how to connect those in the position of power to make the decision with those in the position of knowledge that is needed to make a sound and balanced judgment Not coming across as a definite answer, Andy recommends every staff play multi-roles at the firm. This flexibility allows the staff to contribute towards issues differently at various times. For instance, Andy can be the leader in one meeting, but he is just a participant in another meeting. Plans The plans are to be written on the most senior management level; Intel plans about 5 years ahead. Every year the plan is updated and revised accordingly. The strategic thinking propagates down the levels of management. It is important to ensure actions at various levels constructively help Intel to achieve its overall strategic objectives. That is proper alignment. The most crucial element in running the firm is the promotion of all excellent staff members. Intel has some basic principles for promotion. 1 only promote those whose performance exceeds expectation, not their potential to perform. When the time is ready, the firm promotes. However, it is very important that every newly promoted staff got given time and training in the new role. This idea links back to the task-maturity concept. The funny thing is that Intel continues to promote the staff to the next level up if once again he exceeds the expectation. Like the chart shown below, each promotion comes with higher financial reward. The key element is to let every staff know that if one performs well beyond expectation, one gets promoted. Hard work and talent are fairly recognized and appreciated. In some sense, Andy himself rises to where he is by merit. However, like the Peter principle, the staff are promoted to the level that they become less competent. In addition, those that are good at the job at the junior level may not indicate their suitability on a more senior level. It is okay to demote someone after a wrong or premature promotion if he or she needs more time to adjust. Once, he is ready. The management then promote him again. I reckon the problem of scale of the company is boiled down to management. This promotion scheme suggests that to overcome the scale problem we need to manage those who are talented and capable. In turn, they then help us mange other capable and talented employees. Is this a new idea? If we turn to history for guidance, I realize that nearly 2000 years ago, during the early years of the Han dynasty in China. The emperor at that time discussed with his best general about the leadership and talent in commanding an army among the rest of his generals. The emperor asked his best general how many troops he could command. The reply was about 100 thousands. Then, the emperor asked how many troops the best general can command. Instead of 100 thousands, the reply was infinite. The emperor laughed, and couldn’t help but wonder if the best general can command so much more troops, why he wasn’t the emperor. The best general answered that while the emperor couldn’t lead solders, he could lead leaders. That was why the best general was working for him. Furthermore, he believed such ability was by nature, not nurture. My closing remark is that managing people is a skill, an art, not knowledge. We all need plenty of practice to master such a skill.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/high_output_management/image37095.jpg" /><media:content medium="image" url="/assets/images/high_output_management/image37095.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">High Output Management (by Andrew Glove)</title><link href="/toastmaster/2024/05/26/Ice_breaker/" rel="alternate" type="text/html" title="High Output Management (by Andrew Glove)" /><published>2024-05-26T00:00:00+08:00</published><updated>2024-05-26T00:00:00+08:00</updated><id>/toastmaster/2024/05/26/Ice_breaker</id><content type="html" xml:base="/toastmaster/2024/05/26/Ice_breaker/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Hello reader,&lt;/p&gt;

&lt;p&gt;In this series of blog posts, I am going to share with you some lessons I stole from reading “high output management” written by Andrew Glove. Instead of just regurgitating what Andrew said chapter by chapter, I reckon I could do a more fruitful job by presenting in a way that is consistent with my own understanding.&lt;/p&gt;

&lt;p&gt;Andrew is a big picture guy. After all, he was the CEO of Intel for many years. The big picture problem  a company face in a competitive market is to bridge the gap between those who have the power to make managerial decisions and those who have the knowledge to do so.&lt;/p&gt;

&lt;p&gt;The US market is run by private enterprises that emphasize on competitiveness. The reason is that high output management is not targeted to those institutions that are judged more by procedures or correctness than results or those have monopoly. Thus, all the following discussion only concerns firms that compete to supply the most suitable products to meet market demands.&lt;/p&gt;

&lt;p&gt;Market change  is constant. However, we have two distinctive types of change. One is incremental and slow. The other disruptive and rapid. The latter has been discussed in Andrew’s book, “only the paranoid survive: how to exploit crisis points”.  He talks about his experience as the decision makers during a memory chip business crisis in the 70-80s. The former is the main focus of “high output management”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image37095.jpg&quot; alt=&quot;only the paranoid survive: how to exploit crisis points&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The demand of the market as described in this book is computer chips, that was the main business of Intel at that time. However, the management lessons are just applicable to other products outside of the chip industry.&lt;/p&gt;

&lt;p&gt;Fundamentally, Intel was a tech and manufacturing company. To analyze the output of Intel, we examine four pillars, and they are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The output of capital goods or equipment,&lt;/li&gt;
  &lt;li&gt;The output of employees,&lt;/li&gt;
  &lt;li&gt;The output of teams,&lt;/li&gt;
  &lt;li&gt;The output of corporation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I shall walk you through each and every pillar in the subsequent sections.&lt;/p&gt;

&lt;h2 id=&quot;authors-background&quot;&gt;Author’s background&lt;/h2&gt;
&lt;p&gt;Taken from https://www.britannica.com/biography/Andrew-S-Grove on Dec 6 , 2023&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image34064.jpg&quot; alt=&quot;only the paranoid survive: how to exploit crisis points&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Andrew S. Grove, born in 1936 and died in 2016, was often credited as one of the key leader in the management team of Intel during the time when memory storage device business got destroyed by Japanese competitors and launched Intel into the burgeoning microprocessor business. 
The period during which Intel shifted out of the memory business and embraced the microprocessor business had been written by Andrew in his “only the paranoid survive: how to exploit crisis points”.&lt;/p&gt;

&lt;p&gt;His career and the rise of Intel are linked. He entered Intel when it was small. He moved all the way up to management ladder. When he left, Intel was massive.&lt;/p&gt;

&lt;h2 id=&quot;the-high-output-of-capital-goods-or-equipment&quot;&gt;The high output of capital goods or equipment&lt;/h2&gt;

&lt;p&gt;Borrowing the breakfast factory example used in this book. I think the equipment are the most obvious and perhaps the easiest part to manage out of employees, teams and corporation. If we run a breakfast factory, we need some capital investment or cooking apparatus to help us prepare an English breakfast. What a customer wants is cheaper, faster, tastier.&lt;/p&gt;

&lt;p&gt;An English breakfast constitutes 3 separately prepared items: a fully boiled egg, a piece of toast, a cup of coffee. 
An egg boiler boils an egg.
A toaster prepares the toast.
A coffee brewer brews coffee.&lt;/p&gt;

&lt;p&gt;Since boiled eggs, toasts and a cup of coffee can be prepared separately, we have them prepared in parallel to reduce our customer wait time and to improve turnover.&lt;/p&gt;

&lt;p&gt;As shown in the workflow diagram below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/OIP-C.jpg&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Like a running race of 4x400m, the speed of the team is determined by its slowest member. When we make an English breakfast, our speed is limited by our slowest step.
In this example, our slowest step is waiting for a toaster.&lt;/p&gt;

&lt;p&gt;If we could shorten the wait for the toaster , we reduce choke point and cut down the wait time.
Thus, we now know that the output of capital goods depend on its choke point. If we can reduce them, then our output rises.&lt;/p&gt;

&lt;p&gt;To continue with out toaster problem, Here are a few options,&lt;/p&gt;

&lt;p&gt;We can buy a toaster with more slots, so that we can prepare more toasts in one setting. 
We can buy more toaster that operates side by side.&lt;/p&gt;

&lt;p&gt;Afterward, we can see that out next choke point which is the time we need to boil an egg.&lt;/p&gt;

&lt;p&gt;To shorten the time of boiling an egg, we can try
To boil more eggs in one go (batch operation), 
Or we can buy a boiler that have got a conveyor belt structure which allows us to continuously collect boiled egg at the end outlet or with a shorter time interval (continuous operation).&lt;/p&gt;

&lt;p&gt;By reducing the time spent at each step, the process becomes more efficient and faster.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/OIP-C (1).jpg&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, the cost of apparatus and the demands on English breakfasts have to be considered.&lt;/p&gt;

&lt;p&gt;Revenue and sales volume determine how much we produce. More precisely, it is the forecast of these two factors. Andy talks about this more in later section.&lt;/p&gt;

&lt;p&gt;Proposition:&lt;/p&gt;
&lt;h3 id=&quot;inputs-that-are-processed-correctly-with-the-right-apparatus-over-time-produce-outputs&quot;&gt;Inputs that are processed correctly with the right apparatus over time produce outputs.&lt;/h3&gt;

&lt;p&gt;The management of capital goods is about the input, process, apparatus and ultimately output.&lt;/p&gt;

&lt;p&gt;Oftentimes, it is better to foresee potential problems and prevent them from happening in the first place. It is easy to understate the extent or the chances of a problem;  treating that problem when it arises can incur a hefty bill and delays .&lt;/p&gt;

&lt;p&gt;In this book, he said what if our supply is cut off, we need to have some inventory or stock that is enough for 1 business day. Thus, we must balance the cost of storage and space required and the impact of such practice might have on food quality etc.  Otherwise, we have no English breakfast to sell after the inventory of raw ingredients is depleted. During the supply chain disruption over the COVID pandemic, we witnessed supply-side inflation and shortages.&lt;/p&gt;

&lt;p&gt;If we can catch a problem, it is better to catch it early on in the process rather later. Its remedy is going to be more expansive as the situation deteriorates which it often does when it is left on its own device.&lt;/p&gt;

&lt;p&gt;So to catch problem early, we need to monitor and detect signs of problems. The monitoring and detection are the key. We are told to monitor all aspects of the production from input or raw materials, the cooking or preparation process and of course the final product after assembly, the complete English breakfast on the tray.&lt;/p&gt;

&lt;p&gt;The quality of the final product is very important, and as the business grows, we ought to put its quality high up on our priority list. 
The rationale is that we cannot figure out what every customer may do with the final product. (No, the breakfast example makes little sense here. But microprocessor can perform a wide range of computing tasks depending on computer software, so the rationale makes sense. Andrew mentioned about the recall of Intel microprocessor chips as they produced a floating point error during complex calculations)&lt;/p&gt;

&lt;p&gt;One more thing that is very crucial to the output of the capital is the training of an operator. The operator must learn to use the equipment properly. In his experience, one worker who normally needs 200 hours to learn how to operate a wafer fabrication machine.&lt;/p&gt;

&lt;p&gt;However, in the case without sufficient training, a worker did not notice a warning signal from the equipment until so much time had passed and so much material had gone through the wafer machine. These semi-processed silicon wafers were of no use as they were faulty and unsuitable for further processing. With that, Intel lost 1 million worth of raw silicon wafer and the time needed to redo that batch.&lt;/p&gt;

&lt;p&gt;To monitor properly, we paradoxically need more equipment like senors , detectors, indicators, and meters, etc. Inside  our breakfast factory, we use thermometer to record and measure temperature of water in the boiler continuously. We size up the eggs, we detect all kinds of problems, the type of eggs, the quality of bread, the process and the kitchen hygiene. Applying automation and streamlining steps wherever possible.&lt;/p&gt;

&lt;p&gt;With the explosion of AI and robotics, it is not hard to image that machines are getting “smarter”.
And the internet of things are giving smarter machines more sensing capabilities. More capability, more steps can be automated. More sensor , more awareness, more able to detect more problems.
More problems detected and caught early leads to cheaper production by prevention, better product quality, and shorter downtime. Perhaps, this may be the driving force behind the statement: technology is deflationary.&lt;/p&gt;

&lt;h2 id=&quot;the-high-output-of-employees&quot;&gt;The high output of employees&lt;/h2&gt;
&lt;p&gt;The way we achieve high output on capital goods is different to the way we achieve high output on people. We now consider the next pillar: the high output of employees or human capital. Here I must stress that we are looking at an individual employee. Later we will examine the team of individuals.&lt;/p&gt;

&lt;p&gt;We first begin the comprehension of an employee by understanding the life cycle of an employee at a company. We begin the cycle by first acknowledging there is a need to hire someone in the labor market and there is a budget for the role. A job ad is written and posted on the internet. We got some potential candidates whose CVs are reviewed and screened.&lt;/p&gt;

&lt;p&gt;We schedule for an interview with most relevant candidates and conduct a background check. If we discover some interesting and new information about the candidates, we may consider a second interview to talk with the person further.&lt;/p&gt;

&lt;p&gt;Next, if the candidate pass all the stages, an offer is sent. For those who accept the offer, we use a probation period to see whether our new employee fits with the Intel culture. More on culture later.&lt;/p&gt;

&lt;p&gt;I reckon Andy thinks the corporate culture underpins many things that happen at Intel. I personally believe that as a CEO of Intel, he considers his job to nurture, foster and maintain this cooperate culture.&lt;/p&gt;

&lt;p&gt;In this book, he not only shares with us his story of a successful hire, but also an unsuccessful one.  It is common sense that relevant background and training must be met for a job. For instance, engineering background is required for an engineering role – the know-hows and problem solving. Yet, Andy shared with us in this book a story of someone without the background training in the domain, but he got the right mindset and thinking. He was hired.&lt;/p&gt;

&lt;p&gt;He explains that he gives a test to someone with the right educational background but with little or no experience in the industry Intel is in. He converses with that person. Since he knows the candidate has no experiences, he allows the candidate to probe him by asking questions regarding the context. With common sense, logical deduction, and  guesswork,  the candidate comes up with a step by step solution that makes sense and is close enough to the answer Andy had in mind.&lt;/p&gt;

&lt;p&gt;However, he mentioned that despite using the same recipe for hiring, he had hired someone who is good at being interviewed but bad at getting the job done.&lt;/p&gt;

&lt;p&gt;Thus, at this stage, the manager needs to evaluate the employees’ performance and decide to&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Promote if the employee performs well,&lt;/li&gt;
  &lt;li&gt;Demote if the employee performs  poorly, or&lt;/li&gt;
  &lt;li&gt;Lay he or she off if the employee after proper training and feedback remains unsuitable for the job and his or her performance is below expectation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On the other hand, when anyone decides to leave and announce their decision to the manager, depending on the view the manager has on them, he can make one of the two moves. If that employee is good at his or her job, it is important that the manager tries to keep that person within the company. To do so, the manager must learn to converse with the employee to understand the motivation behind his or her leaving. His tip is to ask why he is about to leave (the motivation). The first time you ask that question, the reply is always mechanical, standard and well rehearsed with preparation. Then, you try to ask and probe further, he or she may reveal the true intention and belief.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image122953.jpg&quot; alt=&quot;breakfast&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the most important aspect of a manager’s responsibility is to develop the subordinates during their time at Intel. Like the case with capital goods, the machine is not going to be productive if the operators misuse it or fail to operate it as intended.&lt;/p&gt;

&lt;p&gt;Andy summarizes what drives good work performance into two factors. They are the ability and the willingness to get the job done. Skills are improved with proper tutorials and training. Therefore, he proposes a concept called task-relevant maturity. Task relevant maturity is to make sure managers do not confuse someone with potential with someone who can do the job well already. In particular, not to let age, experience of prior jobs, friendship, and educational background confuse with the actual task at hand.&lt;/p&gt;

&lt;p&gt;While these attributes may be indicative of future performance, they may not be so now. Why task relevant? If someone is a good salesperson and has received a promotion to team lead based on his or her past sales records, he or she has a low task-relevant maturity as a manager but high task-relevant maturity as a salesperson. His or her management task-relevant maturity rises while he or she receives more training over time. 
It is important that at the beginning when task-relevant maturity is not high, more monitoring and support by senior staff are warranted. Once he or she becomes capable at doing the job in the new roles, they can do the job independently with less supervision.&lt;/p&gt;

&lt;p&gt;Following this principle, it is obvious that a manager tends to delegate his or her most familiar tasks and teaches his or her most familiar skills. Andy mentions that here one-on-one meeting can be helpful. Since every individual communication style is idiosyncratic, we need to explore and discover our own style and method.&lt;/p&gt;

&lt;p&gt;Andy management emphasizes planning, an indispensable element of work. It is a bit similar to the old adage: you reap what you sow. The idea is that factory makes to forecast, not to order. The just-in-time management is getting so popular nowadays that it is not hard to comprehend. I use the algebra analogy to visualize this. 
If A is our forecast, B is the actual (delayed measurement). What we actually should have done is A+B.  It would be great but unrealistic for have a perfect forecast, B = 0.  thus, we keep adjusting, monitoring and updating the forecast, production, and schedules.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/VectorsAddition.gif&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Employee performance appraisal is the key part of a manager’s responsibility. The principle behind appraisal is to use constructive feedback to improve the employee’s performance and productivity. 
Thus, Andy encourages all managers to provide feedback that are doable, concrete, and helpful while maintaining a perspective that we focus on tasks and not on people. I am amazed that Andy spends his precious time to edit other manager’s performance appraisal report just to ensure the quality of these reports reflect his principles and objectives.&lt;/p&gt;

&lt;p&gt;Perhaps, this is more relevant to high tech firms, knowledge based jobs are more difficult to ascertain the true contribution of an employee towards a final output. One reason is that from the time he or she performs a task to the time all the relevant outcomes pertaining to the decision and behaviors show up, the time gap can be years apart, yet performance review occurs annually. It is often that the manager can only observe some but not all contributions and harms. Using a analogy to explain this concept.
The light can see from distant stars are not the light they are emitting right now. The light comes from very very far away so what we see are what thy look like many many years ago. The time lag is astronomical. Performance evaluation is very real as it tights to bonuses paid to the employees. 
Andy formula for performance bonus is 1/3 individual performance, 1/3 team performance, 1/3 company performance. Good performance deserves promotion.&lt;/p&gt;

&lt;p&gt;In addition to ability as a factor for good work performance, the latter part is about motivation. He talks about the Maslow’s hierarchy of needs. As we stand today, and of the writing of this book, 1995, it is fair to say that most have achieved the basic shelter and safety needs, especially those who worked for Intel. So to motivate them, we need to look to higher levels such as a sense of achievement, self actualization, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/OIP-C (2).jpg&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Speaking of motivating employees, I have also come across some other articles that discuss incentives and compensation of senior executives (management needs to be motivated just as well).&lt;/p&gt;

&lt;p&gt;What is interesting is that to motivate senior staff, people pay them far far more than average workers. While it is understandable that their work requires more skills and are harder and take on more responsibility, the gap is growing since 1970 and widens exponentially since 1990 and fluctuates at around 300 times during 2000s.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image216885.jpg&quot; alt=&quot;breakfast&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To put this in perspective, it shocks me to know that a CEO only needs to work half a year to make more money than an average worker will ever make in a lifetime.&lt;/p&gt;

&lt;p&gt;Performance review and delivering the “news”. During a performance review, the manager delivers his or her opinions and judgement on the work that his or her subordinates have done over that period. In Andy’s experience, he has dealt with both types of employees. Let’s start with the worse.&lt;/p&gt;

&lt;p&gt;It is normal to react emotionally to bad news. There are 3 stages of an emotional reaction. The reaction starts from ignoring the news, denying the bad performance, and blaming others for the results. It is hard to resolve the emotion entangled in each of the three stages. A tip would be to send the report to the subordinates prior to the meeting, leaving ample of time for him or her to read and think through the issues properly at his or her own pace.&lt;/p&gt;

&lt;p&gt;However, if the manager and the subordinates can both get over with the aforementioned THREE emotional reactions, they can then take responsibility and find a solution. Taking responsibility and finding a solution is less emotional and more engineering. ** The goal is to turn the performance and behaviors around. ** Persistently poor performance eventually is met with layoffs.&lt;/p&gt;

&lt;p&gt;Self-review can also be useful. It demonstrates one’s ability to reflect and also it shows another set of skills - think critically about the work done.&lt;/p&gt;

&lt;p&gt;Good performers deserve a proper and throughout review, even more so than poor performers (more on this later!). A manager must always give constructive feedback to these subordinates who have done a job exceptionally well, so that they can keep improving. In turn they become ready for a promotion when the time and opportunities arrive.&lt;/p&gt;

&lt;p&gt;However, in such circumstances, a manager may unconsciously choose to spend more of his or her time and effort in helping the under-performers, instead of the Ace performers. This bias is considered inappropriate in Intel culture and management practice.&lt;/p&gt;

&lt;p&gt;At the end of the day, the main thing is to what gets performance improved. ** It does not matter as long as we focus on the task-relevant feedback and give helpful advice.**&lt;/p&gt;

&lt;h2 id=&quot;why-do-we-form-a-team&quot;&gt;Why do we form a team?&lt;/h2&gt;

&lt;h4 id=&quot;market-perspective&quot;&gt;Market perspective&lt;/h4&gt;
&lt;p&gt;The customers’ demand are highly complex and are evolving all the time. It is very tricky to navigate this landscape. On top of the demand, suppliers can also exert an influence on a business that faces competition from competitors. So we need a team of talented people to make a business work.&lt;/p&gt;

&lt;h4 id=&quot;efficiency-perspective&quot;&gt;Efficiency perspective&lt;/h4&gt;
&lt;p&gt;Andy reckons that the output of management is the output of the manager and the leverage of the team, or department. Without a loss of generality, what he is referring to is people under this purview or commands or influences. So, a team is a way to amplify the manager outputs, a form of leverage.&lt;/p&gt;

&lt;h4 id=&quot;pragmatic-perspective&quot;&gt;Pragmatic perspective&lt;/h4&gt;
&lt;p&gt;The tasks of meeting customers’ demands often involve many disciplines of knowledge and skills, so it is not practical to expect a single individual can do all of them. Thus a team with a set of diverse skills and knowledge is a must.&lt;/p&gt;

&lt;p&gt;How to mange a team?
Andy gives some of his own experiences at Intel and ways to guide the reader.
The first tip is to pay attention to leverage.
Because of the manager output formula, we notice that if the leverage is not applied correct, the output can be worse. For examples, the leverage can be positive or negative. We strive to achieve a positive leverage that is greater than 1.&lt;/p&gt;

&lt;p&gt;Figuratively speaking, Andy draws this.
&lt;img src=&quot;/assets/images/high_output_management/image98629.jpg&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image98861.jpg&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In particular, he suggests that we have 3 ways to improve the output of a manager and the team.
We can
    1)  use a more effective approach
    2)  spend less time
    3)  do more meaningful activities&lt;/p&gt;

&lt;p&gt;I just cannot help but to applaud. I personally have met friends  who would be willing to try something even though it is destined or extremely unlikely to succeed. I have to shamefully admit I have done the same. Nothing is more time wasting than to spend time and resources on a project that is going to be doomed.&lt;/p&gt;

&lt;p&gt;This is especially the case when someone fails to evaluation the prospect of the project objectively. 
They let their emotions decide for them. Sadly, unless your emotion is highly tuned to reflect the objective reality. The motion-led decision making often leads to less than ideal output.&lt;/p&gt;

&lt;p&gt;Funny enough, ** someone once says that the problem of the world is that good behaviors feel bad and bad behaviors feel good. **&lt;/p&gt;

&lt;p&gt;Thus, I think what Andy tries to teach us and what many wise sayings as well is that we need to have the right incentives that fully align with the behaviors we want to encourage.
So that good behaviors feel good and bad behaviors feel bad.&lt;/p&gt;

&lt;p&gt;From fundamental psychology courses, we also need to make sure the feedback is immediate, not delayed. Otherwise people find it hard to learn the right lessons.&lt;/p&gt;

&lt;h4 id=&quot;ways-to-manage-a-team&quot;&gt;Ways to manage a team&lt;/h4&gt;

&lt;p&gt;Meetings or team meetings are a part of manger work and responsibilities.
Andy thinks that meetings are meaningful and useful if done properly. He spends a good part of his daily time at various types of meetings as described in this book.&lt;/p&gt;

&lt;p&gt;A meeting is useful on two fronts.
A meeting is an effective way to have a one-on-one communication. A one-on-one communication is very helpful when the manager needs to teach a subordinates about the job and pass along the relevant information. It is very intriguing that Andy advises a manager to pass on the most familiar job to his or her subordinates, who can then be evaluated more properly and accurately. The most familiar job a manager does know about is also less ambiguous. That is a key to delegation, I think. Thus the manager can focus on more uncertain and complicated tasks.&lt;/p&gt;

&lt;p&gt;Moreover, a team needs to have a team meeting, which is different from a one-on-one. It has more participants attending. Concretely, Andy suggests that there are a few big categories of team meetings, namely routine regular team meetings and focused meeting.
Regardless of the categories, time costs money, so managers must ensure that only those who need to attend the meeting, and only those who can contribute to the meeting are enlisted.&lt;/p&gt;

&lt;p&gt;What do we mean by their contribution? Their contribution refers to the added value they provide in the decision making process. 
Routine regular team meetings are useful for review and planning progress. They are very useful for monitoring and prevent problems if we see warning signs. Since it is regular and the agenda is pretty much well known in advanced, everyone prepares well for this kind.&lt;/p&gt;

&lt;p&gt;A focused meeting is about a particular incident, and those who initiate the meeting would like to have a decision made by the end. Since we cannot know when the incident arises, otherwise we could have prevented it from happening if we have not run out of luck. Thus, a focused meeting is a bit more ad hoc, so it is trickier.&lt;/p&gt;

&lt;p&gt;We need to ensure several aspects are preform appropriately to ensure its efficiency.
    1) We need to decide who the attendees should be. Once assigned, they are required to attend the meeting because this is part of their jobs. 2) What we need to discuss and explain , especially regarding with the problem at hand.&lt;/p&gt;

&lt;p&gt;During the meeting, when each employee presents his or her knowledge, views and opinions about the problem, we need to figure out what information has got given and what else may be needed. By the end of the meeting, we need to have a doable plan, with deadlines and responsibility and accountability.&lt;/p&gt;

&lt;p&gt;Nothing would work if the meeting atmosphere is toxic. Andy cannot emphasize enough that we need to cultivate a culture that we dare speak our mind, and that we dare listen to opposing opinions. 
However, Andy and many others have noticed confirmation bias. The bias comes from the fact that human nature has a propensity to listen to what he or she likes or knows. And we like to let others speak first by withholding our own opinions.&lt;/p&gt;

&lt;p&gt;I think it sounds like risk management, too risky to be the first to speak, for whatever you say may anger other members of the group. So those who speak later can have time and observe where the general opinion is heading and just to say something  along those lines. With that said on the behavior of members of the team, it is not hard to imagine that we must urge a team member to express correctly, listen properly, and tolerate (or even celebrate) diverse opinions from other members.&lt;/p&gt;

&lt;p&gt;A successful meeting often leads to making better decisions. More on this later.&lt;/p&gt;

&lt;p&gt;Andy thinks the size of the team should be fewer than the slices of a pizza, 8.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/667.jpg&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The general rule of thumb is that a manager spends typically few hours per week with each team member. So we can only have around 6-8 members. Too many would mean the manager has no time for his own work.&lt;/p&gt;

&lt;p&gt;Today, we have technology that is far more advanced than 1995 (the year this book was first written). With better technology, we can communicate information and share documents, videos, etc. more easily, so we are able to use meetings for other functions such as explaining methods, opinions and experiences, and discussions.&lt;/p&gt;

&lt;p&gt;The overall process can be very inefficient. This book is about high output management. What an oxymoron. Andy understands this objection. But he thinks that if everyone can make up his or her own decision. There is no cohesion and group decision, and perhaps, worse decisions would be made as a result. After all, original sin of management is the discrepancy between those with the power to decide and those with the knowledge to do so.&lt;/p&gt;

&lt;p&gt;To assist us in group decision making, he has a step-by-step guide.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1) We ask what needs to be decided upon right now at this meeting? Oftentimes some decisions had already been made at other meetings that we don&apos;t want to regurgitate or ruminate on them.
2) Andy gives an example. Should we build a new factory building at a nearby Intel existing site in the Philippines or should we build another new factory farther away?
3) When do we need to make this decision? Because building a factory takes time and Intel needs a new factory for production. Working the math backward, we need to have the final decision made within 1-2 months.
4) Who should make the decision? The mangers in the Philippines.

5) Before making the decision, who should we consult? The team that work at the nearby factory and the team that work on the farther site.
6) Who should have the power to ratify or veto the decision? Andy / CEO
7) Who should be notified of the decision? Chairman and the rest of the teams
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whenever there is a sudden and unexpected change in the direction of work from top management, it is important to announce this shocking news and let everyone else have some time to absorb it.&lt;/p&gt;

&lt;p&gt;Team structure is another aspect of the team. Our concerns include how to put the teams together with other teams. This problem arises when we try to scale up the business.&lt;/p&gt;

&lt;p&gt;Going back to the breakfast factory example at the beginning of the book, the business has become such as success that it is ready to scale nationwide.
The problem we face is&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How to structure the teams located all around the country?&lt;/li&gt;
  &lt;li&gt;How to handle the logistics, supply, employment, etc?&lt;/li&gt;
  &lt;li&gt;What dishes to be standardized our menu?&lt;/li&gt;
  &lt;li&gt;How to standardize raw material supply and operating hours? Or should we avoid standardization?&lt;/li&gt;
  &lt;li&gt;How to ensure quality across so many outlets?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While there is of course no “correct” answer to the above questions, Andy uses a two-layer management framework that is depicted in the organizational chart to address them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image155096.jpg&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image159204.jpg&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The figure shows two separate branches. The employee, Cindy, shows up once on each branch. The top branch indicates the production branch hierarchy. The bottom branch indicates the coordinating group hierarchy. The production branch supervisor monitors and supports Cindy’s work; the process coordinating group needs the output of Cindy’s work. The two branches run in parallel. Also, notice that a supervisor cannot have too many subordinates underneath. Remember the pizza rule: a maximum of 6-8 subordinates.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image162157.jpg&quot; alt=&quot;breakfast&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The working environment influences human behaviors, and it is considered a continuum of CUA factor. The CUA factor is an abbreviation for the scale of complexity, uncertainty and ambiguity. 
For instance, if we cannot say exactly how long a project is going to take, this increases uncertainty. 
If we cannot say exactly what we need to do to complete it, this task is highly ambiguous. If we cannot say exactly how many parts are there, it is highly complex.&lt;/p&gt;

&lt;p&gt;The human behaviors are driven by self-interest all the way to group interest. The figure below simplifies the interaction of those two scales into 4 quadrants. The free market forces are best served with low CUA and by highly self-interested individuals. The contractual obligations come about as we motivate individual to pursuit self-interest to group interest. If the CUA is high and our motivation is largely driven by self-interest, management has a hard time managing. Fostering cooperate culture is the key to maintain optimality (from a manager perspective) in a high CUA environment.&lt;/p&gt;

&lt;p&gt;Concretely, we can explore some real life examples. In a fair and transparent spot competition,  the rules are clear, route is known, and the objective is set. Its CUA factor is low. Each player or each team is driven by their interest. The rule is the fastest gets the trophy.  From management perspective, the outcome is many teams or players got filtered out based on one particular metric. Thus, the output is a selection of the best of the best.&lt;/p&gt;

&lt;p&gt;Sometimes, even in a low CUA environment, motivation by self-interest can be sub-optimal compared with motivation by group interest.&lt;/p&gt;

&lt;p&gt;Let me digress a bit to explain why sub-optimality can arise. In game theory, economists illustrate a situation, commonly known as the prisoner’s dilemma, which involves the prisoners who have high self-interest and low trust in a low CUA environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/algorithms_to_live_by/prisoner_Dilemma.png&quot; alt=&quot;Picture description&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The payout for 4 different scenarios are illustrated in the figure. What is really interesting is that, the rules are very clear and the penalty (years in jail) are well listed in advance. For each prisoner, he can only decide either to confess or to remain silent. However, from his perspective, the payout of remaining silent is low, serving a total of 21 years, whereas the payout of confession is high, serving just 5 years. Therefore, both prisoners would confess. However, an outside observer knows that the most optimal actions to take is for both to remain silent. This way, the payout is the highest with each serving only 1 year. The concluding remark is that we , managers, need to introduce extra measures to guide the behavior to optimality.&lt;/p&gt;

&lt;p&gt;One method is to form a contractual agreement. Another is culture and social expectation. In addition, rules are unsuitable in the high CUA environment. The rules are fixed, lacking any flexibility in the dynamic environment. Their enforcement can be tricky. However, culture is more adaptive, constantly evolving. Its flexibility is more useful in a dynamic environment.&lt;/p&gt;

&lt;p&gt;Management usually pays employees more if the nature of the job contains higher CUA level. So if we want to keep wage cost low, we better split, design, and reorganize tasks, so that they are as low in CUA as possible.&lt;/p&gt;

&lt;p&gt;It is extraordinarily hard to hiring an outside CEO to manage a company that is in a crisis and to steer the ship away from the next trouble. An outside CEO, even though he or she may be very talented in managing companies, he or she may not able to execute a rescue plan that eradicates the problem at the root. If the cooperate culture was part of the problem, then not knowing the culture is not part of the solution.&lt;/p&gt;

&lt;h2 id=&quot;the-high-output-of-corporation&quot;&gt;The high output of corporation&lt;/h2&gt;
&lt;p&gt;Intel is a chip manufacturer. It sells, produces, and develops microprocessors. Its product ranges are not narrow. 
Here, Andy argues that the firm is structured in two separate yet interconnected blocks.&lt;/p&gt;

&lt;p&gt;We see that figure below.&lt;/p&gt;

&lt;p&gt;The vertical column represents functional units.
The horizontal row represents the business units.&lt;/p&gt;

&lt;p&gt;The functional units are shared among all business units. This way, Intel can standardize the procedures of sales, manufacturing, technology development and administration. It also enjoys the economy of scale; it houses 70% of all Intel employees.&lt;/p&gt;

&lt;p&gt;However the business units serve to adapt to market preferences. For instance, the menu of the breakfast factory varies depending the local tastes and raw material availability. The system business group, microprocessor business group may compliment each other. For instance, say a laptop requires both the WiFi card, microprocessor and many other components that Intel manufactures. Then, each group does not advertise separately. Instead, they sell all components as a bundle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/image155084.jpg&quot; alt=&quot;breakfast&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I have seen similar structure in my work as a programmer. Scikit learn, a python package for machine learning, categorizes its APIs by algorithm types; PyTorch, a python package for training deep neural networks, lists out its tutorial by applications.&lt;/p&gt;

&lt;p&gt;From sales to delivery, we have learned that we need to pay attention to choke points. Here we revisit the concept from a corporation perspective. In this diagram, we can see the construction branch at the top and a sales branch at the bottom. The choke point is that the manufacturing plants want the order to come in before making the product and then send the product to its customer. To minimize this coke point, it would be great to predict the future demand and start making the products prior to the arrival of the actual sales. This way, the choke point of the lag time in manufacturing is reduced. And if so, the next choke point becomes logistic, outside of Intel control. As far as Intel  is concerned, it has sped up the order and cut down customer wait time.&lt;/p&gt;

&lt;p&gt;The greatest management challenge is the discrepancy between knowledge and power. Most managers do not have time to investigate and study the technology that is rapidly advancing everyday. Their understanding of the technology is not as deep as their technical staff. 
Like Andy, the managers take phone calls from customers and convene meetings with various functional departments and business groups, so they understand the needs and the wants of the market. However, the difficulty remains despite such effort. It is hard to know how to connect those in the position of power to make the decision with those in the position of knowledge that is needed to make a sound and balanced judgment&lt;/p&gt;

&lt;p&gt;Not coming across as a definite answer, Andy recommends every staff play multi-roles at the firm. This flexibility allows the staff to contribute towards issues differently at various times. For instance, Andy can be the leader in one meeting, but he is just a participant in another meeting.&lt;/p&gt;

&lt;p&gt;Plans&lt;/p&gt;

&lt;p&gt;The plans are to be written on the most senior management level; Intel plans about 5 years ahead. Every year the plan is updated and revised accordingly. 
The strategic thinking propagates down the levels of management. It is important to ensure actions at various levels constructively help Intel to achieve its overall strategic objectives. That is proper alignment.&lt;/p&gt;

&lt;p&gt;The most crucial element in running the firm is the promotion of all excellent staff members. Intel has some basic principles for promotion. 1 only promote those whose performance exceeds expectation, not their potential to perform. When the time is ready, the firm promotes. However, it  is very important that every newly promoted staff got given time and training in the new role. This idea links back to the task-maturity concept. The funny thing is that Intel continues to promote the staff to the next level up if once again he exceeds the expectation. Like the chart shown below, each promotion comes with higher financial reward. 
The key element is to let every staff know that if one performs well beyond expectation, one gets promoted. Hard work and talent are fairly recognized and appreciated.&lt;/p&gt;

&lt;p&gt;In some sense, Andy himself rises to where he is by merit. However, like the Peter principle, the staff are promoted to the level that they become less competent. In addition, those that are good at the job at the junior level may not indicate their suitability on a more senior level. It is okay to demote someone after a wrong or premature promotion if he or she needs more time to adjust. Once, he is ready. The management then promote him again.&lt;/p&gt;

&lt;p&gt;I reckon the problem of scale of the company is boiled down to management. 
This promotion scheme suggests that to overcome the scale problem we need to manage those who are talented and capable. In turn, they then help us mange other capable and talented employees.&lt;/p&gt;

&lt;p&gt;Is this a new idea?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/high_output_management/Screenshot 2023-10-19 083036.png&quot; alt=&quot;breakfast&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we turn to history for guidance, I realize that nearly 2000 years ago, during the early years of the Han dynasty in China. The emperor at that time discussed with his best general about the leadership and talent in commanding an army among the rest of his generals. The emperor asked his best general how many troops he could command. The reply was about 100 thousands. Then, the emperor asked how many troops the best general can command. Instead of 100 thousands, the reply was infinite. The emperor laughed, and couldn’t help but wonder if the best general can command so much more troops, why he wasn’t the emperor. The best general answered that while the emperor couldn’t lead solders, he could lead leaders. That was why the best general was working for him. Furthermore, he believed such ability was by nature, not nurture.&lt;/p&gt;

&lt;p&gt;My closing remark is that managing people is a skill, an art, not knowledge. We all need plenty of practice to master such a skill.&lt;/p&gt;</content><author><name>Wilson Fok</name></author><category term="Toastmaster" /><summary type="html">Introduction Hello reader, In this series of blog posts, I am going to share with you some lessons I stole from reading “high output management” written by Andrew Glove. Instead of just regurgitating what Andrew said chapter by chapter, I reckon I could do a more fruitful job by presenting in a way that is consistent with my own understanding. Andrew is a big picture guy. After all, he was the CEO of Intel for many years. The big picture problem a company face in a competitive market is to bridge the gap between those who have the power to make managerial decisions and those who have the knowledge to do so. The US market is run by private enterprises that emphasize on competitiveness. The reason is that high output management is not targeted to those institutions that are judged more by procedures or correctness than results or those have monopoly. Thus, all the following discussion only concerns firms that compete to supply the most suitable products to meet market demands. Market change is constant. However, we have two distinctive types of change. One is incremental and slow. The other disruptive and rapid. The latter has been discussed in Andrew’s book, “only the paranoid survive: how to exploit crisis points”. He talks about his experience as the decision makers during a memory chip business crisis in the 70-80s. The former is the main focus of “high output management”. The demand of the market as described in this book is computer chips, that was the main business of Intel at that time. However, the management lessons are just applicable to other products outside of the chip industry. Fundamentally, Intel was a tech and manufacturing company. To analyze the output of Intel, we examine four pillars, and they are: The output of capital goods or equipment, The output of employees, The output of teams, The output of corporation. I shall walk you through each and every pillar in the subsequent sections. Author’s background Taken from https://www.britannica.com/biography/Andrew-S-Grove on Dec 6 , 2023 Andrew S. Grove, born in 1936 and died in 2016, was often credited as one of the key leader in the management team of Intel during the time when memory storage device business got destroyed by Japanese competitors and launched Intel into the burgeoning microprocessor business. The period during which Intel shifted out of the memory business and embraced the microprocessor business had been written by Andrew in his “only the paranoid survive: how to exploit crisis points”. His career and the rise of Intel are linked. He entered Intel when it was small. He moved all the way up to management ladder. When he left, Intel was massive. The high output of capital goods or equipment Borrowing the breakfast factory example used in this book. I think the equipment are the most obvious and perhaps the easiest part to manage out of employees, teams and corporation. If we run a breakfast factory, we need some capital investment or cooking apparatus to help us prepare an English breakfast. What a customer wants is cheaper, faster, tastier. An English breakfast constitutes 3 separately prepared items: a fully boiled egg, a piece of toast, a cup of coffee. An egg boiler boils an egg. A toaster prepares the toast. A coffee brewer brews coffee. Since boiled eggs, toasts and a cup of coffee can be prepared separately, we have them prepared in parallel to reduce our customer wait time and to improve turnover. As shown in the workflow diagram below. Like a running race of 4x400m, the speed of the team is determined by its slowest member. When we make an English breakfast, our speed is limited by our slowest step. In this example, our slowest step is waiting for a toaster. If we could shorten the wait for the toaster , we reduce choke point and cut down the wait time. Thus, we now know that the output of capital goods depend on its choke point. If we can reduce them, then our output rises. To continue with out toaster problem, Here are a few options, We can buy a toaster with more slots, so that we can prepare more toasts in one setting. We can buy more toaster that operates side by side. Afterward, we can see that out next choke point which is the time we need to boil an egg. To shorten the time of boiling an egg, we can try To boil more eggs in one go (batch operation), Or we can buy a boiler that have got a conveyor belt structure which allows us to continuously collect boiled egg at the end outlet or with a shorter time interval (continuous operation). By reducing the time spent at each step, the process becomes more efficient and faster. Of course, the cost of apparatus and the demands on English breakfasts have to be considered. Revenue and sales volume determine how much we produce. More precisely, it is the forecast of these two factors. Andy talks about this more in later section. Proposition: Inputs that are processed correctly with the right apparatus over time produce outputs. The management of capital goods is about the input, process, apparatus and ultimately output. Oftentimes, it is better to foresee potential problems and prevent them from happening in the first place. It is easy to understate the extent or the chances of a problem; treating that problem when it arises can incur a hefty bill and delays . In this book, he said what if our supply is cut off, we need to have some inventory or stock that is enough for 1 business day. Thus, we must balance the cost of storage and space required and the impact of such practice might have on food quality etc. Otherwise, we have no English breakfast to sell after the inventory of raw ingredients is depleted. During the supply chain disruption over the COVID pandemic, we witnessed supply-side inflation and shortages. If we can catch a problem, it is better to catch it early on in the process rather later. Its remedy is going to be more expansive as the situation deteriorates which it often does when it is left on its own device. So to catch problem early, we need to monitor and detect signs of problems. The monitoring and detection are the key. We are told to monitor all aspects of the production from input or raw materials, the cooking or preparation process and of course the final product after assembly, the complete English breakfast on the tray. The quality of the final product is very important, and as the business grows, we ought to put its quality high up on our priority list. The rationale is that we cannot figure out what every customer may do with the final product. (No, the breakfast example makes little sense here. But microprocessor can perform a wide range of computing tasks depending on computer software, so the rationale makes sense. Andrew mentioned about the recall of Intel microprocessor chips as they produced a floating point error during complex calculations) One more thing that is very crucial to the output of the capital is the training of an operator. The operator must learn to use the equipment properly. In his experience, one worker who normally needs 200 hours to learn how to operate a wafer fabrication machine. However, in the case without sufficient training, a worker did not notice a warning signal from the equipment until so much time had passed and so much material had gone through the wafer machine. These semi-processed silicon wafers were of no use as they were faulty and unsuitable for further processing. With that, Intel lost 1 million worth of raw silicon wafer and the time needed to redo that batch. To monitor properly, we paradoxically need more equipment like senors , detectors, indicators, and meters, etc. Inside our breakfast factory, we use thermometer to record and measure temperature of water in the boiler continuously. We size up the eggs, we detect all kinds of problems, the type of eggs, the quality of bread, the process and the kitchen hygiene. Applying automation and streamlining steps wherever possible. With the explosion of AI and robotics, it is not hard to image that machines are getting “smarter”. And the internet of things are giving smarter machines more sensing capabilities. More capability, more steps can be automated. More sensor , more awareness, more able to detect more problems. More problems detected and caught early leads to cheaper production by prevention, better product quality, and shorter downtime. Perhaps, this may be the driving force behind the statement: technology is deflationary. The high output of employees The way we achieve high output on capital goods is different to the way we achieve high output on people. We now consider the next pillar: the high output of employees or human capital. Here I must stress that we are looking at an individual employee. Later we will examine the team of individuals. We first begin the comprehension of an employee by understanding the life cycle of an employee at a company. We begin the cycle by first acknowledging there is a need to hire someone in the labor market and there is a budget for the role. A job ad is written and posted on the internet. We got some potential candidates whose CVs are reviewed and screened. We schedule for an interview with most relevant candidates and conduct a background check. If we discover some interesting and new information about the candidates, we may consider a second interview to talk with the person further. Next, if the candidate pass all the stages, an offer is sent. For those who accept the offer, we use a probation period to see whether our new employee fits with the Intel culture. More on culture later. I reckon Andy thinks the corporate culture underpins many things that happen at Intel. I personally believe that as a CEO of Intel, he considers his job to nurture, foster and maintain this cooperate culture. In this book, he not only shares with us his story of a successful hire, but also an unsuccessful one. It is common sense that relevant background and training must be met for a job. For instance, engineering background is required for an engineering role – the know-hows and problem solving. Yet, Andy shared with us in this book a story of someone without the background training in the domain, but he got the right mindset and thinking. He was hired. He explains that he gives a test to someone with the right educational background but with little or no experience in the industry Intel is in. He converses with that person. Since he knows the candidate has no experiences, he allows the candidate to probe him by asking questions regarding the context. With common sense, logical deduction, and guesswork, the candidate comes up with a step by step solution that makes sense and is close enough to the answer Andy had in mind. However, he mentioned that despite using the same recipe for hiring, he had hired someone who is good at being interviewed but bad at getting the job done. Thus, at this stage, the manager needs to evaluate the employees’ performance and decide to Promote if the employee performs well, Demote if the employee performs poorly, or Lay he or she off if the employee after proper training and feedback remains unsuitable for the job and his or her performance is below expectation. On the other hand, when anyone decides to leave and announce their decision to the manager, depending on the view the manager has on them, he can make one of the two moves. If that employee is good at his or her job, it is important that the manager tries to keep that person within the company. To do so, the manager must learn to converse with the employee to understand the motivation behind his or her leaving. His tip is to ask why he is about to leave (the motivation). The first time you ask that question, the reply is always mechanical, standard and well rehearsed with preparation. Then, you try to ask and probe further, he or she may reveal the true intention and belief. One of the most important aspect of a manager’s responsibility is to develop the subordinates during their time at Intel. Like the case with capital goods, the machine is not going to be productive if the operators misuse it or fail to operate it as intended. Andy summarizes what drives good work performance into two factors. They are the ability and the willingness to get the job done. Skills are improved with proper tutorials and training. Therefore, he proposes a concept called task-relevant maturity. Task relevant maturity is to make sure managers do not confuse someone with potential with someone who can do the job well already. In particular, not to let age, experience of prior jobs, friendship, and educational background confuse with the actual task at hand. While these attributes may be indicative of future performance, they may not be so now. Why task relevant? If someone is a good salesperson and has received a promotion to team lead based on his or her past sales records, he or she has a low task-relevant maturity as a manager but high task-relevant maturity as a salesperson. His or her management task-relevant maturity rises while he or she receives more training over time. It is important that at the beginning when task-relevant maturity is not high, more monitoring and support by senior staff are warranted. Once he or she becomes capable at doing the job in the new roles, they can do the job independently with less supervision. Following this principle, it is obvious that a manager tends to delegate his or her most familiar tasks and teaches his or her most familiar skills. Andy mentions that here one-on-one meeting can be helpful. Since every individual communication style is idiosyncratic, we need to explore and discover our own style and method. Andy management emphasizes planning, an indispensable element of work. It is a bit similar to the old adage: you reap what you sow. The idea is that factory makes to forecast, not to order. The just-in-time management is getting so popular nowadays that it is not hard to comprehend. I use the algebra analogy to visualize this. If A is our forecast, B is the actual (delayed measurement). What we actually should have done is A+B. It would be great but unrealistic for have a perfect forecast, B = 0. thus, we keep adjusting, monitoring and updating the forecast, production, and schedules. Employee performance appraisal is the key part of a manager’s responsibility. The principle behind appraisal is to use constructive feedback to improve the employee’s performance and productivity. Thus, Andy encourages all managers to provide feedback that are doable, concrete, and helpful while maintaining a perspective that we focus on tasks and not on people. I am amazed that Andy spends his precious time to edit other manager’s performance appraisal report just to ensure the quality of these reports reflect his principles and objectives. Perhaps, this is more relevant to high tech firms, knowledge based jobs are more difficult to ascertain the true contribution of an employee towards a final output. One reason is that from the time he or she performs a task to the time all the relevant outcomes pertaining to the decision and behaviors show up, the time gap can be years apart, yet performance review occurs annually. It is often that the manager can only observe some but not all contributions and harms. Using a analogy to explain this concept. The light can see from distant stars are not the light they are emitting right now. The light comes from very very far away so what we see are what thy look like many many years ago. The time lag is astronomical. Performance evaluation is very real as it tights to bonuses paid to the employees. Andy formula for performance bonus is 1/3 individual performance, 1/3 team performance, 1/3 company performance. Good performance deserves promotion. In addition to ability as a factor for good work performance, the latter part is about motivation. He talks about the Maslow’s hierarchy of needs. As we stand today, and of the writing of this book, 1995, it is fair to say that most have achieved the basic shelter and safety needs, especially those who worked for Intel. So to motivate them, we need to look to higher levels such as a sense of achievement, self actualization, etc. Speaking of motivating employees, I have also come across some other articles that discuss incentives and compensation of senior executives (management needs to be motivated just as well). What is interesting is that to motivate senior staff, people pay them far far more than average workers. While it is understandable that their work requires more skills and are harder and take on more responsibility, the gap is growing since 1970 and widens exponentially since 1990 and fluctuates at around 300 times during 2000s. To put this in perspective, it shocks me to know that a CEO only needs to work half a year to make more money than an average worker will ever make in a lifetime. Performance review and delivering the “news”. During a performance review, the manager delivers his or her opinions and judgement on the work that his or her subordinates have done over that period. In Andy’s experience, he has dealt with both types of employees. Let’s start with the worse. It is normal to react emotionally to bad news. There are 3 stages of an emotional reaction. The reaction starts from ignoring the news, denying the bad performance, and blaming others for the results. It is hard to resolve the emotion entangled in each of the three stages. A tip would be to send the report to the subordinates prior to the meeting, leaving ample of time for him or her to read and think through the issues properly at his or her own pace. However, if the manager and the subordinates can both get over with the aforementioned THREE emotional reactions, they can then take responsibility and find a solution. Taking responsibility and finding a solution is less emotional and more engineering. ** The goal is to turn the performance and behaviors around. ** Persistently poor performance eventually is met with layoffs. Self-review can also be useful. It demonstrates one’s ability to reflect and also it shows another set of skills - think critically about the work done. Good performers deserve a proper and throughout review, even more so than poor performers (more on this later!). A manager must always give constructive feedback to these subordinates who have done a job exceptionally well, so that they can keep improving. In turn they become ready for a promotion when the time and opportunities arrive. However, in such circumstances, a manager may unconsciously choose to spend more of his or her time and effort in helping the under-performers, instead of the Ace performers. This bias is considered inappropriate in Intel culture and management practice. At the end of the day, the main thing is to what gets performance improved. ** It does not matter as long as we focus on the task-relevant feedback and give helpful advice.** Why do we form a team? Market perspective The customers’ demand are highly complex and are evolving all the time. It is very tricky to navigate this landscape. On top of the demand, suppliers can also exert an influence on a business that faces competition from competitors. So we need a team of talented people to make a business work. Efficiency perspective Andy reckons that the output of management is the output of the manager and the leverage of the team, or department. Without a loss of generality, what he is referring to is people under this purview or commands or influences. So, a team is a way to amplify the manager outputs, a form of leverage. Pragmatic perspective The tasks of meeting customers’ demands often involve many disciplines of knowledge and skills, so it is not practical to expect a single individual can do all of them. Thus a team with a set of diverse skills and knowledge is a must. How to mange a team? Andy gives some of his own experiences at Intel and ways to guide the reader. The first tip is to pay attention to leverage. Because of the manager output formula, we notice that if the leverage is not applied correct, the output can be worse. For examples, the leverage can be positive or negative. We strive to achieve a positive leverage that is greater than 1. Figuratively speaking, Andy draws this. In particular, he suggests that we have 3 ways to improve the output of a manager and the team. We can 1) use a more effective approach 2) spend less time 3) do more meaningful activities I just cannot help but to applaud. I personally have met friends who would be willing to try something even though it is destined or extremely unlikely to succeed. I have to shamefully admit I have done the same. Nothing is more time wasting than to spend time and resources on a project that is going to be doomed. This is especially the case when someone fails to evaluation the prospect of the project objectively. They let their emotions decide for them. Sadly, unless your emotion is highly tuned to reflect the objective reality. The motion-led decision making often leads to less than ideal output. Funny enough, ** someone once says that the problem of the world is that good behaviors feel bad and bad behaviors feel good. ** Thus, I think what Andy tries to teach us and what many wise sayings as well is that we need to have the right incentives that fully align with the behaviors we want to encourage. So that good behaviors feel good and bad behaviors feel bad. From fundamental psychology courses, we also need to make sure the feedback is immediate, not delayed. Otherwise people find it hard to learn the right lessons. Ways to manage a team Meetings or team meetings are a part of manger work and responsibilities. Andy thinks that meetings are meaningful and useful if done properly. He spends a good part of his daily time at various types of meetings as described in this book. A meeting is useful on two fronts. A meeting is an effective way to have a one-on-one communication. A one-on-one communication is very helpful when the manager needs to teach a subordinates about the job and pass along the relevant information. It is very intriguing that Andy advises a manager to pass on the most familiar job to his or her subordinates, who can then be evaluated more properly and accurately. The most familiar job a manager does know about is also less ambiguous. That is a key to delegation, I think. Thus the manager can focus on more uncertain and complicated tasks. Moreover, a team needs to have a team meeting, which is different from a one-on-one. It has more participants attending. Concretely, Andy suggests that there are a few big categories of team meetings, namely routine regular team meetings and focused meeting. Regardless of the categories, time costs money, so managers must ensure that only those who need to attend the meeting, and only those who can contribute to the meeting are enlisted. What do we mean by their contribution? Their contribution refers to the added value they provide in the decision making process. Routine regular team meetings are useful for review and planning progress. They are very useful for monitoring and prevent problems if we see warning signs. Since it is regular and the agenda is pretty much well known in advanced, everyone prepares well for this kind. A focused meeting is about a particular incident, and those who initiate the meeting would like to have a decision made by the end. Since we cannot know when the incident arises, otherwise we could have prevented it from happening if we have not run out of luck. Thus, a focused meeting is a bit more ad hoc, so it is trickier. We need to ensure several aspects are preform appropriately to ensure its efficiency. 1) We need to decide who the attendees should be. Once assigned, they are required to attend the meeting because this is part of their jobs. 2) What we need to discuss and explain , especially regarding with the problem at hand. During the meeting, when each employee presents his or her knowledge, views and opinions about the problem, we need to figure out what information has got given and what else may be needed. By the end of the meeting, we need to have a doable plan, with deadlines and responsibility and accountability. Nothing would work if the meeting atmosphere is toxic. Andy cannot emphasize enough that we need to cultivate a culture that we dare speak our mind, and that we dare listen to opposing opinions. However, Andy and many others have noticed confirmation bias. The bias comes from the fact that human nature has a propensity to listen to what he or she likes or knows. And we like to let others speak first by withholding our own opinions. I think it sounds like risk management, too risky to be the first to speak, for whatever you say may anger other members of the group. So those who speak later can have time and observe where the general opinion is heading and just to say something along those lines. With that said on the behavior of members of the team, it is not hard to imagine that we must urge a team member to express correctly, listen properly, and tolerate (or even celebrate) diverse opinions from other members. A successful meeting often leads to making better decisions. More on this later. Andy thinks the size of the team should be fewer than the slices of a pizza, 8. The general rule of thumb is that a manager spends typically few hours per week with each team member. So we can only have around 6-8 members. Too many would mean the manager has no time for his own work. Today, we have technology that is far more advanced than 1995 (the year this book was first written). With better technology, we can communicate information and share documents, videos, etc. more easily, so we are able to use meetings for other functions such as explaining methods, opinions and experiences, and discussions. The overall process can be very inefficient. This book is about high output management. What an oxymoron. Andy understands this objection. But he thinks that if everyone can make up his or her own decision. There is no cohesion and group decision, and perhaps, worse decisions would be made as a result. After all, original sin of management is the discrepancy between those with the power to decide and those with the knowledge to do so. To assist us in group decision making, he has a step-by-step guide. 1) We ask what needs to be decided upon right now at this meeting? Oftentimes some decisions had already been made at other meetings that we don&apos;t want to regurgitate or ruminate on them. 2) Andy gives an example. Should we build a new factory building at a nearby Intel existing site in the Philippines or should we build another new factory farther away? 3) When do we need to make this decision? Because building a factory takes time and Intel needs a new factory for production. Working the math backward, we need to have the final decision made within 1-2 months. 4) Who should make the decision? The mangers in the Philippines. 5) Before making the decision, who should we consult? The team that work at the nearby factory and the team that work on the farther site. 6) Who should have the power to ratify or veto the decision? Andy / CEO 7) Who should be notified of the decision? Chairman and the rest of the teams Whenever there is a sudden and unexpected change in the direction of work from top management, it is important to announce this shocking news and let everyone else have some time to absorb it. Team structure is another aspect of the team. Our concerns include how to put the teams together with other teams. This problem arises when we try to scale up the business. Going back to the breakfast factory example at the beginning of the book, the business has become such as success that it is ready to scale nationwide. The problem we face is How to structure the teams located all around the country? How to handle the logistics, supply, employment, etc? What dishes to be standardized our menu? How to standardize raw material supply and operating hours? Or should we avoid standardization? How to ensure quality across so many outlets? While there is of course no “correct” answer to the above questions, Andy uses a two-layer management framework that is depicted in the organizational chart to address them. The figure shows two separate branches. The employee, Cindy, shows up once on each branch. The top branch indicates the production branch hierarchy. The bottom branch indicates the coordinating group hierarchy. The production branch supervisor monitors and supports Cindy’s work; the process coordinating group needs the output of Cindy’s work. The two branches run in parallel. Also, notice that a supervisor cannot have too many subordinates underneath. Remember the pizza rule: a maximum of 6-8 subordinates. The working environment influences human behaviors, and it is considered a continuum of CUA factor. The CUA factor is an abbreviation for the scale of complexity, uncertainty and ambiguity. For instance, if we cannot say exactly how long a project is going to take, this increases uncertainty. If we cannot say exactly what we need to do to complete it, this task is highly ambiguous. If we cannot say exactly how many parts are there, it is highly complex. The human behaviors are driven by self-interest all the way to group interest. The figure below simplifies the interaction of those two scales into 4 quadrants. The free market forces are best served with low CUA and by highly self-interested individuals. The contractual obligations come about as we motivate individual to pursuit self-interest to group interest. If the CUA is high and our motivation is largely driven by self-interest, management has a hard time managing. Fostering cooperate culture is the key to maintain optimality (from a manager perspective) in a high CUA environment. Concretely, we can explore some real life examples. In a fair and transparent spot competition, the rules are clear, route is known, and the objective is set. Its CUA factor is low. Each player or each team is driven by their interest. The rule is the fastest gets the trophy. From management perspective, the outcome is many teams or players got filtered out based on one particular metric. Thus, the output is a selection of the best of the best. Sometimes, even in a low CUA environment, motivation by self-interest can be sub-optimal compared with motivation by group interest. Let me digress a bit to explain why sub-optimality can arise. In game theory, economists illustrate a situation, commonly known as the prisoner’s dilemma, which involves the prisoners who have high self-interest and low trust in a low CUA environment. The payout for 4 different scenarios are illustrated in the figure. What is really interesting is that, the rules are very clear and the penalty (years in jail) are well listed in advance. For each prisoner, he can only decide either to confess or to remain silent. However, from his perspective, the payout of remaining silent is low, serving a total of 21 years, whereas the payout of confession is high, serving just 5 years. Therefore, both prisoners would confess. However, an outside observer knows that the most optimal actions to take is for both to remain silent. This way, the payout is the highest with each serving only 1 year. The concluding remark is that we , managers, need to introduce extra measures to guide the behavior to optimality. One method is to form a contractual agreement. Another is culture and social expectation. In addition, rules are unsuitable in the high CUA environment. The rules are fixed, lacking any flexibility in the dynamic environment. Their enforcement can be tricky. However, culture is more adaptive, constantly evolving. Its flexibility is more useful in a dynamic environment. Management usually pays employees more if the nature of the job contains higher CUA level. So if we want to keep wage cost low, we better split, design, and reorganize tasks, so that they are as low in CUA as possible. It is extraordinarily hard to hiring an outside CEO to manage a company that is in a crisis and to steer the ship away from the next trouble. An outside CEO, even though he or she may be very talented in managing companies, he or she may not able to execute a rescue plan that eradicates the problem at the root. If the cooperate culture was part of the problem, then not knowing the culture is not part of the solution. The high output of corporation Intel is a chip manufacturer. It sells, produces, and develops microprocessors. Its product ranges are not narrow. Here, Andy argues that the firm is structured in two separate yet interconnected blocks. We see that figure below. The vertical column represents functional units. The horizontal row represents the business units. The functional units are shared among all business units. This way, Intel can standardize the procedures of sales, manufacturing, technology development and administration. It also enjoys the economy of scale; it houses 70% of all Intel employees. However the business units serve to adapt to market preferences. For instance, the menu of the breakfast factory varies depending the local tastes and raw material availability. The system business group, microprocessor business group may compliment each other. For instance, say a laptop requires both the WiFi card, microprocessor and many other components that Intel manufactures. Then, each group does not advertise separately. Instead, they sell all components as a bundle. I have seen similar structure in my work as a programmer. Scikit learn, a python package for machine learning, categorizes its APIs by algorithm types; PyTorch, a python package for training deep neural networks, lists out its tutorial by applications. From sales to delivery, we have learned that we need to pay attention to choke points. Here we revisit the concept from a corporation perspective. In this diagram, we can see the construction branch at the top and a sales branch at the bottom. The choke point is that the manufacturing plants want the order to come in before making the product and then send the product to its customer. To minimize this coke point, it would be great to predict the future demand and start making the products prior to the arrival of the actual sales. This way, the choke point of the lag time in manufacturing is reduced. And if so, the next choke point becomes logistic, outside of Intel control. As far as Intel is concerned, it has sped up the order and cut down customer wait time. The greatest management challenge is the discrepancy between knowledge and power. Most managers do not have time to investigate and study the technology that is rapidly advancing everyday. Their understanding of the technology is not as deep as their technical staff. Like Andy, the managers take phone calls from customers and convene meetings with various functional departments and business groups, so they understand the needs and the wants of the market. However, the difficulty remains despite such effort. It is hard to know how to connect those in the position of power to make the decision with those in the position of knowledge that is needed to make a sound and balanced judgment Not coming across as a definite answer, Andy recommends every staff play multi-roles at the firm. This flexibility allows the staff to contribute towards issues differently at various times. For instance, Andy can be the leader in one meeting, but he is just a participant in another meeting. Plans The plans are to be written on the most senior management level; Intel plans about 5 years ahead. Every year the plan is updated and revised accordingly. The strategic thinking propagates down the levels of management. It is important to ensure actions at various levels constructively help Intel to achieve its overall strategic objectives. That is proper alignment. The most crucial element in running the firm is the promotion of all excellent staff members. Intel has some basic principles for promotion. 1 only promote those whose performance exceeds expectation, not their potential to perform. When the time is ready, the firm promotes. However, it is very important that every newly promoted staff got given time and training in the new role. This idea links back to the task-maturity concept. The funny thing is that Intel continues to promote the staff to the next level up if once again he exceeds the expectation. Like the chart shown below, each promotion comes with higher financial reward. The key element is to let every staff know that if one performs well beyond expectation, one gets promoted. Hard work and talent are fairly recognized and appreciated. In some sense, Andy himself rises to where he is by merit. However, like the Peter principle, the staff are promoted to the level that they become less competent. In addition, those that are good at the job at the junior level may not indicate their suitability on a more senior level. It is okay to demote someone after a wrong or premature promotion if he or she needs more time to adjust. Once, he is ready. The management then promote him again. I reckon the problem of scale of the company is boiled down to management. This promotion scheme suggests that to overcome the scale problem we need to manage those who are talented and capable. In turn, they then help us mange other capable and talented employees. Is this a new idea? If we turn to history for guidance, I realize that nearly 2000 years ago, during the early years of the Han dynasty in China. The emperor at that time discussed with his best general about the leadership and talent in commanding an army among the rest of his generals. The emperor asked his best general how many troops he could command. The reply was about 100 thousands. Then, the emperor asked how many troops the best general can command. Instead of 100 thousands, the reply was infinite. The emperor laughed, and couldn’t help but wonder if the best general can command so much more troops, why he wasn’t the emperor. The best general answered that while the emperor couldn’t lead solders, he could lead leaders. That was why the best general was working for him. Furthermore, he believed such ability was by nature, not nurture. My closing remark is that managing people is a skill, an art, not knowledge. We all need plenty of practice to master such a skill.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/high_output_management/image37095.jpg" /><media:content medium="image" url="/assets/images/high_output_management/image37095.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Algorithms to live by (by Brian Christian and Tom Griffiths)</title><link href="/reading/2023/08/31/algorithms_to_live_by/" rel="alternate" type="text/html" title="Algorithms to live by (by Brian Christian and Tom Griffiths)" /><published>2023-08-31T00:00:00+08:00</published><updated>2023-08-31T00:00:00+08:00</updated><id>/reading/2023/08/31/algorithms_to_live_by</id><content type="html" xml:base="/reading/2023/08/31/algorithms_to_live_by/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I spent a total of several months to read a book called “Algorithms to live by:  The computer science of human decisions” written by Brian Christian and Tom Griffiths. The book shows us why algorithmic thinking not only is useful for computer scientists but also is helpful to laymen. Concise writing and elegant explanation, the book reveals insights from decades of research in computer science that, in principle, can be applied to our everyday lives to solve common decision-making problems and illuminate the workings of the human mind.&lt;/p&gt;

&lt;p&gt;Our lives are constrained by a set amount of space, resources and time, limits that give rise to a particular set of problems and force us to choose among alternatives and to not have them all. How to do so efficiently and effectively has been central to computer science.&lt;/p&gt;

&lt;p&gt;What should we do, or leave undone, in a day or a lifetime? How much messiness should we accept? What is the cost of messiness? What balance of new activities and familiar favorites is the most fulfilling?&lt;/p&gt;

&lt;p&gt;The book succinctly illustrates how the problems in computer science mirror the problems in daily living. The book starts from the basic concepts such as sorting and moves to the more advanced such as networks, from man vs nature to man vs society. Thus, its content is well-suited for all ages with different backgrounds.&lt;/p&gt;

&lt;p&gt;Man vs nature, man vs self&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enough is enough (chapter1: Optimal stopping : when to stop looking),&lt;/li&gt;
  &lt;li&gt;Trade off between exploration and exploitation (chapter2: Explore/exploit : the familiar vs. the greatest)&lt;/li&gt;
  &lt;li&gt;In what order and what comes first (chapter3: Sorting : making order)&lt;/li&gt;
  &lt;li&gt;What to forget (chapter4: Caching : forget about it)&lt;/li&gt;
  &lt;li&gt;Timing is everything (chapter5: Scheduling : first thing first)&lt;/li&gt;
  &lt;li&gt;When should we change our mind (chapter6: Bayes’s Rule : predicting the future)&lt;/li&gt;
  &lt;li&gt;Thinking becomes harmful (chapter7: Overfitting : when to think less)&lt;/li&gt;
  &lt;li&gt;Time to compromise (chapter8: Relaxation : let it slide)&lt;/li&gt;
  &lt;li&gt;Roll the dice (chapter9: Randomness : when to leave it to chance)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Man vs society&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We are in this together (chapter10: Networking : how we connect)&lt;/li&gt;
  &lt;li&gt;Play games (chapter11: Game theory : the minds of others)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personally, out of all the chapters, I enjoy the chapter on optimal stopping the most. Optimal stopping is the most intriguing of all, for life is of finite length with an uncertain end date.&lt;/p&gt;

&lt;p&gt;If you read the recommendations found on book stores such as Amazon or somewhere else of that sort, you will find that many readers would recommend this book because of the insights computer scientists have to offer. While I agree with their recommendations, I think it is also paramount to take note that the level of details in the book is insufficient to truly teach someone to start thinking and behaving like a computer scientist. At best, the descriptions are introduction to some elementary principles or concepts widely adopted or even taken for granted by the computer science community today. With that being said, for me, when I read this book, I can learn to apply the theories outside of the classroom.&lt;/p&gt;

&lt;h2 id=&quot;chapter-1&quot;&gt;Chapter 1&lt;/h2&gt;
&lt;p&gt;Optimal stopping tries to solve the problem of when we should stop searching optimally and make a decision under resource constraints such as time. The best way to illustrate optimal stopping is via the infamous secretory problem. The secretory problem is a challenge on hiring the best candidate among all the applicants for a secretory role.&lt;/p&gt;

&lt;p&gt;Once the job advertisement has been posted, we’ve in total received N applicants. The total number of applicants are of paramount to this problem. The more applicants, the harder it is to find the best amongst them unless we use the method described in the book.&lt;/p&gt;

&lt;p&gt;These applicants are interviewed  in the order of their application submission dates, from the earliest to the latest. We rank each applicant by his or her performance during an interview. This implies that we do not know anything about the performance of applicants who have yet to be interviewed. Thus, all the information that is available to make the hiring decision only stems from the past, nothing from the future.&lt;/p&gt;

&lt;p&gt;To make the story is bit more interesting, the book introduces the element of a seller’s market. In a seller’s market, if we offer an applicant a job, he or she is assumed to accept our offer on the spot. However, if an offer is not given right away, the applicant is gone forever. Therefore, at the end of each interview, we either offer a job or reject an applicant immediately.&lt;/p&gt;

&lt;p&gt;The aim of the secretory problem is to hire the best candidate from a pool of applicants.&lt;/p&gt;

&lt;p&gt;In mathematical modelling, we assume that the order these applicants submit the applications is random. In other words, the best applicant could appear at any position of the interview waiting list.  In this problem, our baseline method is to  offer one of the applicants the job randomly without an interview. If the total number of applicants is N, the chances for us to have hired the best applicants is 1/N. As N increases, our probability of success shrinks EXPONENTIALLY.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/algorithms_to_live_by/sampleSize_vs_probabilitySuccess.png&quot; alt=&quot;Picture description&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we know our baseline performance. Can we do better than the baseline performance?&lt;/p&gt;

&lt;p&gt;The authors suggest a “look-and-leap” approach with 37% rule. The rule strikes an optimal balance between knowing the distribution of candidate quality and having enough chances to offer a job to “the-best-seen-so-far” candidate.&lt;/p&gt;

&lt;p&gt;One caveat we must highlight is that in this optimal stopping challenge, by its very definition of the goal, says that we should never never hire someone who is worse than the best we have ever seen. However, as we shall see in later chapters of the book such behaviour may be warranted when we take other factors into considerations.&lt;/p&gt;

&lt;p&gt;What makes the secretary problem hard is that the more time we spend on interviewing applicants, our “best-seen-so-far” persona is going to improve. Meanwhile, we are becoming less likely to encounter someone better than the “best-seen-so-far”. That means we have already missed out on the best applicant. Therefore, we must make a trade off between the proportion of applicants that is used to sample the underlying distribution, the look phase, and the proportion of applicants that is used to wait for the “best-seen-so-far”, the leap phase.&lt;/p&gt;

&lt;p&gt;Specifically, the look phase requires us to interview and rank applicants from the “worst-seen-so-far” to the “best-seen-so-far”. The look phase takes up 37% of the entire pool of applicants. Hence, the name 37% rule. After the look phase in which we have identified our “best-seen-so-far” persona, we enter the leap phase. Since we have rejected every applicant in the look phase, we must accept one applicant in the leap phase. The rule of acceptance is that this applicant ought to be better than the “best-seen-so-far” in look phase.&lt;/p&gt;

&lt;p&gt;Even with this look-and-then-leap strategy, the probability of success is only 37%. In other words, 63% chance of not locating the best applicant. However, one advantage of this look-and-then-leap strategy offers is that the strategy can be scaled up- its probability of success is independent of sample size, N. Thus, as N increases (mathematically speaking whenever N is greater than 3), the more we should employ this look-and-then-leap strategy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/algorithms_to_live_by/37rule.png&quot; alt=&quot;Picture description&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Can we reduce our effort and time spend in the look phase to improve the overall efficiency of the strategy?&lt;/p&gt;

&lt;p&gt;The answer is a resounding YES. However, we must obtain our information regarding the quality of applicants in a form of distributions from other reliable sources, including but not limited to population census, standardized examinations such as an SAT score, etc.&lt;/p&gt;

&lt;p&gt;If we modify our secretary problem slightly (say we instead of hire 1 applicant, we hire h applicants), our challenge is shifted from hiring the best to hiring h good-enough applicants.&lt;/p&gt;

&lt;p&gt;Here I explore two simple distributions, namely Gaussian and uniform distributions. Apart from being easy to compute, I choose Gaussian and uniform distributions, for they often represent real-world distributions. For example, the height of the population roughly follows a Gaussian distribution. For those who expect their future spouse to be at least h meter tall, they can look up the census and know what they can expect statistically.&lt;/p&gt;

&lt;p&gt;If we assume our applicants belong to a uniform distribution; their quality ranges from 0 to 1, we can see that 1) as we have fewer and fewer applicants left in the pool, we must lower our quality acceptance threshold if we seek to maintain the same probability of success, 2) as we hire more and more applicants, we also must lower our quality of acceptance without jeopardizing our chance of success.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/algorithms_to_live_by/fullInfo2_uniform.png&quot; alt=&quot;Picture description&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Likewise, we adjust our quality acceptance threshold in the case of a Gaussian distribution. However, what is most interesting is that the bell-shape implies most applicants are average, which implies their quality is on a similar level. This average lowers the probability of success quite dramatically even if we just want push the bar of quality slightly to the right (asking for better).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/algorithms_to_live_by/fullInfo2_normal.png&quot; alt=&quot;Picture description&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;chapter-2&quot;&gt;Chapter 2&lt;/h2&gt;
&lt;p&gt;In chapter 2, the authors explain the difficulty in the trade off between exploration and exploitation. This issue concerns with the problem of when to apply what we know and familiar and when to go outside of our comfort zone and try something new. 
Let’s loosely define the terms for clarity. Exploration in this context means we try new things and absorb new information that we do not know before or are unfamiliar. Exploitation here means we are making use of our existing knowledge and perform familiar tasks. Often this means we are within our comfort zone. Exploitation and exploration may or may not lead to any good or bad outcome. The problem arises when we can only do either exploration or exploitation.&lt;/p&gt;

&lt;p&gt;What to cook tonight? Should we choose to cook what works well in the past or should we cook something that inspires us from the Internet instead?&lt;/p&gt;

&lt;p&gt;The authors suggest that we should take the number of chances remaining into consideration. For instance, how many more meals are we going cook for the rest of our lives?
Whenever there are many chances left, it may pay to spend more time on exploration at the beginning. Mathematically, one can use a time discount factor to bring the value of the future to present and evaluate the total payoff here and now. The authors highlight this as one possible reason for children, who appear to be curious and lack of concentration, to play and explore more compared to elderly who exploit more in their comfort zone. If we choose exploration, we can apply the optimal stopping to determine how many samples of recipes we need to read about before settling down to try the most appealing so far.&lt;/p&gt;

&lt;p&gt;Furthermore, there are times when we have to abandon what we know and explore. For instance, technology that has become obsolete or disruptive change in customer’s preferences. 
We have learned that in optimal stopping, the more time spent on the look phase, the less time we have for the leap phase. We risk missing out.&lt;/p&gt;

&lt;p&gt;The concept of exploration and exploitation slightly relates to the concept of stickiness or inertia. The book mentions a trick. What works may continue to work so we should exploit more of what works. Success has inertia. What fails may continue to fail so we should avoid that and explore other alternatives. In the case of cooking, we should cook the same dish until either its ingredients run out or we hate the dish.&lt;/p&gt;

&lt;p&gt;Both exploration and exploitation bring about emotional responses. Exploration may give us excitement, anxiety or regret while exploitation may give us comfort, boredom or regret. 
One common pitfall the authors warn about is that we often are too slow to explore. For instance, say we bought a packet of 10 of something, we are less likely to explore alternatives until we have consumed all 10 in order to avoid a sense of loss.&lt;/p&gt;

&lt;h2 id=&quot;chapter-3&quot;&gt;Chapter 3&lt;/h2&gt;
&lt;p&gt;In what order and what comes first (chapter3: Sorting : making order)&lt;/p&gt;

&lt;p&gt;Sorting is an important concept in computer science, for sorting is required whenever we want to order a list of objects. 
The difficulty in ordering things increases with the number of things we have to sort. Scale is the enemy, similar to the optimal stopping problem.&lt;/p&gt;

&lt;p&gt;Ordering a list of objects is beneficial if we want to retrieve items in future. The location of an object is known at retrieval time. Ordering a list of objects also makes aesthetic sense. In daily lives, sorting is most ubiquitous during card games, in which we sort our hands such that we will be able to identity advantageous combination quickly. Even though the authors have not gone into great depth on this, one can easily relate sorting to the optimal stopping. After all, we must sort properly in order to determine the best and the worst. During the look and leap phases, we constantly need to sort applicants such that their distribution can be quantified.&lt;/p&gt;

&lt;p&gt;This goal of finding the best always come up in sporting competitions. However, there is a caveat. Sport events are designed to entertain rather than to educate the audience on who is the best, second, third, and so on and so forth. Similar level teams are played against another to maximize excitement, but not for accuracy. Thus, it is hard to really place a verdict on which team is better if we take chance into account. Further complicating the outcome is that we may only play the game once and eliminate the loser straight away to save time and expanses and keep the audience entertained. While this is a cost-effective way to generate excitement, its ranking of the best, second, and third may not be a reliable reflection of the team true competence. For instance, the best team is assigned to play against the second best team at Round 1. The second best team loses the game and its chance to play against the third from that moment afterward.&lt;/p&gt;

&lt;p&gt;We therefore have to make appropriate trade off between the truth and entertainment. The authors briefly describe a number of classic sorting algorithms. Bubble sort is very robust, but it is very time consuming. It is O(N^2) as it demands pairwise comparisons of every object on the sorting list. Merger sort is very fast. It is O(N * log(N)).&lt;/p&gt;

&lt;p&gt;It can be parallelized, a feature that is particularly suitable for a very large data set on computing clusters. It has done so by splitting the list of objects into many shorter chunks. Each chunk is sorted first and later merged to form fewer yet longer lists. The merging part is where we save some effort. Merge until we obtain the full list of sorted objects. While most people do not sort things routinely, one useful idea we could take away from merger sort is merging. It is easier to learn new knowledge if we can absorb new information in small chunk and merge with our prior.&lt;/p&gt;

&lt;h2 id=&quot;chapter-4&quot;&gt;Chapter 4&lt;/h2&gt;
&lt;p&gt;Caching is the main theme of Chapter 4. Unlike optimal stopping, exploration vs exploitation and sorting, caching is a problem regarding the future, not the present. The difficulty in caching, as explained by the authors, is that in order to know what we should put inside the cache, we need to know what we will retrieve in future. Successful caching requires accurate prediction of future, a very hard task.&lt;/p&gt;

&lt;p&gt;Here the authors bring up some typical heuristics that every person can understand and relate to. Before describing what the heuristics are, it is easy to notice many messaging apps automatically order the history of chat messages in a chronological order with the most recent being at the top. Over time, those contacts with which we seldom talk fall to the bottom while those we often talk with rise to the top. Although caching may not be a strictly correct term, the size of the screen is the cache and the list of visible chat history is objects in the cache. Space is precious, for the screen size is extremely limited. Such ordering of chat is to make our lives easier when we need to find and locate chat history that we are interested in. By exploiting our past behaviour, the program makes a straightforward guess that we continue to chat with the same group of individuals. Placing those conversations on top therefore reduces our time to reach for them, unless the assumption of continuation is wrong.&lt;/p&gt;

&lt;p&gt;Placing items in chronological order isn’t the only optimal way. But it is very common. For example, news headlines articles, trending search queries.
Human memory works on the basis of first in first out whereas logistic warehouses use the basis of first in last out.&lt;/p&gt;

&lt;p&gt;Caching has a structural dimension. In the architecture of a CPU such as Intel Core i7 makes heavy use of cache memory. Its L1 is 384KB， L2 1.5MB，L3 12MB. Typically the larger the memory, the more expansive and slower. Thus, caching is a sorting problem in disguise. We aim to sort items by their future importance. We can relate to this in our everyday lives. A firm rents an office in downtown CBD while it rents a warehouse in a suburb. Frequently used items are stored in the office in CBD where most of its employees have readily access. Less frequently used items are kept in the warehouse, maximizing the utilization of rental cost, space and convenience.&lt;/p&gt;

&lt;h2 id=&quot;chapter-5&quot;&gt;Chapter 5&lt;/h2&gt;
&lt;p&gt;Timing is everything. The authors delineate the tricky aspect of scheduling, mainly dependency. The objective determines the timing. The timing determines the method. The method determines the tools. Scheduling matters. The authors give us three conventional examples. First, if our objective is to reduce wastage, we should eat our earlier grocery first before it expires. Second, if our objective is to reduce latency of our sales representatives, we ought to urge them reply to those customers who raise their questions first. Third, if our objective is to maximize our revenue or income, we ought to schedule our time and energy to tackle the most valuable projects. Fourth, if our objective is to cut down the number of unfinished tasks, we ought to start completing those easy and short ones.&lt;/p&gt;

&lt;p&gt;Not all tasks are created equal. The book highlights the conventional wisdom that we can assign any task to one of four quadrants. The first quadrant contains tasks that are important and urgent. The second contains tasks that are important but not urgent. The third contains tasks that are unimportant but urgent. The last contains tasks that are unimportant and not urgent. The authors caution us that what may first seem unimportant can be significant whenever they are required to be completed before others.&lt;/p&gt;

&lt;p&gt;To help with organization, we use a Gantt Chart. The chart provides a visual representation of dependency and chronological order. Parallelized tasks show up on different rows that overlap with one another. The nuance the authors pay attention to is the trade off between throughput and delays. Apparently, what we think of parallelized tasks may not be truly parallelized and switching between them incurs friction. 
Using an example of OS scheduling, the authors explain that users experience the impact of high latency of various applications by switching amongst them frequently. This incurs switching cost and the computing throughputs overall drops.
In the real word, we often pay the switching cost whenever we change from one task to the next. For example, replying messages or interruption while programming a module or writing an article is inefficient.&lt;/p&gt;

&lt;p&gt;Switching brings about hidden burden. We see it and know it as we have to re-focus our mind on the task at hand after coming back to it from somewhere else. Hence, a good schedule ought to offer a block of undisrupted time to get things done without costing too much delays. Of course, a Gannt Chart also offers much more that are beyond the scope of this chapter. Unfortunately, life can throw us new surprises that render old plan irrelevant and obsolete.&lt;/p&gt;

&lt;h2 id=&quot;chapter-6&quot;&gt;Chapter 6&lt;/h2&gt;
&lt;p&gt;Uncertainty comes into the mind of decision making in When should we change our mind (chapter6: Bayes’s Rule : predicting the future). If you want to estimate the probability of the chances of your bus arriving on time at a bus stop, one simple heuristics is to sum up the number of past incidents plus one and divided by the total number of the bus arriving at the stop plus two.&lt;/p&gt;

&lt;p&gt;The intuition behind this heuristics is that when the event is frequent, we converge to the true underlying probability, and that when the event is rare, we converge to 50-50.&lt;/p&gt;

&lt;p&gt;In this chapter, the authors highlight several essential concepts in Bayesian statistics.
The concept of prior distribution is the information or knowledge we have known already. This prior can be wrong, but that is what we have got without further updates. Unlike prior distribution, the concept of posterior distribution is knowledge gained when new information arrives or something else has occurred.&lt;/p&gt;

&lt;p&gt;The crux of the prediction boils down to how we could best update and improve our prior and posterior distributions to describe reality. The authors suggest a simple 4-step procedure. First, let our goal be as ambitious as predicting the future, but we ought to accept our prediction to have a wide range. Second, let’s make a preliminary prediction from our prior knowledge. Third, stream the latest information to adjust our prior knowledge if our prediction is inaccurate. Yet, the prior could still be inaccurate even if the prediction is right. Fourth, update the posterior as new information arrives.&lt;/p&gt;

&lt;p&gt;The hardest part of predicting the future is that there are many factors leading to an outcome. To disentangle these factors, the authors emphasize the key difference between association and causation. Association refers to two variables occur at the same time but one DOES not cause the other to happen. One variable does not come into existence and has nothing to do with the lack of the other variable. On the contrary, causation means one variable causes another variable to either disappear or appear. The relationship means that you must have one before the other. For example, polar bear and ice. A polar bear does not make ice. Ice does not make a polar bear. However, they are associated together because of the ecosystem and habitat. Thus, polar bear and ice is association, not causation.&lt;/p&gt;

&lt;p&gt;When it comes to distributions, their shape matters. Here the book introduces three typical distributions, namely normal, power-law and Erlang distributions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.statisticshowto.com/power-law/&quot;&gt;Power Law&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mathworld.wolfram.com/ErlangDistribution.html&quot;&gt;Erlang Distribution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mathworld.wolfram.com/NormalDistributionFunction.html&quot;&gt;Normal Distribution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The normal distribution is fat at the center at the average and symmetrical on both sides. So, as a rule of thumb, we should always predict the sample average if our prior knowledge tells us whatever we are dealing with comes from a normal distribution.&lt;/p&gt;

&lt;p&gt;The power-law distribution is long-tailed. So, as a rule of thumb, we should always predict the lower end of the value range for a sample. However, as the sample creeps to the right, our prediction should be scaled multiplicatively. For instance, doubling the box office if a movie keeps staying on the top view counts. As an aside, the frequency of occurrence of English words is described by Zipf’s law, which is similar to the power-law distribution.&lt;/p&gt;

&lt;p&gt;The shape of Erlang distribution is like the mixing of the normal and power-law distributions. So, as a rule of thumb, we can be safe to play with the median. However, as new information arrives, we could adjust our prediction by scaling it additively.  For example, we add another 10 minutes to the wait whenever our bus is late.&lt;/p&gt;
&lt;h2 id=&quot;chapter-7&quot;&gt;Chapter 7&lt;/h2&gt;
&lt;p&gt;Over-fitting is a common problem faced by computer scientists who heavily use mathematically modelling to describe real world processes. In this crucial chapter, the authors try to use polynomials or mathematical constructs to describe and explain how this problem arises and how to solve it. I seek to differ and try to offer a very simplistic way to delineate the basic idea to the public at the risk of the loss of accuracy.&lt;/p&gt;

&lt;p&gt;I think the quote “Never Attribute to Malice That Which Is Adequately Explained by Stupidity” adequately and eloquently summarizes this key idea behind over-fitting.&lt;/p&gt;

&lt;p&gt;Let me unravel the quote a little bit deeper. The assumption behind the quote, in my opinion is that stupidity is far more likely and far more common than malice, a state of affair that is good for the world generally. Malice, if done properly, requires dedication, preparation, intelligence, timing, skills and luck. Successful malice is thus far less likely than stupidity which requires none of the above. When in doubt, choose whatever simpler and more common.&lt;/p&gt;

&lt;p&gt;In contrast, when should we choose malice? 
One should choose malice when it is too hard to explain with stupidity alone. For instance, if the rationale centers around a complicated combinations of stupidity, carelessness, absentmindedness, forgetfulness, lack of information, Force Majeure. Then, malice is the simpler and more likely option as stupidity at extreme level is indeed quite rare.&lt;/p&gt;

&lt;p&gt;With this basic idea in mind, we can return to our attention on model construction and development. The authors suggest we should run some tests to validate our prior knowledge about the world and update it as described in earlier chapters. The whole point of this exercise is to bring the knowledge closer to reality. Some negative examples include students who are good at sitting examinations but poor at solving life problems. During their course of study, their prior knowledge has been moulded  closer to what is expected of them by examination system and farther away from the real world.&lt;/p&gt;

&lt;p&gt;In addition to describing this problem of overfitting, the authors make some suggestions on how to detect and contain it. The detection method is called cross-validation. The concept of cross-validation is to test as we learn. First, we split our problems into two parts. One for learning; another for validation. We learn the material only from the learning set and we test our knowledge on the validation set to check how accurate our learning has been. To check means we complete some assignments during both learning and validation and are evaluated against some metrics or scores. If our learning score is higher than validation scores, our learning have overfitted. If our learning score is lower than validation scores, we have cheated. If both scores are similar, we are okay.&lt;/p&gt;

&lt;p&gt;Last but not least, it is better to spend more time and energy to contemplate causality and less on association, a key concept we have already discussed at length previously. Thus, we should down-weight our experience, keep a keen eye on survivorship bias, and be especially vigilant as we face the ebb and flow.&lt;/p&gt;
&lt;h2 id=&quot;chapter-8&quot;&gt;Chapter 8&lt;/h2&gt;
&lt;p&gt;The key takeaway of Relaxation : let it slide is to abstain from binary thinking. One easy trap we fall into is to think about the world as binary. We might think about what interest we pursuit if we have won a lottery. We might also think about what we do to make a living. However, we seldom manage to find a solution that fits our passion and livelihood.&lt;/p&gt;

&lt;p&gt;The immediate implication is that often people choose either livelihood or passion.  The gap between these two activities at first sight leads most  people to fail to optimize for the better. The authors suggest that there is a better way. A compromise. We should make a compromise between our passion and livelihood. In order to find and evaluate a compromise, we must explore and rank various alternatives. The skills required to do so have already been introduced in earlier chapters.&lt;/p&gt;

&lt;h2 id=&quot;chapter-9&quot;&gt;Chapter 9&lt;/h2&gt;
&lt;p&gt;Randomness : when to leave it to chance. The title of this chapter encapsulates its essence. Although the word chance may suggest something outside of our control, the actual meaning in this case is well within our control. When we say chance, we are trying to express our inability to fully comprehend a population. Thus, we resort to sampling as a strategy to gain a faithful estimate of the entire population statistically without explicitly looking at every member of a population. Sampling depends on the underlying distribution at least in theory. However, due to the occurrence of chance and randomness, there is NO guarantee that our collected samples are representative and portray the real distribution; we therefore describe such uncertainty by statistical measures such as standard errors and averages.&lt;/p&gt;

&lt;p&gt;Apart from our inability to fully comprehend a population, there are other circumstances in which sampling is beneficial or even is the sole option. Sampling can be used in place of analytical thinking when thinking is slow and expansive while sampling is fast and cheap. For instance, it is far easier and cheaper to look up the pay scale of software engineers on a job hunting website than to analyze a company’s financial health, the contribution of software component to its services and products, and individual’s competency and productivity.&lt;/p&gt;

&lt;p&gt;Prime number and its unique usage in cryptography employs sampling.  Prime numbers when multiplied by some special numbers yield number with some characteristics. However, this behaviour is not always true. Thus, the pragmatic solution is to perform a series of multiplication to test the number of its likelihood of being a prime number, during which each step allows for some acceptable false alarm rate. Longer the test series, higher our confidence on weather or not the number is a prime.&lt;/p&gt;

&lt;p&gt;Outside of mathematics, biology, sociology and many other disciplines rely on sampling heavily. One reason, I suspect, is that it is hard to pinpoint causal relationships in problems concerned by scientists of those disciplines and to conduct controlled experiments. Rather than observing causal relationships, they observe complex interactions and associations. However, sampling is no panacea. Sampling is unsuitable for things that rarely occur. Some infamous examples include Great Depression, 100-year flood, etc.&lt;/p&gt;

&lt;p&gt;With all that information, we close the section on man versus nature. All the previous chapters try to illustrate what individuals reactions or responses are in light of the insights from computational algorithms. Nature does not second-guess man and does not respond to our actions in anticipation of our actions. The upcoming two chapters explore the thinking of computer scientists on man versus society, in which our actions bring about the reactions of others which in turn bring about our reactions.&lt;/p&gt;

&lt;h2 id=&quot;chapter-10&quot;&gt;Chapter 10&lt;/h2&gt;
&lt;p&gt;The chapter centers on how computers or devices really connected together to form the so-called  the Internet. This is particularly interesting because one key concept emerges from the work of the Internet is the development of a protocol. In short, a computer talks to another computer in ways that are radically different from human interactions. A computer uses many-to-many node interactions. The same message can be copied and distributed on the network simultaneously. The message is chopped up into smaller packages and are sent out to the network. Since there are so many computers working in the network, the arrival or departure of packages appear to be random and unpredictable.&lt;/p&gt;

&lt;p&gt;With that in mind, our solution must entail the following attributes in order to cope with the demand characteristics of the internet. First, the network has to be robust and reliable. Obviously, it needs to serve billions of users daily. Second, the network has to be able to handle randomness, a circumstance that is very tricky for a scheduler (please refer back to the scheduling chapter for a more in-depth discussion). Third, the network has to be distributed, not centralized.&lt;/p&gt;

&lt;p&gt;If we want to circumvent the need for the creation of a centralized party that uses a top-down approach to mange the entire network, we must establish a bottom-up approach in which everyone obeys some agreed-upon protocol. If we want to increase the robustness and reliability of the network, we must recognize that there will always be mistakes when we pass along package of messages, and we must tolerate some errors. Thus, the solution enforces that the same messages are to be duplicated, split up into many smaller pieces, and sent to the destination via many different routes simultaneously. Often the shortest route may not be the fastest due to traffic congestion at the network nodes along the path. From one node to the next, we check the next node has actually gotten the message by asking for a confirmation message. When this confirmation is performed every time, the traffic volume easily doubles as a result. Yet, this confirmation ensures us if a packet is lost, we know about the loss and can resend the missing package.&lt;/p&gt;

&lt;p&gt;Today, TCP is the protocol that underpins the entire Internet as we know it. One rule I find most interesting is the rule on backing off. The rule has two parts. When the rate of sending and receiving confirmation is fast, the rule says we should gradually ramp up the rate of sending incrementally. When the rate of sending and receiving confirmation is slow and coming to a halt, we should then back off rapidly. It is asymmetrical. For instance, when our browser fails to fetch a website, we first retry after 2 minutes, then 4, 8 and so on. The retry wait duration grows multiplicatively longer. Thus, it is interesting that the saw-toothed shape of traffic flow is indeed the most optimal on average for everyone as a whole.&lt;/p&gt;

&lt;p&gt;Here, we can relate to the concept of delays and throughput from earlier chapters. The node of the network and us (users) face the dilemma of delays and throughput just like a resource scheduler.
A node is just like a computer with limited resources. Lower delay means the node puts priority on incoming signals whenever they arrive by switching to them. However, as we have seen earlier about switching cost and protocol, these signals can often be randomly distributed and in small pieces. Processing them as they come by increases switching cost but reduces delay at the expense of lower throughput. Thus, one design feature of nodes is a buffer or queue. A queue allows us to put tasks on hold until earlier tasks are completed. This helps keep switching cost low and throughput high. One draw-down is that when the queue grows too long, the delay becomes too noticeable for users.&lt;/p&gt;

&lt;p&gt;Another point worth mentioning is the importance of each message. As in resource scheduling, we need to give a score of priority for each task. As the traffic slows with growing number of users on the Internet, it is imperative to prioritizes the most important messages. One feasible solution is to kick out messages once the queue grows too long. In doing so, users would have to resend the same message again when it fails earlier. Yet, this very act of resending broadcasts to the network that this is important. Also, kicking messages out automatically keeps delays low and traffic less congested. So long as we can ensure the message is resent by the user who really wants to do that, instead of by some automatic software.&lt;br /&gt;
##Chapter 11
Game theory : the minds of others is an introductory chapter on game theory and not much on algorithms. It briefly sheds lights on how game theory works but leaves out algorithms.&lt;/p&gt;

&lt;p&gt;For those who are interested in learning more about algorithmic game theory, the interface of theoretical computer science and game theory, would have been sorely disappointed.&lt;/p&gt;

&lt;p&gt;I did a quick search on algorithmic game theory; what I quickly realize is that algorithmic game theory is a complex subject, despite of its young age. Someone even wrote an entire book called [Algorithmic Game Theory] (https://doi.org/10.1017/CBO9780511800481).&lt;/p&gt;

&lt;p&gt;The first dilemma is the prisoner’s dilemma, a classic problem in game theory. The crux of the dilemma is how to act when you cannot be sure of what the other person may do in response to your action. And their reaction inevitable impacts on your gain or loss. This invites recursive guesses. Both parties guess the mind of another and act according to what they believe to be in the best interests for themselves. Hence, we strive to maximize our gain and minimize adverse consequences of other’s actions.&lt;/p&gt;

&lt;p&gt;Mind games are tiresome. Is there a situation in which we no longer need to care about what the other person may act?  Is there a situation in which everyone is acting most optimally and remains so permanently? Theoretically, this situation is known as Nash equilibrium. One example is a stalemate in chess. Neither player can win nor lose. From this, we can see that Nash equilibrium only means the player’s actions remain constant, but it does not mean that players are better off or worse off. One caveat of Nash equilibrium is that we have no way of knowing how to guarantee players can reach there.&lt;/p&gt;

&lt;p&gt;Prisoner’s dilemma is two people game. Prisoner A and B. They are identical in all imaginable aspects, including what they can do. They can either confess or remain in silence. With two options, we have four outcomes, each with a different payoff for the prisoners. If both confess, both serve 5 years in prison. If either one confesses and the other remains silent, the one who confess is set free and the one who remains silent serve 20 years. If both remain silent, they serve only 1 year in prison.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/algorithms_to_live_by/prisoner_Dilemma.png&quot; alt=&quot;Picture description&quot; width=&quot;1100px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the point of the prisoners, it appears that they would like to serve only 1 year in prison and therefore say nothing. However, not knowing whether or not the other prisoner would confess, the prisoner’s best move is always to confess. Thus, the outcome is that both serve 5 years in prison. Thus, we can use this insight to explain why ethics and brotherhood is highly regraded as this introduces a penalty to confessors.&lt;/p&gt;

&lt;p&gt;Another problem is the tragedy of the common. The most intriguing observation is that when everyone does the same action, the advantage it brings over others disappears. Some classic examples are warfare and price war. Any effort spends on improving its competitive advantage is cancelled out on net.&lt;/p&gt;

&lt;p&gt;The US labor market provides an interesting real life illustration of the tragedy of the common. American workers are entitled to annual leaves. On average, workers take 50% of their annual leaves. 15% of them takes no leaves. The motivation at first seems contradictory. Why workers would not want to take as many days off as possible given that the law enables them to do so?&lt;/p&gt;

&lt;p&gt;One possible explanation provided by game theory is that when a worker takes more days off than his colleagues, he appears to be a lazy, unmotivated, and unambiguous fellow, inflicting damages on his image in the eye of his superior and his chance of a promotion. Thus, the outcome is that he would like to take one day fewer than his colleague.&lt;/p&gt;

&lt;p&gt;The chapter ends with a very brief discussion of the various types of auctions. However, auctions are far more complicated and deserve many more lengthy paragraphs, so we shall leave the chapter with my final remark: if you are unsuited for the game you are playing, then quit and don’t play that game. In other words, if you are the mouse in a cat and mouse game, don’t play that game.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this concluding chapter, the authors point out the ubiquitous fact that a programmer like myself can easily identified with: thinking in algorithmic terms is no easy task. The task is laborious, tiresome and enervating. The authors believe it is compassionate to let people think less, not more. How, perhaps one can seek help from artificial intelligence.&lt;/p&gt;

&lt;h2 id=&quot;p-s&quot;&gt;P. S.&lt;/h2&gt;

&lt;p&gt;For those who would like to explore this topic more, here is my recommendation.
Written by Daniel Kahneman, a co-recipient of the Nobel Prize for Economics in 2002 , Thinking fast and slow is a book about how we think, process information and decide.&lt;/p&gt;</content><author><name>Wilson Fok</name></author><category term="Reading" /><summary type="html">Introduction I spent a total of several months to read a book called “Algorithms to live by: The computer science of human decisions” written by Brian Christian and Tom Griffiths. The book shows us why algorithmic thinking not only is useful for computer scientists but also is helpful to laymen. Concise writing and elegant explanation, the book reveals insights from decades of research in computer science that, in principle, can be applied to our everyday lives to solve common decision-making problems and illuminate the workings of the human mind. Our lives are constrained by a set amount of space, resources and time, limits that give rise to a particular set of problems and force us to choose among alternatives and to not have them all. How to do so efficiently and effectively has been central to computer science. What should we do, or leave undone, in a day or a lifetime? How much messiness should we accept? What is the cost of messiness? What balance of new activities and familiar favorites is the most fulfilling? The book succinctly illustrates how the problems in computer science mirror the problems in daily living. The book starts from the basic concepts such as sorting and moves to the more advanced such as networks, from man vs nature to man vs society. Thus, its content is well-suited for all ages with different backgrounds. Man vs nature, man vs self Enough is enough (chapter1: Optimal stopping : when to stop looking), Trade off between exploration and exploitation (chapter2: Explore/exploit : the familiar vs. the greatest) In what order and what comes first (chapter3: Sorting : making order) What to forget (chapter4: Caching : forget about it) Timing is everything (chapter5: Scheduling : first thing first) When should we change our mind (chapter6: Bayes’s Rule : predicting the future) Thinking becomes harmful (chapter7: Overfitting : when to think less) Time to compromise (chapter8: Relaxation : let it slide) Roll the dice (chapter9: Randomness : when to leave it to chance) Man vs society We are in this together (chapter10: Networking : how we connect) Play games (chapter11: Game theory : the minds of others) Personally, out of all the chapters, I enjoy the chapter on optimal stopping the most. Optimal stopping is the most intriguing of all, for life is of finite length with an uncertain end date. If you read the recommendations found on book stores such as Amazon or somewhere else of that sort, you will find that many readers would recommend this book because of the insights computer scientists have to offer. While I agree with their recommendations, I think it is also paramount to take note that the level of details in the book is insufficient to truly teach someone to start thinking and behaving like a computer scientist. At best, the descriptions are introduction to some elementary principles or concepts widely adopted or even taken for granted by the computer science community today. With that being said, for me, when I read this book, I can learn to apply the theories outside of the classroom. Chapter 1 Optimal stopping tries to solve the problem of when we should stop searching optimally and make a decision under resource constraints such as time. The best way to illustrate optimal stopping is via the infamous secretory problem. The secretory problem is a challenge on hiring the best candidate among all the applicants for a secretory role. Once the job advertisement has been posted, we’ve in total received N applicants. The total number of applicants are of paramount to this problem. The more applicants, the harder it is to find the best amongst them unless we use the method described in the book. These applicants are interviewed in the order of their application submission dates, from the earliest to the latest. We rank each applicant by his or her performance during an interview. This implies that we do not know anything about the performance of applicants who have yet to be interviewed. Thus, all the information that is available to make the hiring decision only stems from the past, nothing from the future. To make the story is bit more interesting, the book introduces the element of a seller’s market. In a seller’s market, if we offer an applicant a job, he or she is assumed to accept our offer on the spot. However, if an offer is not given right away, the applicant is gone forever. Therefore, at the end of each interview, we either offer a job or reject an applicant immediately. The aim of the secretory problem is to hire the best candidate from a pool of applicants. In mathematical modelling, we assume that the order these applicants submit the applications is random. In other words, the best applicant could appear at any position of the interview waiting list. In this problem, our baseline method is to offer one of the applicants the job randomly without an interview. If the total number of applicants is N, the chances for us to have hired the best applicants is 1/N. As N increases, our probability of success shrinks EXPONENTIALLY. Now we know our baseline performance. Can we do better than the baseline performance? The authors suggest a “look-and-leap” approach with 37% rule. The rule strikes an optimal balance between knowing the distribution of candidate quality and having enough chances to offer a job to “the-best-seen-so-far” candidate. One caveat we must highlight is that in this optimal stopping challenge, by its very definition of the goal, says that we should never never hire someone who is worse than the best we have ever seen. However, as we shall see in later chapters of the book such behaviour may be warranted when we take other factors into considerations. What makes the secretary problem hard is that the more time we spend on interviewing applicants, our “best-seen-so-far” persona is going to improve. Meanwhile, we are becoming less likely to encounter someone better than the “best-seen-so-far”. That means we have already missed out on the best applicant. Therefore, we must make a trade off between the proportion of applicants that is used to sample the underlying distribution, the look phase, and the proportion of applicants that is used to wait for the “best-seen-so-far”, the leap phase. Specifically, the look phase requires us to interview and rank applicants from the “worst-seen-so-far” to the “best-seen-so-far”. The look phase takes up 37% of the entire pool of applicants. Hence, the name 37% rule. After the look phase in which we have identified our “best-seen-so-far” persona, we enter the leap phase. Since we have rejected every applicant in the look phase, we must accept one applicant in the leap phase. The rule of acceptance is that this applicant ought to be better than the “best-seen-so-far” in look phase. Even with this look-and-then-leap strategy, the probability of success is only 37%. In other words, 63% chance of not locating the best applicant. However, one advantage of this look-and-then-leap strategy offers is that the strategy can be scaled up- its probability of success is independent of sample size, N. Thus, as N increases (mathematically speaking whenever N is greater than 3), the more we should employ this look-and-then-leap strategy. Can we reduce our effort and time spend in the look phase to improve the overall efficiency of the strategy? The answer is a resounding YES. However, we must obtain our information regarding the quality of applicants in a form of distributions from other reliable sources, including but not limited to population census, standardized examinations such as an SAT score, etc. If we modify our secretary problem slightly (say we instead of hire 1 applicant, we hire h applicants), our challenge is shifted from hiring the best to hiring h good-enough applicants. Here I explore two simple distributions, namely Gaussian and uniform distributions. Apart from being easy to compute, I choose Gaussian and uniform distributions, for they often represent real-world distributions. For example, the height of the population roughly follows a Gaussian distribution. For those who expect their future spouse to be at least h meter tall, they can look up the census and know what they can expect statistically. If we assume our applicants belong to a uniform distribution; their quality ranges from 0 to 1, we can see that 1) as we have fewer and fewer applicants left in the pool, we must lower our quality acceptance threshold if we seek to maintain the same probability of success, 2) as we hire more and more applicants, we also must lower our quality of acceptance without jeopardizing our chance of success. Likewise, we adjust our quality acceptance threshold in the case of a Gaussian distribution. However, what is most interesting is that the bell-shape implies most applicants are average, which implies their quality is on a similar level. This average lowers the probability of success quite dramatically even if we just want push the bar of quality slightly to the right (asking for better). Chapter 2 In chapter 2, the authors explain the difficulty in the trade off between exploration and exploitation. This issue concerns with the problem of when to apply what we know and familiar and when to go outside of our comfort zone and try something new. Let’s loosely define the terms for clarity. Exploration in this context means we try new things and absorb new information that we do not know before or are unfamiliar. Exploitation here means we are making use of our existing knowledge and perform familiar tasks. Often this means we are within our comfort zone. Exploitation and exploration may or may not lead to any good or bad outcome. The problem arises when we can only do either exploration or exploitation. What to cook tonight? Should we choose to cook what works well in the past or should we cook something that inspires us from the Internet instead? The authors suggest that we should take the number of chances remaining into consideration. For instance, how many more meals are we going cook for the rest of our lives? Whenever there are many chances left, it may pay to spend more time on exploration at the beginning. Mathematically, one can use a time discount factor to bring the value of the future to present and evaluate the total payoff here and now. The authors highlight this as one possible reason for children, who appear to be curious and lack of concentration, to play and explore more compared to elderly who exploit more in their comfort zone. If we choose exploration, we can apply the optimal stopping to determine how many samples of recipes we need to read about before settling down to try the most appealing so far. Furthermore, there are times when we have to abandon what we know and explore. For instance, technology that has become obsolete or disruptive change in customer’s preferences. We have learned that in optimal stopping, the more time spent on the look phase, the less time we have for the leap phase. We risk missing out. The concept of exploration and exploitation slightly relates to the concept of stickiness or inertia. The book mentions a trick. What works may continue to work so we should exploit more of what works. Success has inertia. What fails may continue to fail so we should avoid that and explore other alternatives. In the case of cooking, we should cook the same dish until either its ingredients run out or we hate the dish. Both exploration and exploitation bring about emotional responses. Exploration may give us excitement, anxiety or regret while exploitation may give us comfort, boredom or regret. One common pitfall the authors warn about is that we often are too slow to explore. For instance, say we bought a packet of 10 of something, we are less likely to explore alternatives until we have consumed all 10 in order to avoid a sense of loss. Chapter 3 In what order and what comes first (chapter3: Sorting : making order) Sorting is an important concept in computer science, for sorting is required whenever we want to order a list of objects. The difficulty in ordering things increases with the number of things we have to sort. Scale is the enemy, similar to the optimal stopping problem. Ordering a list of objects is beneficial if we want to retrieve items in future. The location of an object is known at retrieval time. Ordering a list of objects also makes aesthetic sense. In daily lives, sorting is most ubiquitous during card games, in which we sort our hands such that we will be able to identity advantageous combination quickly. Even though the authors have not gone into great depth on this, one can easily relate sorting to the optimal stopping. After all, we must sort properly in order to determine the best and the worst. During the look and leap phases, we constantly need to sort applicants such that their distribution can be quantified. This goal of finding the best always come up in sporting competitions. However, there is a caveat. Sport events are designed to entertain rather than to educate the audience on who is the best, second, third, and so on and so forth. Similar level teams are played against another to maximize excitement, but not for accuracy. Thus, it is hard to really place a verdict on which team is better if we take chance into account. Further complicating the outcome is that we may only play the game once and eliminate the loser straight away to save time and expanses and keep the audience entertained. While this is a cost-effective way to generate excitement, its ranking of the best, second, and third may not be a reliable reflection of the team true competence. For instance, the best team is assigned to play against the second best team at Round 1. The second best team loses the game and its chance to play against the third from that moment afterward. We therefore have to make appropriate trade off between the truth and entertainment. The authors briefly describe a number of classic sorting algorithms. Bubble sort is very robust, but it is very time consuming. It is O(N^2) as it demands pairwise comparisons of every object on the sorting list. Merger sort is very fast. It is O(N * log(N)). It can be parallelized, a feature that is particularly suitable for a very large data set on computing clusters. It has done so by splitting the list of objects into many shorter chunks. Each chunk is sorted first and later merged to form fewer yet longer lists. The merging part is where we save some effort. Merge until we obtain the full list of sorted objects. While most people do not sort things routinely, one useful idea we could take away from merger sort is merging. It is easier to learn new knowledge if we can absorb new information in small chunk and merge with our prior. Chapter 4 Caching is the main theme of Chapter 4. Unlike optimal stopping, exploration vs exploitation and sorting, caching is a problem regarding the future, not the present. The difficulty in caching, as explained by the authors, is that in order to know what we should put inside the cache, we need to know what we will retrieve in future. Successful caching requires accurate prediction of future, a very hard task. Here the authors bring up some typical heuristics that every person can understand and relate to. Before describing what the heuristics are, it is easy to notice many messaging apps automatically order the history of chat messages in a chronological order with the most recent being at the top. Over time, those contacts with which we seldom talk fall to the bottom while those we often talk with rise to the top. Although caching may not be a strictly correct term, the size of the screen is the cache and the list of visible chat history is objects in the cache. Space is precious, for the screen size is extremely limited. Such ordering of chat is to make our lives easier when we need to find and locate chat history that we are interested in. By exploiting our past behaviour, the program makes a straightforward guess that we continue to chat with the same group of individuals. Placing those conversations on top therefore reduces our time to reach for them, unless the assumption of continuation is wrong. Placing items in chronological order isn’t the only optimal way. But it is very common. For example, news headlines articles, trending search queries. Human memory works on the basis of first in first out whereas logistic warehouses use the basis of first in last out. Caching has a structural dimension. In the architecture of a CPU such as Intel Core i7 makes heavy use of cache memory. Its L1 is 384KB， L2 1.5MB，L3 12MB. Typically the larger the memory, the more expansive and slower. Thus, caching is a sorting problem in disguise. We aim to sort items by their future importance. We can relate to this in our everyday lives. A firm rents an office in downtown CBD while it rents a warehouse in a suburb. Frequently used items are stored in the office in CBD where most of its employees have readily access. Less frequently used items are kept in the warehouse, maximizing the utilization of rental cost, space and convenience. Chapter 5 Timing is everything. The authors delineate the tricky aspect of scheduling, mainly dependency. The objective determines the timing. The timing determines the method. The method determines the tools. Scheduling matters. The authors give us three conventional examples. First, if our objective is to reduce wastage, we should eat our earlier grocery first before it expires. Second, if our objective is to reduce latency of our sales representatives, we ought to urge them reply to those customers who raise their questions first. Third, if our objective is to maximize our revenue or income, we ought to schedule our time and energy to tackle the most valuable projects. Fourth, if our objective is to cut down the number of unfinished tasks, we ought to start completing those easy and short ones. Not all tasks are created equal. The book highlights the conventional wisdom that we can assign any task to one of four quadrants. The first quadrant contains tasks that are important and urgent. The second contains tasks that are important but not urgent. The third contains tasks that are unimportant but urgent. The last contains tasks that are unimportant and not urgent. The authors caution us that what may first seem unimportant can be significant whenever they are required to be completed before others. To help with organization, we use a Gantt Chart. The chart provides a visual representation of dependency and chronological order. Parallelized tasks show up on different rows that overlap with one another. The nuance the authors pay attention to is the trade off between throughput and delays. Apparently, what we think of parallelized tasks may not be truly parallelized and switching between them incurs friction. Using an example of OS scheduling, the authors explain that users experience the impact of high latency of various applications by switching amongst them frequently. This incurs switching cost and the computing throughputs overall drops. In the real word, we often pay the switching cost whenever we change from one task to the next. For example, replying messages or interruption while programming a module or writing an article is inefficient. Switching brings about hidden burden. We see it and know it as we have to re-focus our mind on the task at hand after coming back to it from somewhere else. Hence, a good schedule ought to offer a block of undisrupted time to get things done without costing too much delays. Of course, a Gannt Chart also offers much more that are beyond the scope of this chapter. Unfortunately, life can throw us new surprises that render old plan irrelevant and obsolete. Chapter 6 Uncertainty comes into the mind of decision making in When should we change our mind (chapter6: Bayes’s Rule : predicting the future). If you want to estimate the probability of the chances of your bus arriving on time at a bus stop, one simple heuristics is to sum up the number of past incidents plus one and divided by the total number of the bus arriving at the stop plus two. The intuition behind this heuristics is that when the event is frequent, we converge to the true underlying probability, and that when the event is rare, we converge to 50-50. In this chapter, the authors highlight several essential concepts in Bayesian statistics. The concept of prior distribution is the information or knowledge we have known already. This prior can be wrong, but that is what we have got without further updates. Unlike prior distribution, the concept of posterior distribution is knowledge gained when new information arrives or something else has occurred. The crux of the prediction boils down to how we could best update and improve our prior and posterior distributions to describe reality. The authors suggest a simple 4-step procedure. First, let our goal be as ambitious as predicting the future, but we ought to accept our prediction to have a wide range. Second, let’s make a preliminary prediction from our prior knowledge. Third, stream the latest information to adjust our prior knowledge if our prediction is inaccurate. Yet, the prior could still be inaccurate even if the prediction is right. Fourth, update the posterior as new information arrives. The hardest part of predicting the future is that there are many factors leading to an outcome. To disentangle these factors, the authors emphasize the key difference between association and causation. Association refers to two variables occur at the same time but one DOES not cause the other to happen. One variable does not come into existence and has nothing to do with the lack of the other variable. On the contrary, causation means one variable causes another variable to either disappear or appear. The relationship means that you must have one before the other. For example, polar bear and ice. A polar bear does not make ice. Ice does not make a polar bear. However, they are associated together because of the ecosystem and habitat. Thus, polar bear and ice is association, not causation. When it comes to distributions, their shape matters. Here the book introduces three typical distributions, namely normal, power-law and Erlang distributions. Power Law Erlang Distribution Normal Distribution The normal distribution is fat at the center at the average and symmetrical on both sides. So, as a rule of thumb, we should always predict the sample average if our prior knowledge tells us whatever we are dealing with comes from a normal distribution. The power-law distribution is long-tailed. So, as a rule of thumb, we should always predict the lower end of the value range for a sample. However, as the sample creeps to the right, our prediction should be scaled multiplicatively. For instance, doubling the box office if a movie keeps staying on the top view counts. As an aside, the frequency of occurrence of English words is described by Zipf’s law, which is similar to the power-law distribution. The shape of Erlang distribution is like the mixing of the normal and power-law distributions. So, as a rule of thumb, we can be safe to play with the median. However, as new information arrives, we could adjust our prediction by scaling it additively. For example, we add another 10 minutes to the wait whenever our bus is late. Chapter 7 Over-fitting is a common problem faced by computer scientists who heavily use mathematically modelling to describe real world processes. In this crucial chapter, the authors try to use polynomials or mathematical constructs to describe and explain how this problem arises and how to solve it. I seek to differ and try to offer a very simplistic way to delineate the basic idea to the public at the risk of the loss of accuracy. I think the quote “Never Attribute to Malice That Which Is Adequately Explained by Stupidity” adequately and eloquently summarizes this key idea behind over-fitting. Let me unravel the quote a little bit deeper. The assumption behind the quote, in my opinion is that stupidity is far more likely and far more common than malice, a state of affair that is good for the world generally. Malice, if done properly, requires dedication, preparation, intelligence, timing, skills and luck. Successful malice is thus far less likely than stupidity which requires none of the above. When in doubt, choose whatever simpler and more common. In contrast, when should we choose malice? One should choose malice when it is too hard to explain with stupidity alone. For instance, if the rationale centers around a complicated combinations of stupidity, carelessness, absentmindedness, forgetfulness, lack of information, Force Majeure. Then, malice is the simpler and more likely option as stupidity at extreme level is indeed quite rare. With this basic idea in mind, we can return to our attention on model construction and development. The authors suggest we should run some tests to validate our prior knowledge about the world and update it as described in earlier chapters. The whole point of this exercise is to bring the knowledge closer to reality. Some negative examples include students who are good at sitting examinations but poor at solving life problems. During their course of study, their prior knowledge has been moulded closer to what is expected of them by examination system and farther away from the real world. In addition to describing this problem of overfitting, the authors make some suggestions on how to detect and contain it. The detection method is called cross-validation. The concept of cross-validation is to test as we learn. First, we split our problems into two parts. One for learning; another for validation. We learn the material only from the learning set and we test our knowledge on the validation set to check how accurate our learning has been. To check means we complete some assignments during both learning and validation and are evaluated against some metrics or scores. If our learning score is higher than validation scores, our learning have overfitted. If our learning score is lower than validation scores, we have cheated. If both scores are similar, we are okay. Last but not least, it is better to spend more time and energy to contemplate causality and less on association, a key concept we have already discussed at length previously. Thus, we should down-weight our experience, keep a keen eye on survivorship bias, and be especially vigilant as we face the ebb and flow. Chapter 8 The key takeaway of Relaxation : let it slide is to abstain from binary thinking. One easy trap we fall into is to think about the world as binary. We might think about what interest we pursuit if we have won a lottery. We might also think about what we do to make a living. However, we seldom manage to find a solution that fits our passion and livelihood. The immediate implication is that often people choose either livelihood or passion. The gap between these two activities at first sight leads most people to fail to optimize for the better. The authors suggest that there is a better way. A compromise. We should make a compromise between our passion and livelihood. In order to find and evaluate a compromise, we must explore and rank various alternatives. The skills required to do so have already been introduced in earlier chapters. Chapter 9 Randomness : when to leave it to chance. The title of this chapter encapsulates its essence. Although the word chance may suggest something outside of our control, the actual meaning in this case is well within our control. When we say chance, we are trying to express our inability to fully comprehend a population. Thus, we resort to sampling as a strategy to gain a faithful estimate of the entire population statistically without explicitly looking at every member of a population. Sampling depends on the underlying distribution at least in theory. However, due to the occurrence of chance and randomness, there is NO guarantee that our collected samples are representative and portray the real distribution; we therefore describe such uncertainty by statistical measures such as standard errors and averages. Apart from our inability to fully comprehend a population, there are other circumstances in which sampling is beneficial or even is the sole option. Sampling can be used in place of analytical thinking when thinking is slow and expansive while sampling is fast and cheap. For instance, it is far easier and cheaper to look up the pay scale of software engineers on a job hunting website than to analyze a company’s financial health, the contribution of software component to its services and products, and individual’s competency and productivity. Prime number and its unique usage in cryptography employs sampling. Prime numbers when multiplied by some special numbers yield number with some characteristics. However, this behaviour is not always true. Thus, the pragmatic solution is to perform a series of multiplication to test the number of its likelihood of being a prime number, during which each step allows for some acceptable false alarm rate. Longer the test series, higher our confidence on weather or not the number is a prime. Outside of mathematics, biology, sociology and many other disciplines rely on sampling heavily. One reason, I suspect, is that it is hard to pinpoint causal relationships in problems concerned by scientists of those disciplines and to conduct controlled experiments. Rather than observing causal relationships, they observe complex interactions and associations. However, sampling is no panacea. Sampling is unsuitable for things that rarely occur. Some infamous examples include Great Depression, 100-year flood, etc. With all that information, we close the section on man versus nature. All the previous chapters try to illustrate what individuals reactions or responses are in light of the insights from computational algorithms. Nature does not second-guess man and does not respond to our actions in anticipation of our actions. The upcoming two chapters explore the thinking of computer scientists on man versus society, in which our actions bring about the reactions of others which in turn bring about our reactions. Chapter 10 The chapter centers on how computers or devices really connected together to form the so-called the Internet. This is particularly interesting because one key concept emerges from the work of the Internet is the development of a protocol. In short, a computer talks to another computer in ways that are radically different from human interactions. A computer uses many-to-many node interactions. The same message can be copied and distributed on the network simultaneously. The message is chopped up into smaller packages and are sent out to the network. Since there are so many computers working in the network, the arrival or departure of packages appear to be random and unpredictable. With that in mind, our solution must entail the following attributes in order to cope with the demand characteristics of the internet. First, the network has to be robust and reliable. Obviously, it needs to serve billions of users daily. Second, the network has to be able to handle randomness, a circumstance that is very tricky for a scheduler (please refer back to the scheduling chapter for a more in-depth discussion). Third, the network has to be distributed, not centralized. If we want to circumvent the need for the creation of a centralized party that uses a top-down approach to mange the entire network, we must establish a bottom-up approach in which everyone obeys some agreed-upon protocol. If we want to increase the robustness and reliability of the network, we must recognize that there will always be mistakes when we pass along package of messages, and we must tolerate some errors. Thus, the solution enforces that the same messages are to be duplicated, split up into many smaller pieces, and sent to the destination via many different routes simultaneously. Often the shortest route may not be the fastest due to traffic congestion at the network nodes along the path. From one node to the next, we check the next node has actually gotten the message by asking for a confirmation message. When this confirmation is performed every time, the traffic volume easily doubles as a result. Yet, this confirmation ensures us if a packet is lost, we know about the loss and can resend the missing package. Today, TCP is the protocol that underpins the entire Internet as we know it. One rule I find most interesting is the rule on backing off. The rule has two parts. When the rate of sending and receiving confirmation is fast, the rule says we should gradually ramp up the rate of sending incrementally. When the rate of sending and receiving confirmation is slow and coming to a halt, we should then back off rapidly. It is asymmetrical. For instance, when our browser fails to fetch a website, we first retry after 2 minutes, then 4, 8 and so on. The retry wait duration grows multiplicatively longer. Thus, it is interesting that the saw-toothed shape of traffic flow is indeed the most optimal on average for everyone as a whole. Here, we can relate to the concept of delays and throughput from earlier chapters. The node of the network and us (users) face the dilemma of delays and throughput just like a resource scheduler. A node is just like a computer with limited resources. Lower delay means the node puts priority on incoming signals whenever they arrive by switching to them. However, as we have seen earlier about switching cost and protocol, these signals can often be randomly distributed and in small pieces. Processing them as they come by increases switching cost but reduces delay at the expense of lower throughput. Thus, one design feature of nodes is a buffer or queue. A queue allows us to put tasks on hold until earlier tasks are completed. This helps keep switching cost low and throughput high. One draw-down is that when the queue grows too long, the delay becomes too noticeable for users. Another point worth mentioning is the importance of each message. As in resource scheduling, we need to give a score of priority for each task. As the traffic slows with growing number of users on the Internet, it is imperative to prioritizes the most important messages. One feasible solution is to kick out messages once the queue grows too long. In doing so, users would have to resend the same message again when it fails earlier. Yet, this very act of resending broadcasts to the network that this is important. Also, kicking messages out automatically keeps delays low and traffic less congested. So long as we can ensure the message is resent by the user who really wants to do that, instead of by some automatic software. ##Chapter 11 Game theory : the minds of others is an introductory chapter on game theory and not much on algorithms. It briefly sheds lights on how game theory works but leaves out algorithms. For those who are interested in learning more about algorithmic game theory, the interface of theoretical computer science and game theory, would have been sorely disappointed. I did a quick search on algorithmic game theory; what I quickly realize is that algorithmic game theory is a complex subject, despite of its young age. Someone even wrote an entire book called [Algorithmic Game Theory] (https://doi.org/10.1017/CBO9780511800481). The first dilemma is the prisoner’s dilemma, a classic problem in game theory. The crux of the dilemma is how to act when you cannot be sure of what the other person may do in response to your action. And their reaction inevitable impacts on your gain or loss. This invites recursive guesses. Both parties guess the mind of another and act according to what they believe to be in the best interests for themselves. Hence, we strive to maximize our gain and minimize adverse consequences of other’s actions. Mind games are tiresome. Is there a situation in which we no longer need to care about what the other person may act? Is there a situation in which everyone is acting most optimally and remains so permanently? Theoretically, this situation is known as Nash equilibrium. One example is a stalemate in chess. Neither player can win nor lose. From this, we can see that Nash equilibrium only means the player’s actions remain constant, but it does not mean that players are better off or worse off. One caveat of Nash equilibrium is that we have no way of knowing how to guarantee players can reach there. Prisoner’s dilemma is two people game. Prisoner A and B. They are identical in all imaginable aspects, including what they can do. They can either confess or remain in silence. With two options, we have four outcomes, each with a different payoff for the prisoners. If both confess, both serve 5 years in prison. If either one confesses and the other remains silent, the one who confess is set free and the one who remains silent serve 20 years. If both remain silent, they serve only 1 year in prison. From the point of the prisoners, it appears that they would like to serve only 1 year in prison and therefore say nothing. However, not knowing whether or not the other prisoner would confess, the prisoner’s best move is always to confess. Thus, the outcome is that both serve 5 years in prison. Thus, we can use this insight to explain why ethics and brotherhood is highly regraded as this introduces a penalty to confessors. Another problem is the tragedy of the common. The most intriguing observation is that when everyone does the same action, the advantage it brings over others disappears. Some classic examples are warfare and price war. Any effort spends on improving its competitive advantage is cancelled out on net. The US labor market provides an interesting real life illustration of the tragedy of the common. American workers are entitled to annual leaves. On average, workers take 50% of their annual leaves. 15% of them takes no leaves. The motivation at first seems contradictory. Why workers would not want to take as many days off as possible given that the law enables them to do so? One possible explanation provided by game theory is that when a worker takes more days off than his colleagues, he appears to be a lazy, unmotivated, and unambiguous fellow, inflicting damages on his image in the eye of his superior and his chance of a promotion. Thus, the outcome is that he would like to take one day fewer than his colleague. The chapter ends with a very brief discussion of the various types of auctions. However, auctions are far more complicated and deserve many more lengthy paragraphs, so we shall leave the chapter with my final remark: if you are unsuited for the game you are playing, then quit and don’t play that game. In other words, if you are the mouse in a cat and mouse game, don’t play that game. Conclusion In this concluding chapter, the authors point out the ubiquitous fact that a programmer like myself can easily identified with: thinking in algorithmic terms is no easy task. The task is laborious, tiresome and enervating. The authors believe it is compassionate to let people think less, not more. How, perhaps one can seek help from artificial intelligence. P. S. For those who would like to explore this topic more, here is my recommendation. Written by Daniel Kahneman, a co-recipient of the Nobel Prize for Economics in 2002 , Thinking fast and slow is a book about how we think, process information and decide.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/algorithms_to_live_by/prisoner_Dilemma.png" /><media:content medium="image" url="/assets/images/algorithms_to_live_by/prisoner_Dilemma.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Streaming Scipy optimization steps</title><link href="/deep_learning/2023/01/27/StreamScipyOptimization/" rel="alternate" type="text/html" title="Streaming Scipy optimization steps" /><published>2023-01-27T00:00:00+08:00</published><updated>2023-01-27T00:00:00+08:00</updated><id>/deep_learning/2023/01/27/StreamScipyOptimization</id><content type="html" xml:base="/deep_learning/2023/01/27/StreamScipyOptimization/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This three-part series aims to teach readers how to create a web application that configures, solves, and displays the minimization of &lt;a href=&quot;https://en.wikipedia.org/wiki/Rosenbrock_function&quot;&gt;Rosenbrock function&lt;/a&gt; by Differential Evolution algorithm and L-BFGS algorithm. Such application is very useful for anyone who wishes to monitor the step-by-step progress of the minimization. A gradual fall in the energy or function value is a good sign and the opposite is a bad sign. Early signs help to suggest how appropriate the initial guesses or bounds might be. For instance, overly tight bounds or far off guesses usually makes the optimizer oscillate or stagnate at sub-optimal solutions. 
This is especially paramount for image registration because its objective function (numerical similarity metric) may only correlate partially to how human discern visual similarity.&lt;/p&gt;

&lt;p&gt;In Part I, I describe how to modify the existing Scipy functions (namely Differential Evolution algorithm and L-BFGS algorithm) so that we can obtain the step-by-step or intermediate solutions. I also explain why the built-in callback option is not viable for us when the code runs on the server.&lt;/p&gt;

&lt;p&gt;In Part II, I describe how to create a web page that represents our graphical user interface that interacts with the server in Part III. While differential evolution algorithm requires no gradient approximation, L-BFGS estimates first order function derivatives (which are then linearly combined to approximate its second order derivatives). The web page layout must therefore adapt to the outputs of the algorithms, and its content must be updated dynamically via streaming. To achieve this, I describe how I make use of Template.&lt;/p&gt;

&lt;p&gt;In Part III, I describe how to use Flask (micro-framework) to make a very basic server that parses user’s request, calls the correct Scipy routines to minimize Rosenbrock function, and renders a complete set of solutions in HTML.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Python 3.10&lt;/li&gt;
  &lt;li&gt;Flask 2.2.2&lt;/li&gt;
  &lt;li&gt;Scipy 1.9.3&lt;/li&gt;
  &lt;li&gt;Numpy 1.23.5&lt;/li&gt;
  &lt;li&gt;Windows 10&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;part-i---scipy-optimization-functions&quot;&gt;Part I - Scipy Optimization Functions&lt;/h2&gt;

&lt;p&gt;We can conveniently locate many commonly used optimization algorithms (wrapped in Python) in Scipy library. Amongst them, I have modified &lt;a href=&quot;https://en.wikipedia.org/wiki/Differential_evolution&quot;&gt;&lt;strong&gt;differential evolution algorithm&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Broyden%E2%80%93Fletcher%E2%80%93Goldfarb%E2%80%93Shanno_algorithm&quot;&gt;&lt;strong&gt;L-BFGS algorithm&lt;/strong&gt;&lt;/a&gt;. Since differential evolution algorithm does not require the estimation of objective function gradients, we can try it out on problems that do not offer a quick calculation of gradients. However, the gradient often indicates the direction in which a better solution may reside. L-BFGS takes the gradient into account when updating the current estimate of a solution.&lt;/p&gt;

&lt;p&gt;I let &lt;a href=&quot;https://en.wikipedia.org/wiki/Rosenbrock_function&quot;&gt;Rosenbrock function&lt;/a&gt;, which is commonly featured in toy examples, be the objective function.
Coefficient a and coefficient b determine the shape of the valley of the function.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rosenbrock_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    x is a 1-D vector (N,)
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The differential evolution solver in Scipy package is the full implementation of the differential evolution algorithm. What I need to modify is to make it suitable for streaming on the server. So I create a class called ModifiedEvolution that inherits DifferentialEvolutionSolver.&lt;/p&gt;

&lt;p&gt;On a Flask server, streaming is implemented as a generator object. As the generator yields its information that arrives piece-by-piece, the piece is sent to client directly (in a form of a Flask response object).&lt;/p&gt;

&lt;p&gt;With that methodology in mind, ModifiedEvolution has three sequential methods, namely initialize_population, evolving, and polishing.
The initialize_population creates a population of possible solution at the beginning. The evolving is a generator that streams or yields all intermediate steps of a solution. The polishing polishes the solution found by differential evolution by L-BFGS algorithm and gives us back a typical Scipy optimization result object.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# https://github.com/scipy/scipy/blob/v1.10.0/scipy/optimize/_differentialevolution.py#L22-L399
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModifiedEvolution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DifferentialEvolutionSolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;best1bin&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;popsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;mutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recombination&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;latinhypercube&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updating&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;immediate&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constraints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;integrality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectorized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;popsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;mutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;recombination&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recombination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;disp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;updating&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;constraints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;integrality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integrality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;vectorized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# placeholder
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; 
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_nit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize_population&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_status_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;success&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# The population may have just been initialized (all entries are
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# np.inf). If it has you have to calculate the initial energies.
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Although this is also done in the evolve generator it&apos;s possible
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# that someone can set maxiter=0, at which point we still want the
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# initial energies to be calculated (the following loop isn&apos;t run).
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isinf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;population_energies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feasible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraint_violation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_calculate_population_feasibilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;population&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# only work out population energies for feasible solutions
&lt;/span&gt;            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;population_energies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feasible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_calculate_population_energies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;population&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feasible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_promote_lowest_energy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;evolving&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# do the optimization.
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# evolve the population by a generation
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# I am a generator!
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;StopIteration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_nfev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxfun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_status_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;maxfev&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_nfev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxfun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Maximum number of function evaluations&apos;&lt;/span&gt;
                                      &lt;span class=&quot;s&quot;&gt;&apos; has been reached.&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;differential_evolution step &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nit&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: f(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)= &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;population_energies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convergence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_MACHEPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convergence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;callback function requested stop early&apos;&lt;/span&gt;
                                      &lt;span class=&quot;s&quot;&gt;&apos; by returning True&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# should the solver terminate?
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning_flag&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;converged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;population_energies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# slow down for visualization
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# time.sleep(1)
&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_status_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;maxiter&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_nit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nit&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;reaching the end.................&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;package_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptimizeResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;population_energies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;nfev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_nfev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;nit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_nit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning_flag&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform_polishing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polish&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integrality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polishing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;
        

    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;polishing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polish_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;L-BFGS-B&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# can&apos;t polish if all the parameters are integers
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integrality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# set the lower/upper bounds equal so that any integrality
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# constraints work.
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integrality&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integrality&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integrality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integrality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integrality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integrality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_wrapped_constraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;polish_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;trust-constr&apos;&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;constr_violation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_constraint_violation_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constr_violation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;differential evolution didn&apos;t find a&quot;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&quot; solution satisfying the constraints,&quot;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&quot; attempting to polish from the least&quot;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&quot; infeasible solution&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;UserWarning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Polishing solution with &apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polish_method&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polish_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;constraints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_nfev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfev&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_nfev&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Polishing solution is only accepted if there is an improvement in
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# cost function, the polishing was successful and the solution lies
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# within the bounds.
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jac&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# to keep internal state consistent
&lt;/span&gt;            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;population_energies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;population&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_unscale_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_wrapped_constraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;violation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_wrapped_constraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constr_violation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concatenate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxcv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constr_violation&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxcv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# if the result is infeasible then success must be False
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The solution does not satisfy the &quot;&lt;/span&gt;
                                        &lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;constraints, MAXCV = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxcv&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DE_result&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although Scipy implementation provides a callback option, I could not turn it into a generator-like object. If that were achievable, much less coding would be required.&lt;/p&gt;

&lt;p&gt;ModifiedLBFGSB has three sequential methods, namely initialization, solving, and package_result. 
The initialization prepares variables in a way that are compatible with the Fortran L-FBGS code. The solving represents a generator-like object. The package_result gives the optimization result as in a typical Scipy optimization algorithm.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# from https://github.com/scipy/scipy/blob/dde50595862a4f9cede24b5d1c86935c30f1f88a/scipy/optimize/_lbfgsb_py.py#L386
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModifiedLBFGSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;disp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxcor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ftol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.2204460492503131e-09&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;gtol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1e-5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1e-8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxfun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;iprint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;finite_diff_rel_step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unknown_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;


        
        &lt;span class=&quot;n&quot;&gt;_check_unknown_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unknown_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxcor&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgtol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gtol&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ftol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eps&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxfun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxfun&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ravel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;length of x0 != length of bounds&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# unbounded variables must use None, not +-inf, for optimizer to work properly
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# LBFGSB is sent &apos;old-style&apos; bounds, &apos;new-style&apos; bounds are required by
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# approx_derivative and ScalarFunction
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;new_bounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_bound_to_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# check bounds
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LBFGSB - one of the lower bounds is greater than an upper bound.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# initial vector must lie within the bounds. Otherwise ScalarFunction and
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# approx_derivative will cause problems
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iprint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_prepare_scalar_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;finite_diff_rel_step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finite_diff_rel_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_and_grad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun_and_grad&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;fortran_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_lbfgsb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fortran_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low_bnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper_bnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low_bnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper_bnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;maxls must be positive.&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxls&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iwa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fortran_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;S60&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csave&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;S60&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lsave&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fortran_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isave&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fortran_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsave&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;START&apos;&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_iterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solving&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# x, f, g, wa, iwa, task, csave, lsave, isave, dsave = \
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;_lbfgsb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setulb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low_bnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper_bnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgtol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iwa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lsave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;task_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tobytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;FG&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# The minimization routine wants f and g at the current x.
&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# Note that interruptions due to maxfun are postponed
&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# until the completion of the current minimization iteration.
&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# Overwrite f and g:
&lt;/span&gt;                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_and_grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;NEW_X&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                
                &lt;span class=&quot;c1&quot;&gt;# new iteration
&lt;/span&gt;                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_iterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_iterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;STOP: TOTAL NO. of ITERATIONS REACHED LIMIT&apos;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxfun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;STOP: TOTAL NO. of f AND g EVALUATIONS &apos;&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&apos;EXCEEDS LIMIT&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# this step calculates the solution at the end of an iteration
&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# thus, we cannot see the steps taken to evaluate numerical gradient at f&apos;(x)
&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# yield (self.n_iterations, self.x, self.sf.nfev,self.f,self.g)
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# print (&apos;self.n_iterations {}, self.x {}, self.sf.nfev {}, f {}, g {}&apos;.format(
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;#     self.n_iterations,
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;#     self.x,
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;#     self.sf.nfev,
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;#         self.f,
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;#         self.g))
&lt;/span&gt;            


    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;package_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;task_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tobytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;CONV&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;warnflag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxfun&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_iterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;warnflag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;warnflag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# These two portions of the workspace are described in the mainlb
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# subroutine in lbfgsb.f. See line 363.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# See lbfgsb.f line 160 for this portion of the workspace.
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# isave(31) = the total number of BFGS updates prior the current iteration;
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;n_bfgs_updates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;n_corrs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_bfgs_updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hess_inv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LbfgsInvHessProduct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_corrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_corrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;task_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptimizeResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nfev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;njev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;nit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warnflag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warnflag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hess_inv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hess_inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As an aside, I design these solver objects with compatibility in mind. Thus, they take in the same set of parameters and output the same OptimizeResult object as the original Scipy implementation.&lt;/p&gt;

&lt;h2 id=&quot;part-ii---graphical-user-interface--web-page&quot;&gt;Part II - Graphical User Interface / Web page&lt;/h2&gt;

&lt;p&gt;To understand the graphical user interface of the web application, let’s start by taking a closer look at the final web page.&lt;/p&gt;

&lt;div class=&quot;juxtapose&quot;&gt;
    &lt;img src=&quot;/assets/images/streamingScipyOptimization/differentialEvolution1.png&quot; /&gt;
    &lt;img src=&quot;/assets/images/streamingScipyOptimization/lbfgs1.png&quot; /&gt;
&lt;/div&gt;
&lt;script src=&quot;https://cdn.knightlab.com/libs/juxtapose/latest/js/juxtapose.min.js&quot;&gt;&lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.knightlab.com/libs/juxtapose/latest/css/juxtapose.css&quot; /&gt;

&lt;p&gt;The upper half contains the configuration of the Rosenbrock function, solution space, and the optimization algorithms. (the Rosenbrock function coefficients, choice of the optimization algorithm, the upper and lower bounds of the search space, initial guesses of solution (x), and the maximum number of iterations) The lower half contains a table of the sequential steps of a chosen optimizer.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://getbootstrap.com&quot;&gt;Bootstrap&lt;/a&gt; provides this basic design of the web page; &lt;a href=&quot;https://github.com/NUKnightLab/juxtapose&quot;&gt;Juxtapose&lt;/a&gt; allows users to visually compare the intermediate solutions of each algorithm. Pushing the central slider left or right reveals the screen-shot of the web page for differential evolution outputs and L-BFGS outputs respectively.&lt;/p&gt;

&lt;p&gt;Even though the screen-shots are static, in reality, during streaming, the HTML of the web page is updated dynamically by the server responses. An easy way to achieve this is to manipulate HTML by &lt;a href=&quot;https://flask.palletsprojects.com/en/2.2.x/quickstart/&quot;&gt;Flask&lt;/a&gt;, which provides APIs that leverage &lt;a href=&quot;https://palletsprojects.com/p/jinja/&quot;&gt;Jinja2 engine&lt;/a&gt; that generate new HTML from HTML templates.&lt;/p&gt;

&lt;p&gt;I have made heavy use of variables, if statements, for loops and filters in Jinja2. The form input variable values are set by Python string variables. Practically speaking, the default input values are python string that are hard coded on the server.&lt;/p&gt;

&lt;p&gt;I need to take extra care when it comes to the result table headers. Unlike differential evolution algorithm, L-BFGS calculates the gradient of the objective function. Jinja2 length filter tells me how many items are sent back. I then know what names should go in the header!&lt;/p&gt;

&lt;p&gt;Outer for loop creates HTML code snippets that renders the row of the intermediate result table; the inner for loop creates table data code snippet which populates the table row with values that are being streamed from server. The namespace variable allows me to turn off header after the first row.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Scipy optimization demo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;integrity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello, world of Scipy optimization!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Minimizing Rosenbrock Function &lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;integrity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/solver&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;table&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt; Function parameters&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt; Values&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;a&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{a}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
		
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;b&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{b}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
		
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt; Solution Bound&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt; Values&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;lower&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lower&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lower&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{lower}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
		
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;upper&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;upper&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;upper&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{upper}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
		
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;x (initial guess)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;initialGuess&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;initialGuess&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{initialGuess}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
		
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt; Solver Configuration&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt; Values&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;max iterations&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;maxiter&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;maxiter&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{maxiter}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
		

		
		
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;methods&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;methods&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;methods&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LBFGS&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;LBFGS&lt;span class=&quot;nt&quot;&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Differential Evolution&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Differential Evolution&lt;span class=&quot;nt&quot;&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
			
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nav-link&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ url_for(&apos;hello_world&apos;) }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Clear results and return to Home page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;

		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
	
	&lt;span class=&quot;c&quot;&gt;&amp;lt;!--
	namespace ensures the variable is available outside of this scope (including the for loop) !
	---&amp;gt;&lt;/span&gt;
	
	{% set display = namespace(header=true) %}
	
	{% for (result, timeElapsed) in results %}
		{% if display.header %}
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;table&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
			{% if result | length == 3 %}
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt; Iteration&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt; x &lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt; f(x) &lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt; time elapsed (s) &lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
			
			{% elif result | length == 5 %}
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt; Iteration&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt; x &lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt; number of f(x) evaluations&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt; f(x) &lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt; f&apos;(x) &lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt; time elapsed (s) &lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
			{% endif %}
			
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
			{% set display.header = false %}
		
		{% endif %}
		

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
		{% for item in result %}
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt; {{item}} &lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
		{% endfor %}
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt; {{timeElapsed}} &lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
	
	{% endfor %}
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;part-iii---flask-server&quot;&gt;Part III - Flask Server&lt;/h2&gt;

&lt;p&gt;Flask is my first choice for setting up a web server (WSGI - web server gateway interface application) because its documentation is quite comprehensive and its APIs are quite readable. The reason is seven-fold.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Flask manages the endpoints using a decorator&lt;/li&gt;
  &lt;li&gt;Flask handles request via a request object and response via a response object for you&lt;/li&gt;
  &lt;li&gt;Flask renders HTML template automatically&lt;/li&gt;
  &lt;li&gt;Flask isolates the current application scope and lets programmers create variables or default values inside it&lt;/li&gt;
  &lt;li&gt;String variables are easily passed around&lt;/li&gt;
  &lt;li&gt;Flask has default settings, a feature that simplifies the code (i.e. all HTML templates are placed under templates folder, a location where Flask goes to and looks up templates files automatically)&lt;/li&gt;
  &lt;li&gt;By running &lt;em&gt;flask run –reload –debugger&lt;/em&gt; in the command prompt, reload means Flask detects file change and reloads the latest version; debugger shows an error traceback on the HTML page&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To show you what the project structure is like, I draw a tree using windows &lt;em&gt;tree /f&lt;/em&gt; command. This organization helps reduce the risk of circular importing.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:.
│   run_app.py
│
├───api
│   │   routes.py
│   │   scipyOptimizer.py
│   │   __init__.py
│   │
│   ├───templates
│   │       callback.html
│   │
│   └───__pycache__
│           routes.cpython-310.pyc
│           scipyOptimizer.cpython-310.pyc
│           __init__.cpython-310.pyc
│
└───__pycache__
        run_app.cpython-310.pyc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The server starts when Flask runs run_app.py. I often set Flask environment variable before calling flask run for the sake of convenience. (use Set FLASK_APP=run_app.py on windows)&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The api module initializes the application as shown below:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    Default optimization setting
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;100.0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initialGuess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.5,0.5&quot;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that we must initialize all routes. Or else we cannot find our endpoints.&lt;/p&gt;

&lt;p&gt;The routes are listed below:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.scipyOptimizer&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModifiedEvolution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rosenbrock_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModifiedLBFGSB&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partial&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extract_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# we cannot get json as we did not submit json &amp;gt;_&amp;lt;
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# variable_name = request.get_json()
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;lower&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;upper&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;maxiter&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;initialGuess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;initialGuess&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;initialGuess &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialGuess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;initialGuess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialGuess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;,&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# values in request objects are string
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rosenbrock_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;bounds &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialGuess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;
    

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;callback.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;initialGuess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initialGuess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/solver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;POST&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;methods&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;methods = &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Differential Evolution&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callEvolution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LBFGS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call_LBFGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;RuntimeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;unknown methods&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/evolve&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callEvolution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
     
    &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialGuess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extract_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# start a timer to see how long it takes to solve the problem
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
        Create a generator that produces the intermediate results of the optimizer
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# using a context manager means that any created Pool objects are
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# cleared up.
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# don&apos;t pass args because they try to enter the f(x) as arguments
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModifiedEvolution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;n&quot;&gt;polish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initialize_population&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intermediate_results&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evolving&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intermediate_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perform_polishing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;final&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;callback.html&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;initialGuess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;,&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialGuess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                    &lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/lbfgs&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;POST&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call_LBFGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialGuess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extract_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# start a timer to see how long it takes to solve the problem
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModifiedLBFGSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialGuess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
        Create a generator that produces the intermediate results of the optimizer
        &quot;&quot;&quot;&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intermediate_results&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solving&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intermediate_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;final&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;callback.html&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;initialGuess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;,&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialGuess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                    &lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I always extract user’s form to obtain the most up-to-date configurations. When Flask renders the HTML page, I pass the configurations along so that the user configurations are persistent (without being overwritten by default optimization setting) on the HTML page. It is worth noting that stream_with_context can also be used here if the request object ought to be retained during streaming.&lt;/p&gt;</content><author><name>Wilson Fok</name></author><category term="Deep_Learning" /><summary type="html">Introduction This three-part series aims to teach readers how to create a web application that configures, solves, and displays the minimization of Rosenbrock function by Differential Evolution algorithm and L-BFGS algorithm. Such application is very useful for anyone who wishes to monitor the step-by-step progress of the minimization. A gradual fall in the energy or function value is a good sign and the opposite is a bad sign. Early signs help to suggest how appropriate the initial guesses or bounds might be. For instance, overly tight bounds or far off guesses usually makes the optimizer oscillate or stagnate at sub-optimal solutions. This is especially paramount for image registration because its objective function (numerical similarity metric) may only correlate partially to how human discern visual similarity. In Part I, I describe how to modify the existing Scipy functions (namely Differential Evolution algorithm and L-BFGS algorithm) so that we can obtain the step-by-step or intermediate solutions. I also explain why the built-in callback option is not viable for us when the code runs on the server. In Part II, I describe how to create a web page that represents our graphical user interface that interacts with the server in Part III. While differential evolution algorithm requires no gradient approximation, L-BFGS estimates first order function derivatives (which are then linearly combined to approximate its second order derivatives). The web page layout must therefore adapt to the outputs of the algorithms, and its content must be updated dynamically via streaming. To achieve this, I describe how I make use of Template. In Part III, I describe how to use Flask (micro-framework) to make a very basic server that parses user’s request, calls the correct Scipy routines to minimize Rosenbrock function, and renders a complete set of solutions in HTML. Prerequisites Python 3.10 Flask 2.2.2 Scipy 1.9.3 Numpy 1.23.5 Windows 10 Part I - Scipy Optimization Functions We can conveniently locate many commonly used optimization algorithms (wrapped in Python) in Scipy library. Amongst them, I have modified differential evolution algorithm and L-BFGS algorithm. Since differential evolution algorithm does not require the estimation of objective function gradients, we can try it out on problems that do not offer a quick calculation of gradients. However, the gradient often indicates the direction in which a better solution may reside. L-BFGS takes the gradient into account when updating the current estimate of a solution. I let Rosenbrock function, which is commonly featured in toy examples, be the objective function. Coefficient a and coefficient b determine the shape of the valley of the function. def rosenbrock_func(a,b,x): &quot;&quot;&quot; x is a 1-D vector (N,) &quot;&quot;&quot; return (a-x[0])**2.0 + b*((x[1]-x[0]**2.0)**2.0) The differential evolution solver in Scipy package is the full implementation of the differential evolution algorithm. What I need to modify is to make it suitable for streaming on the server. So I create a class called ModifiedEvolution that inherits DifferentialEvolutionSolver. On a Flask server, streaming is implemented as a generator object. As the generator yields its information that arrives piece-by-piece, the piece is sent to client directly (in a form of a Flask response object). With that methodology in mind, ModifiedEvolution has three sequential methods, namely initialize_population, evolving, and polishing. The initialize_population creates a population of possible solution at the beginning. The evolving is a generator that streams or yields all intermediate steps of a solution. The polishing polishes the solution found by differential evolution by L-BFGS algorithm and gives us back a typical Scipy optimization result object. # https://github.com/scipy/scipy/blob/v1.10.0/scipy/optimize/_differentialevolution.py#L22-L399 class ModifiedEvolution(DifferentialEvolutionSolver): def __init__(self, func, bounds, args=(), strategy=&apos;best1bin&apos;, maxiter=1000, popsize=15, tol=0.01, mutation=(0.5, 1), recombination=0.7, seed=None, callback=None, disp=False, polish=True, init=&apos;latinhypercube&apos;, atol=0, updating=&apos;immediate&apos;, workers=1, constraints=(), x0=None, *, integrality=None, vectorized=False): super().__init__(func, bounds, args=args, strategy=strategy, maxiter=maxiter, popsize=popsize, tol=tol, mutation=mutation, recombination=recombination, seed=seed, polish=polish, callback=callback, disp=disp, init=init, atol=atol, updating=updating, workers=workers, constraints=constraints, x0=x0, integrality=integrality, vectorized=vectorized) # placeholder self.warning_flag = False self.status_message = None self.last_nit = None def initialize_population(self): self.status_message = _status_message[&apos;success&apos;] # The population may have just been initialized (all entries are # np.inf). If it has you have to calculate the initial energies. # Although this is also done in the evolve generator it&apos;s possible # that someone can set maxiter=0, at which point we still want the # initial energies to be calculated (the following loop isn&apos;t run). if np.all(np.isinf(self.population_energies)): self.feasible, self.constraint_violation = ( self._calculate_population_feasibilities(self.population)) # only work out population energies for feasible solutions self.population_energies[self.feasible] = ( self._calculate_population_energies( self.population[self.feasible])) self._promote_lowest_energy() def evolving(self): # do the optimization. for nit in range(1, self.maxiter + 1): # evolve the population by a generation try: next(self) # I am a generator! except StopIteration: self.warning_flag = True if self._nfev &amp;gt; self.maxfun: self.status_message = _status_message[&apos;maxfev&apos;] elif self._nfev == self.maxfun: self.status_message = (&apos;Maximum number of function evaluations&apos; &apos; has been reached.&apos;) break if self.disp: print(f&quot;differential_evolution step {nit}: f({self.x})= {self.population_energies[0]}&quot;) if self.callback: c = self.tol / (self.convergence + _MACHEPS) self.warning_flag = bool(self.callback(self.x, convergence=c)) if self.warning_flag: self.status_message = (&apos;callback function requested stop early&apos; &apos; by returning True&apos;) # should the solver terminate? if self.warning_flag or self.converged(): break yield (nit, self.x, self.population_energies[0]) # slow down for visualization # time.sleep(1) else: self.status_message = _status_message[&apos;maxiter&apos;] self.warning_flag = True self.last_nit = nit print (&apos;reaching the end.................&apos;) def package_results(self): DE_result = OptimizeResult( x=self.x, fun=self.population_energies[0], nfev=self._nfev, nit=self.last_nit, message=self.status_message, success=(self.warning_flag is not True)) return DE_result def perform_polishing(self): DE_result = self.package_results() if self.polish and not np.all(self.integrality): DE_result = self.polishing(DE_result) return DE_result def polishing(self, DE_result, polish_method = &apos;L-BFGS-B&apos;): # can&apos;t polish if all the parameters are integers if np.any(self.integrality): # set the lower/upper bounds equal so that any integrality # constraints work. limits, integrality = self.limits, self.integrality limits[0, integrality] = DE_result.x[integrality] limits[1, integrality] = DE_result.x[integrality] if self._wrapped_constraints: polish_method = &apos;trust-constr&apos; constr_violation = self._constraint_violation_fn(DE_result.x) if np.any(constr_violation &amp;gt; 0.): warnings.warn(&quot;differential evolution didn&apos;t find a&quot; &quot; solution satisfying the constraints,&quot; &quot; attempting to polish from the least&quot; &quot; infeasible solution&quot;, UserWarning) if self.disp: print(f&quot;Polishing solution with &apos;{polish_method}&apos;&quot;) result = minimize(self.func, np.copy(DE_result.x), method=polish_method, bounds=self.limits.T, constraints=self.constraints) self._nfev += result.nfev DE_result.nfev = self._nfev # Polishing solution is only accepted if there is an improvement in # cost function, the polishing was successful and the solution lies # within the bounds. if (result.fun &amp;lt; DE_result.fun and result.success and np.all(result.x &amp;lt;= self.limits[1]) and np.all(self.limits[0] &amp;lt;= result.x)): DE_result.fun = result.fun DE_result.x = result.x DE_result.jac = result.jac # to keep internal state consistent self.population_energies[0] = result.fun self.population[0] = self._unscale_parameters(result.x) if self._wrapped_constraints: DE_result.constr = [c.violation(DE_result.x) for c in self._wrapped_constraints] DE_result.constr_violation = np.max( np.concatenate(DE_result.constr)) DE_result.maxcv = DE_result.constr_violation if DE_result.maxcv &amp;gt; 0: # if the result is infeasible then success must be False DE_result.success = False DE_result.message = (&quot;The solution does not satisfy the &quot; f&quot;constraints, MAXCV = {DE_result.maxcv}&quot;) return DE_result Although Scipy implementation provides a callback option, I could not turn it into a generator-like object. If that were achievable, much less coding would be required. ModifiedLBFGSB has three sequential methods, namely initialization, solving, and package_result. The initialization prepares variables in a way that are compatible with the Fortran L-FBGS code. The solving represents a generator-like object. The package_result gives the optimization result as in a typical Scipy optimization algorithm. # from https://github.com/scipy/scipy/blob/dde50595862a4f9cede24b5d1c86935c30f1f88a/scipy/optimize/_lbfgsb_py.py#L386 class ModifiedLBFGSB: def __init__(self, fun, x0, args=(), jac=None, bounds=None, disp=None, maxcor=10, ftol=2.2204460492503131e-09, gtol=1e-5, eps=1e-8, maxfun=15000, maxiter=15000, iprint=-1, callback=None, maxls=20, finite_diff_rel_step=None, **unknown_options): _check_unknown_options(unknown_options) self.m = maxcor self.pgtol = gtol self.factr = ftol / np.finfo(float).eps self.callback = callback self.maxfun = maxfun self.maxiter = maxiter x0 = asarray(x0).ravel() self.n, = x0.shape if bounds is None: bounds = [(None, None)] * self.n if len(bounds) != self.n: print (bounds, self.n, x0) raise ValueError(&apos;length of x0 != length of bounds&apos;) # unbounded variables must use None, not +-inf, for optimizer to work properly bounds = [(None if l == -np.inf else l, None if u == np.inf else u) for l, u in bounds] # LBFGSB is sent &apos;old-style&apos; bounds, &apos;new-style&apos; bounds are required by # approx_derivative and ScalarFunction new_bounds = old_bound_to_new(bounds) # check bounds if (new_bounds[0] &amp;gt; new_bounds[1]).any(): raise ValueError(&quot;LBFGSB - one of the lower bounds is greater than an upper bound.&quot;) # initial vector must lie within the bounds. Otherwise ScalarFunction and # approx_derivative will cause problems x0 = np.clip(x0, new_bounds[0], new_bounds[1]) self.iprint = True sf = _prepare_scalar_function(fun, x0, jac=jac, args=args, epsilon=eps, bounds=new_bounds, finite_diff_rel_step=finite_diff_rel_step) self.func_and_grad = sf.fun_and_grad self.sf = sf fortran_int = _lbfgsb.types.intvar.dtype self.nbd = zeros(self.n, fortran_int) self.low_bnd = zeros(self.n, float64) self.upper_bnd = zeros(self.n, float64) self.bounds_map = {(None, None): 0, (1, None): 1, (1, 1): 2, (None, 1): 3} for i in range(0, self.n): l, u = bounds[i] if l is not None: self.low_bnd[i] = l l = 1 if u is not None: self.upper_bnd[i] = u u = 1 self.nbd[i] = self.bounds_map[l, u] if not maxls &amp;gt; 0: raise ValueError(&apos;maxls must be positive.&apos;) else: self.maxls = maxls self.x = array(x0, float64) self.f = array(0.0, float64) self.g = zeros((self.n,), float64) self.wa = zeros(2*self.m*self.n + 5*self.n + 11*self.m*self.m + 8*self.m, float64) self.iwa = zeros(3*self.n, fortran_int) self.task = zeros(1, &apos;S60&apos;) self.csave = zeros(1, &apos;S60&apos;) self.lsave = zeros(4, fortran_int) self.isave = zeros(44, fortran_int) self.dsave = zeros(29, float64) self.task[:] = &apos;START&apos; self.n_iterations = 0 def solving(self): while 1: # x, f, g, wa, iwa, task, csave, lsave, isave, dsave = \ _lbfgsb.setulb(self.m, self.x, self.low_bnd, self.upper_bnd, self.nbd, self.f, self.g, self.factr, self.pgtol, self.wa, self.iwa, self.task, self.iprint, self.csave, self.lsave, self.isave, self.dsave, self.maxls) task_str = self.task.tobytes() if task_str.startswith(b&apos;FG&apos;): # The minimization routine wants f and g at the current x. # Note that interruptions due to maxfun are postponed # until the completion of the current minimization iteration. # Overwrite f and g: self.f, self.g = self.func_and_grad(self.x) yield (self.n_iterations, self.x, self.sf.nfev,self.f,self.g) elif task_str.startswith(b&apos;NEW_X&apos;): # new iteration self.n_iterations += 1 if self.callback is not None: self.callback(np.copy(self.x)) if self.n_iterations &amp;gt;= self.maxiter: self.task[:] = &apos;STOP: TOTAL NO. of ITERATIONS REACHED LIMIT&apos; elif self.sf.nfev &amp;gt; self.maxfun: self.task[:] = (&apos;STOP: TOTAL NO. of f AND g EVALUATIONS &apos; &apos;EXCEEDS LIMIT&apos;) # this step calculates the solution at the end of an iteration # thus, we cannot see the steps taken to evaluate numerical gradient at f&apos;(x) # yield (self.n_iterations, self.x, self.sf.nfev,self.f,self.g) else: break # print (&apos;self.n_iterations {}, self.x {}, self.sf.nfev {}, f {}, g {}&apos;.format( # self.n_iterations, # self.x, # self.sf.nfev, # self.f, # self.g)) def package_result(self): task_str = self.task.tobytes().strip(b&apos;\x00&apos;).strip() if task_str.startswith(b&apos;CONV&apos;): warnflag = 0 elif self.sf.nfev &amp;gt; self.maxfun or self.n_iterations &amp;gt;= self.maxiter: warnflag = 1 else: warnflag = 2 # These two portions of the workspace are described in the mainlb # subroutine in lbfgsb.f. See line 363. s = self.wa[0: self.m*self.n].reshape(self.m, self.n) y = self.wa[self.m*self.n: 2*self.m*self.n].reshape(self.m, self.n) # See lbfgsb.f line 160 for this portion of the workspace. # isave(31) = the total number of BFGS updates prior the current iteration; n_bfgs_updates = self.isave[30] n_corrs = min(n_bfgs_updates, self.m) hess_inv = LbfgsInvHessProduct(s[:n_corrs], y[:n_corrs]) task_str = task_str.decode() result = OptimizeResult(fun=self.f, jac=self.g, nfev=self.sf.nfev, njev=self.sf.ngev, nit=self.n_iterations, status=warnflag, message=task_str, x=self.x, success=(warnflag == 0), hess_inv=hess_inv) print (result) return result As an aside, I design these solver objects with compatibility in mind. Thus, they take in the same set of parameters and output the same OptimizeResult object as the original Scipy implementation. Part II - Graphical User Interface / Web page To understand the graphical user interface of the web application, let’s start by taking a closer look at the final web page. The upper half contains the configuration of the Rosenbrock function, solution space, and the optimization algorithms. (the Rosenbrock function coefficients, choice of the optimization algorithm, the upper and lower bounds of the search space, initial guesses of solution (x), and the maximum number of iterations) The lower half contains a table of the sequential steps of a chosen optimizer. Bootstrap provides this basic design of the web page; Juxtapose allows users to visually compare the intermediate solutions of each algorithm. Pushing the central slider left or right reveals the screen-shot of the web page for differential evolution outputs and L-BFGS outputs respectively. Even though the screen-shots are static, in reality, during streaming, the HTML of the web page is updated dynamically by the server responses. An easy way to achieve this is to manipulate HTML by Flask, which provides APIs that leverage Jinja2 engine that generate new HTML from HTML templates. I have made heavy use of variables, if statements, for loops and filters in Jinja2. The form input variable values are set by Python string variables. Practically speaking, the default input values are python string that are hard coded on the server. I need to take extra care when it comes to the result table headers. Unlike differential evolution algorithm, L-BFGS calculates the gradient of the objective function. Jinja2 length filter tells me how many items are sent back. I then know what names should go in the header! Outer for loop creates HTML code snippets that renders the row of the intermediate result table; the inner for loop creates table data code snippet which populates the table row with values that are being streamed from server. The namespace variable allows me to turn off header after the first row. &amp;lt;!doctype html&amp;gt; &amp;lt;html lang=&quot;en&quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt; &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt; &amp;lt;title&amp;gt;Scipy optimization demo&amp;lt;/title&amp;gt; &amp;lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65&quot; crossorigin=&quot;anonymous&quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello, world of Scipy optimization!&amp;lt;/h1&amp;gt; &amp;lt;h3&amp;gt;Minimizing Rosenbrock Function &amp;lt;/h3&amp;gt; &amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4&quot; crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;form action=&quot;/solver&quot; method=&quot;post&quot;&amp;gt; &amp;lt;table class=&quot;table&quot;&amp;gt; &amp;lt;thead&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt; Function parameters&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; Values&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/thead&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;a&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; id=&quot;a&quot; name=&quot;a&quot; value={{a}}&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;b&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; id=&quot;b&quot; name=&quot;b&quot; value={{b}}&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/tbody&amp;gt; &amp;lt;thead&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt; Solution Bound&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; Values&amp;lt;/th&amp;gt; &amp;lt;/thead&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;lower&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; id=&quot;lower&quot; name=&quot;lower&quot; value={{lower}}&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;upper&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; id=&quot;upper&quot; name=&quot;upper&quot; value={{upper}}&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;x (initial guess)&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; id=&quot;initialGuess&quot; name=&quot;initialGuess&quot; value={{initialGuess}}&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/tbody&amp;gt; &amp;lt;thead&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt; Solver Configuration&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; Values&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/thead&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;max iterations&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; id=&quot;maxiter&quot; name=&quot;maxiter&quot; value={{maxiter}}&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;methods&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; &amp;lt;select id=&quot;methods&quot; name=&quot;methods&quot;&amp;gt; &amp;lt;option value=&quot;LBFGS&quot;&amp;gt;LBFGS&amp;lt;/option&amp;gt; &amp;lt;option value=&quot;Differential Evolution&quot;&amp;gt;Differential Evolution&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/tbody&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;&amp;lt;input type=&quot;submit&quot;&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&amp;lt;a class=&quot;nav-link&quot; href=&quot;{{ url_for(&apos;hello_world&apos;) }}&quot;&amp;gt;Clear results and return to Home page&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/tbody&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;!-- namespace ensures the variable is available outside of this scope (including the for loop) ! ---&amp;gt; {% set display = namespace(header=true) %} {% for (result, timeElapsed) in results %} {% if display.header %} &amp;lt;table class=&quot;table&quot;&amp;gt; {% if result | length == 3 %} &amp;lt;thead&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt; Iteration&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; x &amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; f(x) &amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; time elapsed (s) &amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/thead&amp;gt; {% elif result | length == 5 %} &amp;lt;thead&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt; Iteration&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; x &amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; number of f(x) evaluations&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; f(x) &amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; f&apos;(x) &amp;lt;/th&amp;gt; &amp;lt;th&amp;gt; time elapsed (s) &amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/thead&amp;gt; {% endif %} &amp;lt;tbody&amp;gt; {% set display.header = false %} {% endif %} &amp;lt;tr&amp;gt; {% for item in result %} &amp;lt;td&amp;gt; {{item}} &amp;lt;/td&amp;gt; {% endfor %} &amp;lt;td&amp;gt; {{timeElapsed}} &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; {% endfor %} &amp;lt;/tbody&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Part III - Flask Server Flask is my first choice for setting up a web server (WSGI - web server gateway interface application) because its documentation is quite comprehensive and its APIs are quite readable. The reason is seven-fold. Flask manages the endpoints using a decorator Flask handles request via a request object and response via a response object for you Flask renders HTML template automatically Flask isolates the current application scope and lets programmers create variables or default values inside it String variables are easily passed around Flask has default settings, a feature that simplifies the code (i.e. all HTML templates are placed under templates folder, a location where Flask goes to and looks up templates files automatically) By running flask run –reload –debugger in the command prompt, reload means Flask detects file change and reloads the latest version; debugger shows an error traceback on the HTML page To show you what the project structure is like, I draw a tree using windows tree /f command. This organization helps reduce the risk of circular importing. C:. │ run_app.py │ ├───api │ │ routes.py │ │ scipyOptimizer.py │ │ __init__.py │ │ │ ├───templates │ │ callback.html │ │ │ └───__pycache__ │ routes.cpython-310.pyc │ scipyOptimizer.cpython-310.pyc │ __init__.cpython-310.pyc │ └───__pycache__ run_app.cpython-310.pyc The server starts when Flask runs run_app.py. I often set Flask environment variable before calling flask run for the sake of convenience. (use Set FLASK_APP=run_app.py on windows) from api import app if __name__ == &quot;__main__&quot;: app.run(debug=True) The api module initializes the application as shown below: from flask import Flask from flask import current_app, render_template, stream_template, Response, request app = Flask(__name__) app.debug=True with app.app_context(): &quot;&quot;&quot; Default optimization setting &quot;&quot;&quot; current_app.a = 1.0 current_app.b = 100.0 current_app.lower = -4.0 current_app.upper = 4.0 current_app.maxiter = 10 current_app.initialGuess = &quot;0.5,0.5&quot; from api import routes Note that we must initialize all routes. Or else we cannot find our endpoints. The routes are listed below: from flask import current_app, render_template, stream_template, Response, request from .scipyOptimizer import ModifiedEvolution, rosenbrock_func, ModifiedLBFGSB import time, os import numpy as np from functools import partial from api import app def extract_form(request): # we cannot get json as we did not submit json &amp;gt;_&amp;lt; # variable_name = request.get_json() # a = request.form.get(&apos;a&apos;) b = request.form.get(&apos;b&apos;) lower = request.form.get(&apos;lower&apos;) upper = request.form.get(&apos;upper&apos;) maxiter = request.form.get(&apos;maxiter&apos;) initialGuess = request.form.get(&apos;initialGuess&apos;) print (&apos;initialGuess &apos;, initialGuess) initialGuess = [float(value) for value in initialGuess.split(&apos;,&apos;)] # values in request objects are string func = partial(rosenbrock_func, float(a), float(b)) maxiter = int(maxiter) lower = float(lower) upper = float(upper) bounds = [(lower,upper), (lower,upper)] print (&apos;bounds &apos;, bounds) return bounds, maxiter, initialGuess, func, a, b, lower, upper @app.route(&apos;/&apos;) def hello_world(): return render_template(&quot;callback.html&quot;, maxiter=current_app.maxiter, a=current_app.a, b=current_app.b, lower=current_app.lower, upper=current_app.upper, initialGuess=current_app.initialGuess) @app.route(&quot;/solver&quot;, methods=[&apos;POST&apos;]) def solver(): methods = request.form.get(&apos;methods&apos;) print (&apos;methods = &apos;, methods) if methods == &quot;Differential Evolution&quot;: return callEvolution() elif methods == &quot;LBFGS&quot;: return call_LBFGS() else: raise RuntimeError(&apos;unknown methods&apos;) @app.route(&quot;/evolve&quot;, methods=[&quot;POST&quot;]) def callEvolution(): bounds, maxiter, initialGuess, func, a, b, lower, upper = extract_form(request) # start a timer to see how long it takes to solve the problem start_time = time.time() def add_html(): &quot;&quot;&quot; Create a generator that produces the intermediate results of the optimizer &quot;&quot;&quot; # using a context manager means that any created Pool objects are # cleared up. # don&apos;t pass args because they try to enter the f(x) as arguments with ModifiedEvolution(func, bounds, maxiter=maxiter, polish=True, disp=True) as solver: solver.initialize_population() for intermediate_results in solver.evolving(): yield (intermediate_results, time.time()-start_time) result = solver.perform_polishing() yield ((&quot;final&quot;, result.x, result.fun), time.time()-start_time) return Response(stream_template(&apos;callback.html&apos;, results=add_html(), initialGuess=&apos;,&apos;.join([str(i) for i in initialGuess]), maxiter=maxiter, a=a, b=b, lower=lower, upper=upper)) @app.route(&apos;/lbfgs&apos;, methods=[&apos;POST&apos;]) def call_LBFGS(): bounds, maxiter, initialGuess, func, a, b, lower, upper = extract_form(request) # start a timer to see how long it takes to solve the problem start_time = time.time() solver = ModifiedLBFGSB(func, initialGuess, maxiter=maxiter, bounds=bounds) def add_html(solver): &quot;&quot;&quot; Create a generator that produces the intermediate results of the optimizer &quot;&quot;&quot; for intermediate_results in solver.solving(): yield (intermediate_results, time.time()-start_time) result = solver.package_result() yield ((&quot;final&quot;, result.x, result.nfev, result.fun, result.jac), time.time()-start_time) return Response(stream_template(&apos;callback.html&apos;, results=add_html(solver), initialGuess=&apos;,&apos;.join([str(i) for i in initialGuess]), maxiter=maxiter, a=a, b=b, lower=lower, upper=upper)) I always extract user’s form to obtain the most up-to-date configurations. When Flask renders the HTML page, I pass the configurations along so that the user configurations are persistent (without being overwritten by default optimization setting) on the HTML page. It is worth noting that stream_with_context can also be used here if the request object ought to be retained during streaming.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/streamingScipyOptimization/differentialEvolution1.png" /><media:content medium="image" url="/assets/images/streamingScipyOptimization/differentialEvolution1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">CUDA Graphs in Pytorch</title><link href="/deep_learning/2022/11/26/CUDAGraph/" rel="alternate" type="text/html" title="CUDA Graphs in Pytorch" /><published>2022-11-26T00:00:00+08:00</published><updated>2022-11-26T00:00:00+08:00</updated><id>/deep_learning/2022/11/26/CUDAGraph</id><content type="html" xml:base="/deep_learning/2022/11/26/CUDAGraph/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Since its debut in CUDA 10, we have been waiting for Pytorch to add CUDA Graphs features. It is great to see that, by the end of 2021, Pytorch has incorporated CUDA Graphs along with tutorials and documentation on how it works and how to use it.&lt;/p&gt;

&lt;p&gt;For the sake of brevity, I shall not repeat what is officially available on Pytorch tutorials, but instead I shall focus on some useful tricks for learning about CUDA Graphs. I strongly encourage readers to check out the blog on CUDA Graphs at &lt;a href=&quot;https://pytorch.org/blog/accelerating-pytorch-with-cuda-graphs/&quot;&gt;https://pytorch.org/blog/accelerating-pytorch-with-cuda-graphs/&lt;/a&gt;. I find the article very helpful and informative. However, I want to extend the tutorial a bit further. Hence, I am writing this post.&lt;/p&gt;

&lt;h2 id=&quot;prerequisite&quot;&gt;Prerequisite&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Pytorch 1.12.1&lt;/li&gt;
  &lt;li&gt;NVIDIA GeForce GTX 1650 Ti&lt;/li&gt;
  &lt;li&gt;CUDA 11.3&lt;/li&gt;
  &lt;li&gt;Windows 10&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;problems&quot;&gt;Problems&lt;/h2&gt;
&lt;p&gt;When I try to understand the API example in the tutorial, I run into this situation when I print the torch.cudaStream object and the torch.cuda.CUDAGraph object.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;lt;torch.cuda.Stream device=cuda:0 cuda_stream=0x20af329de50&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;lt;torch.cuda.graphs.CUDAGraph object at 0x0000018E91AD4540&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All I can see is that I have created both objects and they are sitting at a specific location/address on memory. Yet, it tells me nothing about any change I make to the graphs and streams as I experiment them.&lt;/p&gt;

&lt;p&gt;A dummy operation and tensor are therefore added to reveal the subtle difference and the functioning of this API tutorial.&lt;/p&gt;

&lt;p&gt;Below is the original tutorial.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;640&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loss_fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSELoss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SGD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Placeholders used for capture
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# warmup
# Uses static_input and static_target here for convenience,
# but in a real setting, because the warmup includes optimizer.step()
# you must use a few batches of real data.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_to_none&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# capture
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUDAGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Sets grads to None before capture, so backward() will create
# .grad attributes with allocations from the graph&apos;s private pool
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_to_none&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_y_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;real_inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;real_targets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real_targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Fills the graph&apos;s input memory with new data to compute on
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# replay() includes forward, backward, and step.
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# You don&apos;t even need to call optimizer.zero_grad() between iterations
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# because the captured backward refills static .grad tensors in place.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Params have been updated. static_y_pred, static_loss, and .grad
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# attributes hold values from computing on this iteration&apos;s data.
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this code looks unfamiliar, please visit &lt;a href=&quot;https://pytorch.org/blog/accelerating-pytorch-with-cuda-graphs/&quot;&gt;https://pytorch.org/blog/accelerating-pytorch-with-cuda-graphs/&lt;/a&gt;. 
The tutorial suggests that we should start the process of building our own CUDA Graph by doing a “warm up” first. In a “warm up”, we stream capture a linear sequence of execution that occurs on a specific device (in this case, cuda:0). Even though the tutorial uses random data, we ought to use a few batches of real data. Then, we repeat the exact sequence in graph capture. Finally, we replay the captured graph to train a model on real data.&lt;/p&gt;

&lt;h2 id=&quot;lesson-1-we-perform-computation-during-warm-up-but-not-graph-capture&quot;&gt;Lesson 1: we perform computation during warm up but not graph capture.&lt;/h2&gt;
&lt;p&gt;Here is my version of the same tutorial on Lesson 1.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;640&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loss_fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSELoss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SGD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Placeholders used for capture
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Initial: static_counter &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# warmup
# Uses static_input and static_target here for convenience,
# but in a real setting, because the warmup includes optimizer.step()
# you must use a few batches of real data.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_to_none&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&apos;&apos;&apos;
A CUDA stream is a linear sequence of execution that belongs to a specific device, independent from other streams
&apos;&apos;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;After stream capture: static_counter &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# capture
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUDAGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Sets grads to None before capture, so backward() will create
# .grad attributes with allocations from the graph&apos;s private pool
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_to_none&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;static_y_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;After Graph Capture: static_counter &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ZERO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZERO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;real_inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;real_targets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real_targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Fills the graph&apos;s input memory with new data to compute on
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# replay() includes forward, backward, and step.
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# You don&apos;t even need to call optimizer.zero_grad() between iterations
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# because the captured backward refills static .grad tensors in place.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Params have been updated. static_y_pred, static_loss, and .grad
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# attributes hold values fr
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;After replay: static_counter &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Static_counter has been added as a dummy tensor, so that we can keep track of the impact during streaming, graph capture and graph replay.&lt;/p&gt;

&lt;p&gt;Console outputs are as follows:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Initial: static_counter  tensor([0.], device=’cuda:0’)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;After stream capture: static_counter  tensor([1.], device=’cuda:0’)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;After Graph Capture: static_counter  tensor([1.], device=’cuda:0’)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;After replay: static_counter  tensor([10.], device=’cuda:0’)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We observe that static counter’s value has increased by +1 during stream capture, but not graph capture. Therefore, we conclude that we perform no computation during graph capture! Just prior to replay, we reset static counter to zero. After replay, static counter value has raised to 10, reflecting the number of iterations of the for loop.&lt;/p&gt;

&lt;h2 id=&quot;lesson-2-only-what-happens-during-graph-capture-matters&quot;&gt;Lesson 2: only what happens during graph capture matters.&lt;/h2&gt;
&lt;p&gt;Stream capture aims only at debugging and sanity check.
Lesson 2 script is as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;640&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loss_fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSELoss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SGD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Placeholders used for capture
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Initial: static_counter &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# warmup
# Uses static_input and static_target here for convenience,
# but in a real setting, because the warmup includes optimizer.step()
# you must use a few batches of real data.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_to_none&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&apos;&apos;&apos;
A CUDA stream is a linear sequence of execution that belongs to a specific device, independent from other streams
&apos;&apos;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;After stream capture: static_counter &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# capture
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUDAGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Sets grads to None before capture, so backward() will create
# .grad attributes with allocations from the graph&apos;s private pool
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_to_none&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;static_y_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;After Graph Capture: static_counter &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ZERO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZERO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;real_inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;real_targets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real_targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Fills the graph&apos;s input memory with new data to compute on
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# replay() includes forward, backward, and step.
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# You don&apos;t even need to call optimizer.zero_grad() between iterations
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# because the captured backward refills static .grad tensors in place.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Params have been updated. static_y_pred, static_loss, and .grad
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# attributes hold values fr
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;After replay: static_counter &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I deliberately remove the increments of static counter during stream capture but keep it during graph capture. Console outputs are as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Initial: static_counter  tensor([0.], device=’cuda:0’)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;After stream capture: static_counter  tensor([0.], device=’cuda:0’)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;After Graph Capture: static_counter  tensor([0.], device=’cuda:0’)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;After replay: static_counter  tensor([10.], device=’cuda:0’)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since its removal, static counter value remains at zero after stream capture. However, after replay, our graph actually performs 10 iterations of addition!&lt;/p&gt;

&lt;p&gt;Of course, in practice, we should execute the same sequence during stream capture and graph capture because we can catch bugs only during stream capture when computation is verified and performed on the device.&lt;/p&gt;

&lt;h2 id=&quot;lesson-3-we-can-explicitly-capture-a-for-loop-in-a-graph&quot;&gt;Lesson 3: we can explicitly capture a for loop in a graph.&lt;/h2&gt;
&lt;p&gt;The script below shows that we add a for loop during both stream capture and graph capture.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;640&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loss_fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSELoss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SGD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Placeholders used for capture
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Initial: static_counter &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# warmup
# Uses static_input and static_target here for convenience,
# but in a real setting, because the warmup includes optimizer.step()
# you must use a few batches of real data.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_to_none&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;After stream capture: static_counter &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# capture
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUDAGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Sets grads to None before capture, so backward() will create
# .grad attributes with allocations from the graph&apos;s private pool
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_to_none&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;static_y_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;static_loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;static_loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;After Graph Capture: static_counter &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ZERO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZERO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  

&lt;span class=&quot;n&quot;&gt;real_inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;real_targets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real_targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Fills the graph&apos;s input memory with new data to compute on
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# replay() includes forward, backward, and step.
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# You don&apos;t even need to call optimizer.zero_grad() between iterations
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# because the captured backward refills static .grad tensors in place.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Params have been updated. static_y_pred, static_loss, and .grad
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# attributes hold values from computing on this iteration&apos;s data.
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;After replay: static_counter &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Console outputs are as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Initial: static_counter  tensor([0.], device=’cuda:0’)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;After stream capture: static_counter  tensor([3.], device=’cuda:0’)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;After Graph Capture: static_counter  tensor([3.], device=’cuda:0’)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;After replay: static_counter  tensor([30.], device=’cuda:0’)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Interestingly, static counter value has risen by the multiplication of the number of iterations of the two for loops. Thus, a “single” replay is in fact a series of 3 repeated executions.&lt;/p&gt;

&lt;h2 id=&quot;speed&quot;&gt;Speed&lt;/h2&gt;
&lt;p&gt;In this toy example, CUDA Graph offers a 4% reduction in training time on average. Nonetheless, this speed up is not as impressive as the one realized by the official examples/ case studies.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;640&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loss_fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSELoss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SGD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Placeholders used for capture
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# warmup
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Uses static_input and static_target here for convenience,
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# but in a real setting, because the warmup includes optimizer.step()
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# you must use a few batches of real data.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_to_none&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# capture
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUDAGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Sets grads to None before capture, so backward() will create
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# .grad attributes with allocations from the graph&apos;s private pool
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_to_none&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;static_y_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;static_loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;static_loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_with_graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;real_inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;real_targets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ZERO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZERO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 

    &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perf_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real_targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Fills the graph&apos;s input memory with new data to compute on
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# replay() includes forward, backward, and step.
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# You don&apos;t even need to call optimizer.zero_grad() between iterations
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# because the captured backward refills static .grad tensors in place.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Params have been updated. static_y_pred, static_loss, and .grad
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# attributes hold values from computing on this iteration&apos;s data.
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# print (&apos;After training: static_counter &apos;, static_counter)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;time_elapsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perf_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;    
    &lt;span class=&quot;c1&quot;&gt;# print (&apos;After training: static_counter &apos;, static_counter)
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_elapsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;640&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loss_fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSELoss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SGD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Placeholders used for capture
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cuda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# print (&apos;Initial: static_counter &apos;, static_counter)
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perf_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_to_none&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;time_elapsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perf_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;    
    &lt;span class=&quot;c1&quot;&gt;# print (&apos;After training: static_counter &apos;, static_counter)
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_elapsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_with_graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It is worth noting that whenever performance we measure, it is very crucial to separate the CPU launch time and the GPU computation time. As explained in the official tutorial, CPU launch time can be slow. Instead of timing test() and test_with_graph(), I therefore choose to time the for loop.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;CUDA Graph is quite useful for speeding training up. Especially, CUDA Graph is so convenient to implement and deploy. As CUDA and Pytorch improve symbiotically, we have more tricks to train better AI models.&lt;/p&gt;</content><author><name>Wilson Fok</name></author><category term="Deep_Learning" /><summary type="html">Introduction Since its debut in CUDA 10, we have been waiting for Pytorch to add CUDA Graphs features. It is great to see that, by the end of 2021, Pytorch has incorporated CUDA Graphs along with tutorials and documentation on how it works and how to use it. For the sake of brevity, I shall not repeat what is officially available on Pytorch tutorials, but instead I shall focus on some useful tricks for learning about CUDA Graphs. I strongly encourage readers to check out the blog on CUDA Graphs at https://pytorch.org/blog/accelerating-pytorch-with-cuda-graphs/. I find the article very helpful and informative. However, I want to extend the tutorial a bit further. Hence, I am writing this post. Prerequisite Pytorch 1.12.1 NVIDIA GeForce GTX 1650 Ti CUDA 11.3 Windows 10 Problems When I try to understand the API example in the tutorial, I run into this situation when I print the torch.cudaStream object and the torch.cuda.CUDAGraph object. &amp;lt;torch.cuda.Stream device=cuda:0 cuda_stream=0x20af329de50&amp;gt; &amp;lt;torch.cuda.graphs.CUDAGraph object at 0x0000018E91AD4540&amp;gt; All I can see is that I have created both objects and they are sitting at a specific location/address on memory. Yet, it tells me nothing about any change I make to the graphs and streams as I experiment them. A dummy operation and tensor are therefore added to reveal the subtle difference and the functioning of this API tutorial. Below is the original tutorial. N, D_in, H, D_out = 640, 4096, 2048, 1024 model = torch.nn.Sequential(torch.nn.Linear(D_in, H), torch.nn.Dropout(p=0.2), torch.nn.Linear(H, D_out), torch.nn.Dropout(p=0.1)).cuda() loss_fn = torch.nn.MSELoss() optimizer = torch.optim.SGD(model.parameters(), lr=0.1) # Placeholders used for capture static_input = torch.randn(N, D_in, device=&apos;cuda&apos;) static_target = torch.randn(N, D_out, device=&apos;cuda&apos;) # warmup # Uses static_input and static_target here for convenience, # but in a real setting, because the warmup includes optimizer.step() # you must use a few batches of real data. s = torch.cuda.Stream() s.wait_stream(torch.cuda.current_stream()) with torch.cuda.stream(s): for i in range(3): optimizer.zero_grad(set_to_none=True) y_pred = model(static_input) loss = loss_fn(y_pred, static_target) loss.backward() optimizer.step() torch.cuda.current_stream().wait_stream(s) # capture g = torch.cuda.CUDAGraph() # Sets grads to None before capture, so backward() will create # .grad attributes with allocations from the graph&apos;s private pool optimizer.zero_grad(set_to_none=True) with torch.cuda.graph(g): static_y_pred = model(static_input) static_loss = loss_fn(static_y_pred, static_target) static_loss.backward() optimizer.step() real_inputs = [torch.rand_like(static_input) for _ in range(10)] real_targets = [torch.rand_like(static_target) for _ in range(10)] for data, target in zip(real_inputs, real_targets): # Fills the graph&apos;s input memory with new data to compute on static_input.copy_(data) static_target.copy_(target) # replay() includes forward, backward, and step. # You don&apos;t even need to call optimizer.zero_grad() between iterations # because the captured backward refills static .grad tensors in place. g.replay() # Params have been updated. static_y_pred, static_loss, and .grad # attributes hold values from computing on this iteration&apos;s data. If this code looks unfamiliar, please visit https://pytorch.org/blog/accelerating-pytorch-with-cuda-graphs/. The tutorial suggests that we should start the process of building our own CUDA Graph by doing a “warm up” first. In a “warm up”, we stream capture a linear sequence of execution that occurs on a specific device (in this case, cuda:0). Even though the tutorial uses random data, we ought to use a few batches of real data. Then, we repeat the exact sequence in graph capture. Finally, we replay the captured graph to train a model on real data. Lesson 1: we perform computation during warm up but not graph capture. Here is my version of the same tutorial on Lesson 1. import torch N, D_in, H, D_out = 640, 4096, 2048, 1024 model = torch.nn.Sequential(torch.nn.Linear(D_in, H), torch.nn.Dropout(p=0.2), torch.nn.Linear(H, D_out), torch.nn.Dropout(p=0.1)).cuda() loss_fn = torch.nn.MSELoss() optimizer = torch.optim.SGD(model.parameters(), lr=0.1) # Placeholders used for capture static_input = torch.randn(N, D_in, device=&apos;cuda&apos;) static_target = torch.randn(N, D_out, device=&apos;cuda&apos;) static_counter = torch.zeros((1,), device=&apos;cuda&apos;) print (&apos;Initial: static_counter &apos;, static_counter) # warmup # Uses static_input and static_target here for convenience, # but in a real setting, because the warmup includes optimizer.step() # you must use a few batches of real data. s = torch.cuda.Stream() s.wait_stream(torch.cuda.current_stream()) with torch.cuda.stream(s): optimizer.zero_grad(set_to_none=True) y_pred = model(static_input) loss = loss_fn(y_pred, static_target) loss.backward() optimizer.step() static_counter[0] += 1.0 &apos;&apos;&apos; A CUDA stream is a linear sequence of execution that belongs to a specific device, independent from other streams &apos;&apos;&apos; torch.cuda.current_stream().wait_stream(s) print (&apos;After stream capture: static_counter &apos;, static_counter) # capture g = torch.cuda.CUDAGraph() # Sets grads to None before capture, so backward() will create # .grad attributes with allocations from the graph&apos;s private pool optimizer.zero_grad(set_to_none=True) with torch.cuda.graph(g): static_y_pred = model(static_input) static_loss = loss_fn(static_y_pred, static_target) static_loss.backward() optimizer.step() static_counter[0] += 1.0 print (&apos;After Graph Capture: static_counter &apos;, static_counter) ZERO = torch.zeros((1,), device=&apos;cuda&apos;) static_counter.copy_(ZERO) real_inputs = [torch.rand_like(static_input) for _ in range(10)] real_targets = [torch.rand_like(static_target) for _ in range(10)] for data, target in zip(real_inputs, real_targets): # Fills the graph&apos;s input memory with new data to compute on static_input.copy_(data) static_target.copy_(target) # replay() includes forward, backward, and step. # You don&apos;t even need to call optimizer.zero_grad() between iterations # because the captured backward refills static .grad tensors in place. g.replay() # Params have been updated. static_y_pred, static_loss, and .grad # attributes hold values fr print (&apos;After replay: static_counter &apos;, static_counter) Static_counter has been added as a dummy tensor, so that we can keep track of the impact during streaming, graph capture and graph replay. Console outputs are as follows: Initial: static_counter tensor([0.], device=’cuda:0’) After stream capture: static_counter tensor([1.], device=’cuda:0’) After Graph Capture: static_counter tensor([1.], device=’cuda:0’) After replay: static_counter tensor([10.], device=’cuda:0’) We observe that static counter’s value has increased by +1 during stream capture, but not graph capture. Therefore, we conclude that we perform no computation during graph capture! Just prior to replay, we reset static counter to zero. After replay, static counter value has raised to 10, reflecting the number of iterations of the for loop. Lesson 2: only what happens during graph capture matters. Stream capture aims only at debugging and sanity check. Lesson 2 script is as follows: import torch N, D_in, H, D_out = 640, 4096, 2048, 1024 model = torch.nn.Sequential(torch.nn.Linear(D_in, H), torch.nn.Dropout(p=0.2), torch.nn.Linear(H, D_out), torch.nn.Dropout(p=0.1)).cuda() loss_fn = torch.nn.MSELoss() optimizer = torch.optim.SGD(model.parameters(), lr=0.1) # Placeholders used for capture static_input = torch.randn(N, D_in, device=&apos;cuda&apos;) static_target = torch.randn(N, D_out, device=&apos;cuda&apos;) static_counter = torch.zeros((1,), device=&apos;cuda&apos;) print (&apos;Initial: static_counter &apos;, static_counter) # warmup # Uses static_input and static_target here for convenience, # but in a real setting, because the warmup includes optimizer.step() # you must use a few batches of real data. s = torch.cuda.Stream() s.wait_stream(torch.cuda.current_stream()) with torch.cuda.stream(s): optimizer.zero_grad(set_to_none=True) y_pred = model(static_input) loss = loss_fn(y_pred, static_target) loss.backward() optimizer.step() &apos;&apos;&apos; A CUDA stream is a linear sequence of execution that belongs to a specific device, independent from other streams &apos;&apos;&apos; torch.cuda.current_stream().wait_stream(s) print (&apos;After stream capture: static_counter &apos;, static_counter) # capture g = torch.cuda.CUDAGraph() # Sets grads to None before capture, so backward() will create # .grad attributes with allocations from the graph&apos;s private pool optimizer.zero_grad(set_to_none=True) with torch.cuda.graph(g): static_y_pred = model(static_input) static_loss = loss_fn(static_y_pred, static_target) static_loss.backward() optimizer.step() static_counter[0] += 1.0 print (&apos;After Graph Capture: static_counter &apos;, static_counter) ZERO = torch.zeros((1,), device=&apos;cuda&apos;) static_counter.copy_(ZERO) real_inputs = [torch.rand_like(static_input) for _ in range(10)] real_targets = [torch.rand_like(static_target) for _ in range(10)] for data, target in zip(real_inputs, real_targets): # Fills the graph&apos;s input memory with new data to compute on static_input.copy_(data) static_target.copy_(target) # replay() includes forward, backward, and step. # You don&apos;t even need to call optimizer.zero_grad() between iterations # because the captured backward refills static .grad tensors in place. g.replay() # Params have been updated. static_y_pred, static_loss, and .grad # attributes hold values fr print (&apos;After replay: static_counter &apos;, static_counter) I deliberately remove the increments of static counter during stream capture but keep it during graph capture. Console outputs are as follows: Initial: static_counter tensor([0.], device=’cuda:0’) After stream capture: static_counter tensor([0.], device=’cuda:0’) After Graph Capture: static_counter tensor([0.], device=’cuda:0’) After replay: static_counter tensor([10.], device=’cuda:0’) Since its removal, static counter value remains at zero after stream capture. However, after replay, our graph actually performs 10 iterations of addition! Of course, in practice, we should execute the same sequence during stream capture and graph capture because we can catch bugs only during stream capture when computation is verified and performed on the device. Lesson 3: we can explicitly capture a for loop in a graph. The script below shows that we add a for loop during both stream capture and graph capture. import torch N, D_in, H, D_out = 640, 4096, 2048, 1024 model = torch.nn.Sequential(torch.nn.Linear(D_in, H), torch.nn.Dropout(p=0.2), torch.nn.Linear(H, D_out), torch.nn.Dropout(p=0.1)).cuda() loss_fn = torch.nn.MSELoss() optimizer = torch.optim.SGD(model.parameters(), lr=0.1) # Placeholders used for capture static_input = torch.randn(N, D_in, device=&apos;cuda&apos;) static_target = torch.randn(N, D_out, device=&apos;cuda&apos;) static_counter = torch.zeros((1,), device=&apos;cuda&apos;) print (&apos;Initial: static_counter &apos;, static_counter) # warmup # Uses static_input and static_target here for convenience, # but in a real setting, because the warmup includes optimizer.step() # you must use a few batches of real data. s = torch.cuda.Stream() s.wait_stream(torch.cuda.current_stream()) with torch.cuda.stream(s): for i in range(3): optimizer.zero_grad(set_to_none=True) y_pred = model(static_input) loss = loss_fn(y_pred, static_target) loss.backward() optimizer.step() static_counter[0] += 1.0 torch.cuda.current_stream().wait_stream(s) print (&apos;After stream capture: static_counter &apos;, static_counter) # capture g = torch.cuda.CUDAGraph() # Sets grads to None before capture, so backward() will create # .grad attributes with allocations from the graph&apos;s private pool optimizer.zero_grad(set_to_none=True) with torch.cuda.graph(g): for i in range(3): static_y_pred = model(static_input) static_loss = loss_fn(static_y_pred, static_target) static_loss.backward() optimizer.step() static_counter[0] += 1.0 print (&apos;After Graph Capture: static_counter &apos;, static_counter) ZERO = torch.zeros((1,), device=&apos;cuda&apos;) static_counter.copy_(ZERO) real_inputs = [torch.rand_like(static_input) for _ in range(10)] real_targets = [torch.rand_like(static_target) for _ in range(10)] for data, target in zip(real_inputs, real_targets): # Fills the graph&apos;s input memory with new data to compute on static_input.copy_(data) static_target.copy_(target) # replay() includes forward, backward, and step. # You don&apos;t even need to call optimizer.zero_grad() between iterations # because the captured backward refills static .grad tensors in place. g.replay() # Params have been updated. static_y_pred, static_loss, and .grad # attributes hold values from computing on this iteration&apos;s data. print (&apos;After replay: static_counter &apos;, static_counter) Console outputs are as follows: Initial: static_counter tensor([0.], device=’cuda:0’) After stream capture: static_counter tensor([3.], device=’cuda:0’) After Graph Capture: static_counter tensor([3.], device=’cuda:0’) After replay: static_counter tensor([30.], device=’cuda:0’) Interestingly, static counter value has risen by the multiplication of the number of iterations of the two for loops. Thus, a “single” replay is in fact a series of 3 repeated executions. Speed In this toy example, CUDA Graph offers a 4% reduction in training time on average. Nonetheless, this speed up is not as impressive as the one realized by the official examples/ case studies. import torch, time import numpy as np def setup(): N, D_in, H, D_out = 640, 4096, 2048, 1024 model = torch.nn.Sequential(torch.nn.Linear(D_in, H), torch.nn.Dropout(p=0.2), torch.nn.Linear(H, D_out), torch.nn.Dropout(p=0.1)).cuda() loss_fn = torch.nn.MSELoss() optimizer = torch.optim.SGD(model.parameters(), lr=0.1) # Placeholders used for capture static_input = torch.randn(N, D_in, device=&apos;cuda&apos;) static_target = torch.randn(N, D_out, device=&apos;cuda&apos;) static_counter = torch.zeros((1,), device=&apos;cuda&apos;) # warmup # Uses static_input and static_target here for convenience, # but in a real setting, because the warmup includes optimizer.step() # you must use a few batches of real data. s = torch.cuda.Stream() s.wait_stream(torch.cuda.current_stream()) with torch.cuda.stream(s): for i in range(3): optimizer.zero_grad(set_to_none=True) y_pred = model(static_input) loss = loss_fn(y_pred, static_target) loss.backward() optimizer.step() static_counter[0] += 1.0 torch.cuda.current_stream().wait_stream(s) # capture g = torch.cuda.CUDAGraph() # Sets grads to None before capture, so backward() will create # .grad attributes with allocations from the graph&apos;s private pool optimizer.zero_grad(set_to_none=True) with torch.cuda.graph(g): static_y_pred = model(static_input) static_loss = loss_fn(static_y_pred, static_target) static_loss.backward() optimizer.step() static_counter[0] += 1.0 return g, static_input, static_target, static_counter def test_with_graph(g, static_input, static_target, static_counter, M=200): real_inputs = [torch.rand_like(static_input) for _ in range(M)] real_targets = [torch.rand_like(static_target) for _ in range(M)] ZERO = torch.zeros((1,), device=&apos;cuda&apos;) static_counter.copy_(ZERO) start_time = time.perf_counter() for data, target in zip(real_inputs, real_targets): # Fills the graph&apos;s input memory with new data to compute on static_input.copy_(data) static_target.copy_(target) # replay() includes forward, backward, and step. # You don&apos;t even need to call optimizer.zero_grad() between iterations # because the captured backward refills static .grad tensors in place. g.replay() # Params have been updated. static_y_pred, static_loss, and .grad # attributes hold values from computing on this iteration&apos;s data. # print (&apos;After training: static_counter &apos;, static_counter) time_elapsed = time.perf_counter() - start_time # print (&apos;After training: static_counter &apos;, static_counter) return time_elapsed / M def test(M=200): N, D_in, H, D_out = 640, 4096, 2048, 1024 model = torch.nn.Sequential(torch.nn.Linear(D_in, H), torch.nn.Dropout(p=0.2), torch.nn.Linear(H, D_out), torch.nn.Dropout(p=0.1)).cuda() loss_fn = torch.nn.MSELoss() optimizer = torch.optim.SGD(model.parameters(), lr=0.1) # Placeholders used for capture static_input = [torch.randn(N, D_in, device=&apos;cuda&apos;) for _ in range(M)] static_target = [torch.randn(N, D_out, device=&apos;cuda&apos;) for _ in range(M)] static_counter = torch.zeros((1,), device=&apos;cuda&apos;) # print (&apos;Initial: static_counter &apos;, static_counter) start_time = time.perf_counter() for input, target in zip(static_input, static_target): optimizer.zero_grad(set_to_none=True) y_pred = model(input) loss = loss_fn(y_pred, target) loss.backward() optimizer.step() static_counter[0] += 1.0 time_elapsed = time.perf_counter() - start_time # print (&apos;After training: static_counter &apos;, static_counter) return time_elapsed / M if __name__ == &quot;__main__&quot;: print (t0 := test()) g, static_input, static_target, static_counter = setup() print (t1:= test_with_graph(g, static_input, static_target, static_counter)) print ((t1-t0)/ t0) It is worth noting that whenever performance we measure, it is very crucial to separate the CPU launch time and the GPU computation time. As explained in the official tutorial, CPU launch time can be slow. Instead of timing test() and test_with_graph(), I therefore choose to time the for loop. Conclusion CUDA Graph is quite useful for speeding training up. Especially, CUDA Graph is so convenient to implement and deploy. As CUDA and Pytorch improve symbiotically, we have more tricks to train better AI models.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/img/deepLearning.jpg" /><media:content medium="image" url="/assets/img/deepLearning.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Streamlit</title><link href="/others/2022/08/04/Streamlit/" rel="alternate" type="text/html" title="Streamlit" /><published>2022-08-04T00:00:00+08:00</published><updated>2022-08-04T00:00:00+08:00</updated><id>/others/2022/08/04/Streamlit</id><content type="html" xml:base="/others/2022/08/04/Streamlit/">&lt;h2 id=&quot;introduction--what-is-streamlit&quot;&gt;Introduction : What is Streamlit&lt;/h2&gt;
&lt;p&gt;On Streamlit website, Streamlit is proclaimed to be&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“the fastest way to build and share web data apps”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While I am unsure whether Streamlit is the fastest way, I reckon Streamlit makes creating web-based applications with python quite easy. 
Streamlit is a python package that helps developers quickly build a simple web application on server.
The web applications must be simple. The framework excludes many standard functionalities such as authentication, encryption, unit-testing and other essentials for production. Its documentation and examples seem to suggest that the web applications are not targeted for scale (ie several servers handling requests from millions of clients). It is a python package that is compatible with many existing libraries, most notably Matplotlib and Altair for visualization, Numpy and Pandas for number crunching, Pytorch/ Tensorflow and other frameworks for Deep Learning. The development on Streamlit is quick because of two handy features. As it relies on a python interpreter, it runs as the interpreter reads the source code sequentially. Problematic lines or bugs can be found as soon as the execution breaks. In addition to the ease of debugging, Streamlit monitors changes in the python source code, re-runs the web server, and reflects the updates of those pages automatically. So developers can see the changes and improve the code as they see fit in real-time.&lt;/p&gt;

&lt;p&gt;Nowadays, packages seldom remain packages. Streamlit has built its own community of developers and users. While there are plenty of helpful posts on forums concerning many issues and desirable features to be added, there is &lt;strong&gt;much room for improvement&lt;/strong&gt;. For instance, as of this time of writing of this article, to my knowledge, I find it frustrating that Streamlit has yet to provide an api for interactive images. What I meant by interactive images is something along the line of clicking on an image as though the image is a button. Upon a click, we trigger an event that either records new data point or submits a request to server.&lt;/p&gt;

&lt;p&gt;I reckon web applications are becoming increasingly popular. As remote work is gaining traction in the industry, we may find ourselves working with others across the country or the world. It is hard to share and work together if the application is local. A viable alternative is to move the application (output of the development) to the web server whereby team members can &lt;strong&gt;view&lt;/strong&gt; and &lt;strong&gt;interact&lt;/strong&gt; online (ssh to server, sftp for file transfer). Visualization and Interaction are very crucial for work in mathematical modeling, including but not limited to data sciences. I would like to emphasize this point by supplying some screen-shots on the capability as of August 2022.&lt;/p&gt;

&lt;h5 id=&quot;screen-shots&quot;&gt;Screen-shots&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s see how the traffic varies throughout the day at different traffic hubs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Streamlit/eg1.png&quot; alt=&quot;Picture description&quot; width=&quot;1024px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An intuitive and visual way to explore model’s performances (objection-detection models).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Streamlit/eg2.gif&quot; alt=&quot;Picture description&quot; width=&quot;1024px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s try the model on someone else data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Streamlit/eg3.png&quot; alt=&quot;Picture description&quot; width=&quot;1024px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Wow! we can even generate and play audio clips.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Streamlit/eg4.png&quot; alt=&quot;Picture description&quot; width=&quot;1024px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Wow! Wouldn’t VR be useful for collecting feedback on our creation from other team members?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Streamlit/eg5.png&quot; alt=&quot;Picture description&quot; width=&quot;1024px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I cannot help but to borrow a famous quote from Ralph Waldo Emerson.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Numbers serve to discipline rhetoric. Without them it is too easy to follow flights of fancy, to ignore the world as it is and to remold it nearer the heart’s desire.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;prerequisite&quot;&gt;Prerequisite&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Install Python 3&lt;/li&gt;
  &lt;li&gt;Install Streamlit and its dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-do-i-use-it&quot;&gt;Why do I use it?&lt;/h2&gt;

&lt;p&gt;In the past, I have tried to create an executable for my application which is then shared in our team as a proof of concept. The python package I used is Pyinstaller. Pyinstaller creates an executable by bundling all the dependencies (libraries installed in an existing virtual environment). The executable must be created in the same operating system as the one it will be used. For instance, if the executable is created in Windows, other Windows computer can run it without a python interpreter and dependencies or libraries.&lt;/p&gt;

&lt;p&gt;When the executable is being created, Pyinstaller bundles all the libraries that may be irrelevant together. Thus, the final executable can be very large even though the application is quite straightforward and simple. While Pyinstaller is compatible with many commonly used python packages, and I have yet to run into incompatibility issues, I fear as the python community develops, it will be challenging to accommodate more complex needs of developers.&lt;/p&gt;

&lt;h2 id=&quot;my-remarks-and-comments&quot;&gt;My remarks and comments&lt;/h2&gt;

&lt;p&gt;When I first try Streamlit, I feel like a latex user discovers the power and convenience of Microsoft Word. In the old days, I used to rely on Latex to format and design the layout of my thesis. While Latex is very good at specifying dimension, style, font, and whitespace at the level of paragraphs, pages and document, it does not display the final look of the document unless the user can successfully compile the code. Compilation can bring about its own troubles and difficulties. Even upon a successful compilation, the final look of the document often differs from the expectation of the user. What happens next is debugging, rewriting and recompiling, leading to much frustration. Latex is very flexible and versatile, so eventually I got the look I desired.&lt;/p&gt;

&lt;p&gt;What Microsoft Word solves and I reckon Streamlit is doing the same is that Word displays the effect of the command immediately and takes all the guess work out of the process. I like fast feedback loops and intuitive ways of building things. Streamlit helps me take care of HTML, JavaScript, and web server framework. It creates and runs a simple web application, sufficient for prototyping and proof of concept that we will need to succeed in a team. I highly &lt;strong&gt;recommend&lt;/strong&gt; Streamlit for those who work in a team environment and need to constantly share application prototypes and ideas consistently. It helps developers focus on what is the most important: insights in data.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pyinstaller.org/en/stable/spec-files.html&quot;&gt;Pyinstaller&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://streamlit.io&quot;&gt;Streamlit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/streamlit-image-comparison/&quot;&gt;Streamlit Plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://altair-viz.github.io/&quot;&gt;Altair&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wilson Fok</name></author><category term="Others" /><summary type="html">Introduction : What is Streamlit On Streamlit website, Streamlit is proclaimed to be “the fastest way to build and share web data apps”. While I am unsure whether Streamlit is the fastest way, I reckon Streamlit makes creating web-based applications with python quite easy. Streamlit is a python package that helps developers quickly build a simple web application on server. The web applications must be simple. The framework excludes many standard functionalities such as authentication, encryption, unit-testing and other essentials for production. Its documentation and examples seem to suggest that the web applications are not targeted for scale (ie several servers handling requests from millions of clients). It is a python package that is compatible with many existing libraries, most notably Matplotlib and Altair for visualization, Numpy and Pandas for number crunching, Pytorch/ Tensorflow and other frameworks for Deep Learning. The development on Streamlit is quick because of two handy features. As it relies on a python interpreter, it runs as the interpreter reads the source code sequentially. Problematic lines or bugs can be found as soon as the execution breaks. In addition to the ease of debugging, Streamlit monitors changes in the python source code, re-runs the web server, and reflects the updates of those pages automatically. So developers can see the changes and improve the code as they see fit in real-time. Nowadays, packages seldom remain packages. Streamlit has built its own community of developers and users. While there are plenty of helpful posts on forums concerning many issues and desirable features to be added, there is much room for improvement. For instance, as of this time of writing of this article, to my knowledge, I find it frustrating that Streamlit has yet to provide an api for interactive images. What I meant by interactive images is something along the line of clicking on an image as though the image is a button. Upon a click, we trigger an event that either records new data point or submits a request to server. I reckon web applications are becoming increasingly popular. As remote work is gaining traction in the industry, we may find ourselves working with others across the country or the world. It is hard to share and work together if the application is local. A viable alternative is to move the application (output of the development) to the web server whereby team members can view and interact online (ssh to server, sftp for file transfer). Visualization and Interaction are very crucial for work in mathematical modeling, including but not limited to data sciences. I would like to emphasize this point by supplying some screen-shots on the capability as of August 2022. Screen-shots Let’s see how the traffic varies throughout the day at different traffic hubs. An intuitive and visual way to explore model’s performances (objection-detection models). Let’s try the model on someone else data. Wow! we can even generate and play audio clips. Wow! Wouldn’t VR be useful for collecting feedback on our creation from other team members? I cannot help but to borrow a famous quote from Ralph Waldo Emerson. Numbers serve to discipline rhetoric. Without them it is too easy to follow flights of fancy, to ignore the world as it is and to remold it nearer the heart’s desire. Prerequisite Install Python 3 Install Streamlit and its dependencies Why do I use it? In the past, I have tried to create an executable for my application which is then shared in our team as a proof of concept. The python package I used is Pyinstaller. Pyinstaller creates an executable by bundling all the dependencies (libraries installed in an existing virtual environment). The executable must be created in the same operating system as the one it will be used. For instance, if the executable is created in Windows, other Windows computer can run it without a python interpreter and dependencies or libraries. When the executable is being created, Pyinstaller bundles all the libraries that may be irrelevant together. Thus, the final executable can be very large even though the application is quite straightforward and simple. While Pyinstaller is compatible with many commonly used python packages, and I have yet to run into incompatibility issues, I fear as the python community develops, it will be challenging to accommodate more complex needs of developers. My remarks and comments When I first try Streamlit, I feel like a latex user discovers the power and convenience of Microsoft Word. In the old days, I used to rely on Latex to format and design the layout of my thesis. While Latex is very good at specifying dimension, style, font, and whitespace at the level of paragraphs, pages and document, it does not display the final look of the document unless the user can successfully compile the code. Compilation can bring about its own troubles and difficulties. Even upon a successful compilation, the final look of the document often differs from the expectation of the user. What happens next is debugging, rewriting and recompiling, leading to much frustration. Latex is very flexible and versatile, so eventually I got the look I desired. What Microsoft Word solves and I reckon Streamlit is doing the same is that Word displays the effect of the command immediately and takes all the guess work out of the process. I like fast feedback loops and intuitive ways of building things. Streamlit helps me take care of HTML, JavaScript, and web server framework. It creates and runs a simple web application, sufficient for prototyping and proof of concept that we will need to succeed in a team. I highly recommend Streamlit for those who work in a team environment and need to constantly share application prototypes and ideas consistently. It helps developers focus on what is the most important: insights in data. References Pyinstaller Streamlit Streamlit Plugin Altair</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/Streamlit/eg1.png" /><media:content medium="image" url="/assets/images/Streamlit/eg1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Random Patterns</title><link href="/others/2022/02/08/random_patterns/" rel="alternate" type="text/html" title="Random Patterns" /><published>2022-02-08T00:00:00+08:00</published><updated>2022-02-08T00:00:00+08:00</updated><id>/others/2022/02/08/random_patterns</id><content type="html" xml:base="/others/2022/02/08/random_patterns/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I have explored interesting and beautiful patterns with the help of mathematics. Here I share with you some of the famous temporal and spatial patterns we could derive using equations. The patterns include Chaos from Lorenz system, Randomness (a lack of pattern itself) from a random walk model, Regress to Mean, Folding from Henon Group. Because of their temporal and spatial nature, I present them to you in videos.&lt;/p&gt;

&lt;h2 id=&quot;prerequisite&quot;&gt;Prerequisite&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Install Anaconda 3&lt;/li&gt;
  &lt;li&gt;Install Mayavi and its dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;lorenz-system&quot;&gt;Lorenz System&lt;/h4&gt;
&lt;p&gt;Lorenz system and its attractors are one of the most famous examples of Chaos on the Internet. We can find the basic background information from &lt;a href=&quot;https://en.wikipedia.org/wiki/Lorenz_system&quot;&gt;Wikipedia&lt;/a&gt;. To avoid repetition, I ought not to re-write what’s on Wikipedia and ought to show you my code that draws the “butterfly” pattern. It is very important to emphasize that its solution ONLY becomes chaotic with specific initial conditions and coefficients.&lt;/p&gt;

&lt;p&gt;Load libraries and modules&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy.integrate&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve_ivp&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mpl_toolkits.mplot3d&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Axes3D&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Initial conditions and coefficients used in this article.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rho&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.667&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#initial position
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lorenz equations; the integration of the ODEs is performed by a numerical method (Explicit Runge-Kutta method of order 5) implemented in Scipy.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# time steps
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5e4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lorenz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rho&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rho&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wp&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;soln&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve_ivp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lorenz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rho&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dense_output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;integration taken {}&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Visualization (3D)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mayavi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bgcolor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot3d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points3d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale_factor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;arrow&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ni&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlab_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ni&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;.png&apos;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savefig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset_zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;25.53261881918745&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;127.13833071761842&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;154.30086011420792&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.70852142&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;1.38596485&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;24.30126513&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Visualization (2D)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;y&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;s&quot;&gt;&apos;y&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;s&quot;&gt;&apos;z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;y&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;blue&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;red&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;orange&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;green&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;yellow&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;black&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rolling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;y&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# plt.grid()
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;figures-and-videos&quot;&gt;Figures and Videos&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_patterns/Figure_1.png&quot; alt=&quot;Picture description&quot; width=&quot;1024px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The oscillation of the positions appears quite random and chaotic if we rely only these 2D plots. However, we can clearly identify interesting motions when we create a 3D video.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/7HPwGRWR-Nk&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;The arrow denotes an instantaneous position (x,y,z,t).
The line denotes the arrow’s trajectory, and its color depicts the time elapsed.
In the video, we can see the arrow hops between the left and right wings while orbiting the respective centers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_patterns/Figure_2.png&quot; alt=&quot;Picture description&quot; width=&quot;1024px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Regress to Mean is an interesting concept to explore a bit further. I added a series of moving averages (non-blue lines) of each individual spatial component (x,y,z) (in blue). When we follow the averages, the position appears to drift away from and then pull back towards the averages over time.&lt;/p&gt;

&lt;h4 id=&quot;henon-group&quot;&gt;Henon Group&lt;/h4&gt;

&lt;p&gt;Apart from Chaos, Henon group is interesting, for they concern with the concept of folding. 
I take the equations and background materials from &lt;a href=&quot;https://mathworld.wolfram.com/HenonMap.html&quot;&gt;mathworld&lt;/a&gt;. The tutorial shows that the pattern mirrors itself as if we have just drawn the pattern on a piece of paper and then folded the paper in half. Thus, we have a pair. However, the tutorial only explains a 2D Henon group. So I create a 3D Henon group by duplicating its y onto z.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_next_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.9991&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;num_steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_next_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_next_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,:])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The pair is shown in the video. Each dot represents a spatial location. Its colour denotes the time elapsed. The spinning effect is added to enhance the feeling of the sense of universe and its galaxies.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Gb5I6Kr-8Fo&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;720&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;roll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;.png&apos;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savefig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# print (mlab.view())
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# mlab.pitch(angle)
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# mlab.yaw(angle)
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;165.62351678494917&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;33.92495926342261&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;29.14422638311501&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.04513454&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.04509211&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.04504395&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bgcolor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points3d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale_factor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;random-walk&quot;&gt;Random Walk&lt;/h4&gt;

&lt;p&gt;So far, we have explored two deterministic systems, namely Lorenz system and Henon Group. We turn to the exact opposite: pure Randomness. I model Randomness using a popular &lt;a href=&quot;https://en.wikipedia.org/wiki/Random_walk&quot;&gt;random walk model&lt;/a&gt;. Unlike Lorenz system and Henon group that offer a deterministic numerical solution, random walk is 100% stochastic and therefore indeterminable.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;num_steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# velocity ranges between +- 0.5
# initial starting position is zero
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cumsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# a quick way to integrate the velocity to get positions
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;y&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;figures-and-videos-1&quot;&gt;Figures and Videos&lt;/h4&gt;

&lt;p&gt;What I am showing you here is just one possible solution out of infinite solutions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_patterns/Figure_1RandomWalk.png&quot; alt=&quot;Picture description&quot; width=&quot;1024px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The trajectory appears to be trending somewhere in 3D. It therefore fools me into believing that I can predict its final resting place. Once again, let’s watch it in motion.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/8B0kRnIK1L4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;The arrow denotes an instantaneous position (x,y,z,t).
The line denotes the arrow’s trajectory, and its color depicts the time elapsed.
In the video, we can see the arrow zigzag. However, one must not be fooled that it is going anywhere!
(as an aside, the arrow in fact follows the smoothed trajectory (smoothing window size = 100), instead of the raw trajectory. This improves the visual appeal as it reduces the arrow’s acceleration)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_patterns/Figure_2RandomWalk.png&quot; alt=&quot;Picture description&quot; width=&quot;1024px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Regress to mean is robustly at work; it appears that the blue line spends about equal amount of time above and below the series of averages lines.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&apos;y&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&apos;z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;y&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;blue&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;red&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;orange&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;green&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;yellow&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;black&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rolling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;y&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# plt.grid()
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mayavi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bgcolor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot3d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# only watch the smooth motion
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rolling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points3d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale_factor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;arrow&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;degree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ni&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlab_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;roll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;degree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;degree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ni&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;.png&apos;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savefig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset_zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mlab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope you like seeing patterns that appear random but in fact deterministic as well as patterns that appear deterministic but in fact purely random.&lt;/p&gt;

&lt;h2 id=&quot;create-video-from-image-series&quot;&gt;Create Video from Image Series&lt;/h2&gt;
&lt;p&gt;This handy script builds video by stitching images (in chronological order).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;imageio&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rstrip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;.png&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;.&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;.png&apos;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;Figure&apos;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;RandomWalk.mp4&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#make sure all images are in sequential order !
&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Wilson Fok</name></author><category term="Others" /><summary type="html">Introduction I have explored interesting and beautiful patterns with the help of mathematics. Here I share with you some of the famous temporal and spatial patterns we could derive using equations. The patterns include Chaos from Lorenz system, Randomness (a lack of pattern itself) from a random walk model, Regress to Mean, Folding from Henon Group. Because of their temporal and spatial nature, I present them to you in videos. Prerequisite Install Anaconda 3 Install Mayavi and its dependencies Lorenz System Lorenz system and its attractors are one of the most famous examples of Chaos on the Internet. We can find the basic background information from Wikipedia. To avoid repetition, I ought not to re-write what’s on Wikipedia and ought to show you my code that draws the “butterfly” pattern. It is very important to emphasize that its solution ONLY becomes chaotic with specific initial conditions and coefficients. Load libraries and modules import time import numpy as np from scipy.integrate import solve_ivp import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D Initial conditions and coefficients used in this article. sigma, beta, rho = 10, 2.667, 28 y0 = [0,1,1.05] #initial position Lorenz equations; the integration of the ODEs is performed by a numerical method (Explicit Runge-Kutta method of order 5) implemented in Scipy. # time steps tmax,n = 100, int(5e4) def lorenz(t, X, sigma, beta, rho): u,v,w = X up = -sigma*(u-v) vp = rho*u - v -u*w wp = -beta*w + u*v return up, vp, wp t = np.linspace(0, tmax, n) start_time = time.time() soln = solve_ivp(lorenz, (0, tmax), y0, args=(sigma, beta, rho), dense_output=True) x,y,z = soln.sol(t) print (&apos;integration taken {}&apos;.format(time.time() - start_time)) Visualization (3D) from mayavi import mlab fig=mlab.figure(1, bgcolor=(0, 0, 0), size=(16*60, 16*60)) line = mlab.plot3d(x,y,z,t, line_width = 10) scatter = mlab.points3d(x[0], y[0], z[0], scale_factor = 5, mode=&apos;arrow&apos;) @mlab.animate(delay=10) def anim(): for ni, (i,j,k) in enumerate(zip(x,y,z)): scatter.mlab_source.set(x=i,y=j,z=k) filename = str(ni) + &apos;.png&apos; mlab.savefig(filename=filename) yield fig = mlab.gcf() fig.scene.reset_zoom() view = (-25.53261881918745, 127.13833071761842, 154.30086011420792, np.array([ 0.70852142, 1.38596485, 24.30126513])) mlab.view(*view) anim() mlab.show() Visualization (2D) fig, axes = plt.subplots(3,1, sharex=True, sharey=True) for a, data, name in zip(axes, [x,y,z], [&apos;x&apos;, &apos;y&apos;, &apos;z&apos;]): a.plot(t,data) a.set_title(name) plt.show() import pandas as pd df = pd.DataFrame.from_dict({&apos;x&apos;:x, &apos;y&apos;:y, &apos;z&apos;:z}) fig, axes = plt.subplots(3,1, sharex=True, sharey=False) for a, data, name in zip(axes, [x,y,z], [&apos;x&apos;, &apos;y&apos;, &apos;z&apos;]): a.plot(t,data,color=&apos;blue&apos;) a.set_title(name) a.grid() for color, window in zip([&apos;red&apos;, &apos;orange&apos;, &apos;green&apos;, &apos;yellow&apos;, &apos;black&apos;], [200, 400, 600, 800, 1200]): avg = df.rolling(window).mean() for a, name in zip(axes, [&apos;x&apos;, &apos;y&apos;, &apos;z&apos;]): a.plot(t, avg[name], color=color, label=str(window)) # plt.grid() plt.legend() plt.show() Figures and Videos The oscillation of the positions appears quite random and chaotic if we rely only these 2D plots. However, we can clearly identify interesting motions when we create a 3D video. The arrow denotes an instantaneous position (x,y,z,t). The line denotes the arrow’s trajectory, and its color depicts the time elapsed. In the video, we can see the arrow hops between the left and right wings while orbiting the respective centers. Regress to Mean is an interesting concept to explore a bit further. I added a series of moving averages (non-blue lines) of each individual spatial component (x,y,z) (in blue). When we follow the averages, the position appears to drift away from and then pull back towards the averages over time. Henon Group Apart from Chaos, Henon group is interesting, for they concern with the concept of folding. I take the equations and background materials from mathworld. The tutorial shows that the pattern mirrors itself as if we have just drawn the pattern on a piece of paper and then folded the paper in half. Thus, we have a pair. However, the tutorial only explains a 2D Henon group. So I create a 3D Henon group by duplicating its y onto z. def get_next_step(c0,a=0.2,b=0.9991): x,y,z = c0 x1 = y + 1 - a*x*x y1 = b*x z1 = y return np.array((x1, y1, z1)) c0 = [0,0,0] num_steps = 10000 t = np.linspace(0,1,num_steps) results = np.zeros((num_steps, 3)) for i in range(num_steps): if i == 0: results[i,:] = get_next_step(c0) else: results[i,:] = get_next_step(results[i-1,:]) The pair is shown in the video. Each dot represents a spatial location. Its colour denotes the time elapsed. The spinning effect is added to enhance the feeling of the sense of universe and its galaxies. @mlab.animate(delay=10) def anim(): for angle in np.linspace(0,360, 720): mlab.roll(angle) filename = str(angle) + &apos;.png&apos; mlab.savefig(filename=filename) # print (mlab.view()) # mlab.pitch(angle) # mlab.yaw(angle) yield view = (165.62351678494917, 33.92495926342261, 29.14422638311501, np.array([0.04513454, 0.04509211, 0.04504395])) fig=mlab.figure(1, bgcolor=(0, 0, 0), size=(16*60, 16*60)) s = mlab.points3d(results[:,0],results[:,1],results[:,2], t, scale_factor=0.1) mlab.view(*view) anim() mlab.show() Random Walk So far, we have explored two deterministic systems, namely Lorenz system and Henon Group. We turn to the exact opposite: pure Randomness. I model Randomness using a popular random walk model. Unlike Lorenz system and Henon group that offer a deterministic numerical solution, random walk is 100% stochastic and therefore indeterminable. num_steps = 10000 delta = np.random.rand(num_steps, 3) - 0.5 # velocity ranges between +- 0.5 # initial starting position is zero positions = np.cumsum(delta, 0) # a quick way to integrate the velocity to get positions x,y,z = positions[:,0], positions[:,1], positions[:,2] t = np.linspace(0,1,num_steps) fig, axes = plt.subplots(3,1, sharex=True, sharey=True) for a, data, name in zip(axes, [x,y,z], [&apos;x&apos;, &apos;y&apos;, &apos;z&apos;]): a.plot(t,data) a.set_title(name) plt.show() Figures and Videos What I am showing you here is just one possible solution out of infinite solutions. The trajectory appears to be trending somewhere in 3D. It therefore fools me into believing that I can predict its final resting place. Once again, let’s watch it in motion. The arrow denotes an instantaneous position (x,y,z,t). The line denotes the arrow’s trajectory, and its color depicts the time elapsed. In the video, we can see the arrow zigzag. However, one must not be fooled that it is going anywhere! (as an aside, the arrow in fact follows the smoothed trajectory (smoothing window size = 100), instead of the raw trajectory. This improves the visual appeal as it reduces the arrow’s acceleration) Regress to mean is robustly at work; it appears that the blue line spends about equal amount of time above and below the series of averages lines. import pandas as pd df = pd.DataFrame.from_dict({&apos;x&apos;:x, &apos;y&apos;:y, &apos;z&apos;:z}) fig, axes = plt.subplots(3,1, sharex=True, sharey=False) for a, data, name in zip(axes, [x,y,z], [&apos;x&apos;, &apos;y&apos;, &apos;z&apos;]): a.plot(t,data,color=&apos;blue&apos;) a.set_title(name) a.grid() for color, window in zip([&apos;red&apos;, &apos;orange&apos;, &apos;green&apos;, &apos;yellow&apos;, &apos;black&apos;], [200, 400, 600, 800, 1200]): avg = df.rolling(window).mean() for a, name in zip(axes, [&apos;x&apos;, &apos;y&apos;, &apos;z&apos;]): a.plot(t, avg[name], color=color, label=str(window)) # plt.grid() plt.legend() plt.show() from mayavi import mlab fig=mlab.figure(1, bgcolor=(0, 0, 0), size=(16*60, 16*60)) line = mlab.plot3d(x,y,z,t, line_width = 30) # only watch the smooth motion avg = df.rolling(100).mean() avg = avg.dropna() avg = avg.values x,y,z = avg[:,0], avg[:,1], avg[:,2] scatter = mlab.points3d(x[0], y[0], z[0], scale_factor =4, mode=&apos;arrow&apos;) @mlab.animate(delay=10) def anim(): degree = 0 for ni, (i,j,k) in enumerate(zip(x,y,z)): scatter.mlab_source.set(x=i,y=j,z=k) mlab.roll(degree) degree += (360 / len(avg)) filename = str(ni) + &apos;.png&apos; mlab.savefig(filename=filename) yield fig = mlab.gcf() fig.scene.reset_zoom() anim() mlab.show() Conclusion I hope you like seeing patterns that appear random but in fact deterministic as well as patterns that appear deterministic but in fact purely random. Create Video from Image Series This handy script builds video by stitching images (in chronological order). import os import imageio files = {float(key.rstrip(&apos;.png&apos;)): key for key in os.listdir(&apos;.&apos;) if &apos;.png&apos; in key and &apos;Figure&apos; not in key} writer = imageio.get_writer(&apos;RandomWalk.mp4&apos;, fps=30) for key in sorted(files.keys()): #make sure all images are in sequential order ! file = files[key] writer.append_data(imageio.imread(file)) writer.close()</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/random_patterns/Figure_2.png" /><media:content medium="image" url="/assets/images/random_patterns/Figure_2.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>